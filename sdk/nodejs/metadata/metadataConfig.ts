// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * <!-- subcategory:Metadata -->Metadata Config resource.
 * For more information refer to [Metadata](https://wiki.servarr.com/readarr/settings#options) documentation.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as readarr from "@maienm/pulumi-readarr";
 *
 * const example = new readarr.metadata.MetadataConfig("example", {
 *     embedMetadata: true,
 *     scrubAudioTags: false,
 *     updateCovers: true,
 *     writeAudioTags: "no",
 *     writeBookTags: "newFiles",
 * });
 * ```
 *
 * ## Import
 *
 * import does not need parameters
 *
 * ```sh
 *  $ pulumi import readarr:Metadata/metadataConfig:MetadataConfig example
 * ```
 */
export class MetadataConfig extends pulumi.CustomResource {
    /**
     * Get an existing MetadataConfig resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MetadataConfigState, opts?: pulumi.CustomResourceOptions): MetadataConfig {
        return new MetadataConfig(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'readarr:Metadata/metadataConfig:MetadataConfig';

    /**
     * Returns true if the given object is an instance of MetadataConfig.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is MetadataConfig {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === MetadataConfig.__pulumiType;
    }

    /**
     * Embed metadata in book files.
     */
    public readonly embedMetadata!: pulumi.Output<boolean>;
    /**
     * Scrub audio tags.
     */
    public readonly scrubAudioTags!: pulumi.Output<boolean>;
    /**
     * Update covers.
     */
    public readonly updateCovers!: pulumi.Output<boolean>;
    /**
     * Write audio tags.
     */
    public readonly writeAudioTags!: pulumi.Output<string>;
    /**
     * Write book tags.
     */
    public readonly writeBookTags!: pulumi.Output<string>;

    /**
     * Create a MetadataConfig resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MetadataConfigArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: MetadataConfigArgs | MetadataConfigState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as MetadataConfigState | undefined;
            resourceInputs["embedMetadata"] = state ? state.embedMetadata : undefined;
            resourceInputs["scrubAudioTags"] = state ? state.scrubAudioTags : undefined;
            resourceInputs["updateCovers"] = state ? state.updateCovers : undefined;
            resourceInputs["writeAudioTags"] = state ? state.writeAudioTags : undefined;
            resourceInputs["writeBookTags"] = state ? state.writeBookTags : undefined;
        } else {
            const args = argsOrState as MetadataConfigArgs | undefined;
            if ((!args || args.embedMetadata === undefined) && !opts.urn) {
                throw new Error("Missing required property 'embedMetadata'");
            }
            if ((!args || args.scrubAudioTags === undefined) && !opts.urn) {
                throw new Error("Missing required property 'scrubAudioTags'");
            }
            if ((!args || args.updateCovers === undefined) && !opts.urn) {
                throw new Error("Missing required property 'updateCovers'");
            }
            if ((!args || args.writeAudioTags === undefined) && !opts.urn) {
                throw new Error("Missing required property 'writeAudioTags'");
            }
            if ((!args || args.writeBookTags === undefined) && !opts.urn) {
                throw new Error("Missing required property 'writeBookTags'");
            }
            resourceInputs["embedMetadata"] = args ? args.embedMetadata : undefined;
            resourceInputs["scrubAudioTags"] = args ? args.scrubAudioTags : undefined;
            resourceInputs["updateCovers"] = args ? args.updateCovers : undefined;
            resourceInputs["writeAudioTags"] = args ? args.writeAudioTags : undefined;
            resourceInputs["writeBookTags"] = args ? args.writeBookTags : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(MetadataConfig.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering MetadataConfig resources.
 */
export interface MetadataConfigState {
    /**
     * Embed metadata in book files.
     */
    embedMetadata?: pulumi.Input<boolean>;
    /**
     * Scrub audio tags.
     */
    scrubAudioTags?: pulumi.Input<boolean>;
    /**
     * Update covers.
     */
    updateCovers?: pulumi.Input<boolean>;
    /**
     * Write audio tags.
     */
    writeAudioTags?: pulumi.Input<string>;
    /**
     * Write book tags.
     */
    writeBookTags?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a MetadataConfig resource.
 */
export interface MetadataConfigArgs {
    /**
     * Embed metadata in book files.
     */
    embedMetadata: pulumi.Input<boolean>;
    /**
     * Scrub audio tags.
     */
    scrubAudioTags: pulumi.Input<boolean>;
    /**
     * Update covers.
     */
    updateCovers: pulumi.Input<boolean>;
    /**
     * Write audio tags.
     */
    writeAudioTags: pulumi.Input<string>;
    /**
     * Write book tags.
     */
    writeBookTags: pulumi.Input<string>;
}
