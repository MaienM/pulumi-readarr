// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * <!-- subcategory:Authors -->Author resource.
 * For more information refer to [Authors](https://wiki.servarr.com/readarr/library#authors) documentation.
 *
 * ## Import
 *
 * import using the API/UI ID
 *
 * ```sh
 *  $ pulumi import readarr:Authors/author:Author example 10
 * ```
 */
export class Author extends pulumi.CustomResource {
    /**
     * Get an existing Author resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AuthorState, opts?: pulumi.CustomResourceOptions): Author {
        return new Author(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'readarr:Authors/author:Author';

    /**
     * Returns true if the given object is an instance of Author.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Author {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Author.__pulumiType;
    }

    /**
     * Author name.
     */
    public readonly authorName!: pulumi.Output<string>;
    /**
     * Foreign author ID.
     */
    public readonly foreignAuthorId!: pulumi.Output<string>;
    /**
     * List genres.
     */
    public /*out*/ readonly genres!: pulumi.Output<string[]>;
    /**
     * Monitored flag.
     */
    public readonly monitored!: pulumi.Output<boolean>;
    /**
     * Overview.
     */
    public /*out*/ readonly overview!: pulumi.Output<string>;
    /**
     * Full author path.
     */
    public readonly path!: pulumi.Output<string>;
    /**
     * Quality profile ID.
     */
    public readonly qualityProfileId!: pulumi.Output<number>;
    /**
     * Author status.
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    /**
     * List of associated tags.
     */
    public readonly tags!: pulumi.Output<number[]>;

    /**
     * Create a Author resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AuthorArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AuthorArgs | AuthorState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AuthorState | undefined;
            resourceInputs["authorName"] = state ? state.authorName : undefined;
            resourceInputs["foreignAuthorId"] = state ? state.foreignAuthorId : undefined;
            resourceInputs["genres"] = state ? state.genres : undefined;
            resourceInputs["monitored"] = state ? state.monitored : undefined;
            resourceInputs["overview"] = state ? state.overview : undefined;
            resourceInputs["path"] = state ? state.path : undefined;
            resourceInputs["qualityProfileId"] = state ? state.qualityProfileId : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
        } else {
            const args = argsOrState as AuthorArgs | undefined;
            if ((!args || args.authorName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'authorName'");
            }
            if ((!args || args.foreignAuthorId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'foreignAuthorId'");
            }
            if ((!args || args.monitored === undefined) && !opts.urn) {
                throw new Error("Missing required property 'monitored'");
            }
            if ((!args || args.path === undefined) && !opts.urn) {
                throw new Error("Missing required property 'path'");
            }
            if ((!args || args.qualityProfileId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'qualityProfileId'");
            }
            resourceInputs["authorName"] = args ? args.authorName : undefined;
            resourceInputs["foreignAuthorId"] = args ? args.foreignAuthorId : undefined;
            resourceInputs["monitored"] = args ? args.monitored : undefined;
            resourceInputs["path"] = args ? args.path : undefined;
            resourceInputs["qualityProfileId"] = args ? args.qualityProfileId : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["genres"] = undefined /*out*/;
            resourceInputs["overview"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Author.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Author resources.
 */
export interface AuthorState {
    /**
     * Author name.
     */
    authorName?: pulumi.Input<string>;
    /**
     * Foreign author ID.
     */
    foreignAuthorId?: pulumi.Input<string>;
    /**
     * List genres.
     */
    genres?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Monitored flag.
     */
    monitored?: pulumi.Input<boolean>;
    /**
     * Overview.
     */
    overview?: pulumi.Input<string>;
    /**
     * Full author path.
     */
    path?: pulumi.Input<string>;
    /**
     * Quality profile ID.
     */
    qualityProfileId?: pulumi.Input<number>;
    /**
     * Author status.
     */
    status?: pulumi.Input<string>;
    /**
     * List of associated tags.
     */
    tags?: pulumi.Input<pulumi.Input<number>[]>;
}

/**
 * The set of arguments for constructing a Author resource.
 */
export interface AuthorArgs {
    /**
     * Author name.
     */
    authorName: pulumi.Input<string>;
    /**
     * Foreign author ID.
     */
    foreignAuthorId: pulumi.Input<string>;
    /**
     * Monitored flag.
     */
    monitored: pulumi.Input<boolean>;
    /**
     * Full author path.
     */
    path: pulumi.Input<string>;
    /**
     * Quality profile ID.
     */
    qualityProfileId: pulumi.Input<number>;
    /**
     * List of associated tags.
     */
    tags?: pulumi.Input<pulumi.Input<number>[]>;
}
