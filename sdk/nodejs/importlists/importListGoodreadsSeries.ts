// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * <!-- subcategory:Import Lists -->Import List Goodreads Series resource.
 * For more information refer to [Import List](https://wiki.servarr.com/readarr/settings#import-lists) and [Goodreads Series](https://wiki.servarr.com/readarr/supported#goodreadsseries).
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as readarr from "@maienm/pulumi-readarr";
 *
 * const example = new readarr.importlists.ImportListGoodreadsSeries("example", {
 *     enableAutomaticAdd: false,
 *     metadataProfileId: 1,
 *     qualityProfileId: 1,
 *     rootFolderPath: "/books",
 *     seriesId: 45175,
 *     shouldMonitor: "specificBook",
 *     shouldSearch: false,
 *     tags: [
 *         1,
 *         2,
 *         3,
 *     ],
 * });
 * ```
 *
 * ## Import
 *
 * import using the API/UI ID
 *
 * ```sh
 *  $ pulumi import readarr:ImportLists/importListGoodreadsSeries:ImportListGoodreadsSeries example 1
 * ```
 */
export class ImportListGoodreadsSeries extends pulumi.CustomResource {
    /**
     * Get an existing ImportListGoodreadsSeries resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ImportListGoodreadsSeriesState, opts?: pulumi.CustomResourceOptions): ImportListGoodreadsSeries {
        return new ImportListGoodreadsSeries(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'readarr:ImportLists/importListGoodreadsSeries:ImportListGoodreadsSeries';

    /**
     * Returns true if the given object is an instance of ImportListGoodreadsSeries.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ImportListGoodreadsSeries {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ImportListGoodreadsSeries.__pulumiType;
    }

    /**
     * Enable automatic add flag.
     */
    public readonly enableAutomaticAdd!: pulumi.Output<boolean>;
    /**
     * List order.
     */
    public readonly listOrder!: pulumi.Output<number>;
    /**
     * Metadata profile ID.
     */
    public readonly metadataProfileId!: pulumi.Output<number>;
    /**
     * Import List name.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Quality profile ID.
     */
    public readonly qualityProfileId!: pulumi.Output<number>;
    /**
     * Root folder path.
     */
    public readonly rootFolderPath!: pulumi.Output<string>;
    /**
     * Series ID.
     */
    public readonly seriesId!: pulumi.Output<number>;
    /**
     * Should monitor.
     */
    public readonly shouldMonitor!: pulumi.Output<string>;
    /**
     * Should search flag.
     */
    public readonly shouldSearch!: pulumi.Output<boolean>;
    /**
     * List of associated tags.
     */
    public readonly tags!: pulumi.Output<number[]>;

    /**
     * Create a ImportListGoodreadsSeries resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ImportListGoodreadsSeriesArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ImportListGoodreadsSeriesArgs | ImportListGoodreadsSeriesState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ImportListGoodreadsSeriesState | undefined;
            resourceInputs["enableAutomaticAdd"] = state ? state.enableAutomaticAdd : undefined;
            resourceInputs["listOrder"] = state ? state.listOrder : undefined;
            resourceInputs["metadataProfileId"] = state ? state.metadataProfileId : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["qualityProfileId"] = state ? state.qualityProfileId : undefined;
            resourceInputs["rootFolderPath"] = state ? state.rootFolderPath : undefined;
            resourceInputs["seriesId"] = state ? state.seriesId : undefined;
            resourceInputs["shouldMonitor"] = state ? state.shouldMonitor : undefined;
            resourceInputs["shouldSearch"] = state ? state.shouldSearch : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
        } else {
            const args = argsOrState as ImportListGoodreadsSeriesArgs | undefined;
            if ((!args || args.name === undefined) && !opts.urn) {
                throw new Error("Missing required property 'name'");
            }
            if ((!args || args.seriesId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'seriesId'");
            }
            resourceInputs["enableAutomaticAdd"] = args ? args.enableAutomaticAdd : undefined;
            resourceInputs["listOrder"] = args ? args.listOrder : undefined;
            resourceInputs["metadataProfileId"] = args ? args.metadataProfileId : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["qualityProfileId"] = args ? args.qualityProfileId : undefined;
            resourceInputs["rootFolderPath"] = args ? args.rootFolderPath : undefined;
            resourceInputs["seriesId"] = args ? args.seriesId : undefined;
            resourceInputs["shouldMonitor"] = args ? args.shouldMonitor : undefined;
            resourceInputs["shouldSearch"] = args ? args.shouldSearch : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ImportListGoodreadsSeries.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ImportListGoodreadsSeries resources.
 */
export interface ImportListGoodreadsSeriesState {
    /**
     * Enable automatic add flag.
     */
    enableAutomaticAdd?: pulumi.Input<boolean>;
    /**
     * List order.
     */
    listOrder?: pulumi.Input<number>;
    /**
     * Metadata profile ID.
     */
    metadataProfileId?: pulumi.Input<number>;
    /**
     * Import List name.
     */
    name?: pulumi.Input<string>;
    /**
     * Quality profile ID.
     */
    qualityProfileId?: pulumi.Input<number>;
    /**
     * Root folder path.
     */
    rootFolderPath?: pulumi.Input<string>;
    /**
     * Series ID.
     */
    seriesId?: pulumi.Input<number>;
    /**
     * Should monitor.
     */
    shouldMonitor?: pulumi.Input<string>;
    /**
     * Should search flag.
     */
    shouldSearch?: pulumi.Input<boolean>;
    /**
     * List of associated tags.
     */
    tags?: pulumi.Input<pulumi.Input<number>[]>;
}

/**
 * The set of arguments for constructing a ImportListGoodreadsSeries resource.
 */
export interface ImportListGoodreadsSeriesArgs {
    /**
     * Enable automatic add flag.
     */
    enableAutomaticAdd?: pulumi.Input<boolean>;
    /**
     * List order.
     */
    listOrder?: pulumi.Input<number>;
    /**
     * Metadata profile ID.
     */
    metadataProfileId?: pulumi.Input<number>;
    /**
     * Import List name.
     */
    name: pulumi.Input<string>;
    /**
     * Quality profile ID.
     */
    qualityProfileId?: pulumi.Input<number>;
    /**
     * Root folder path.
     */
    rootFolderPath?: pulumi.Input<string>;
    /**
     * Series ID.
     */
    seriesId: pulumi.Input<number>;
    /**
     * Should monitor.
     */
    shouldMonitor?: pulumi.Input<string>;
    /**
     * Should search flag.
     */
    shouldSearch?: pulumi.Input<boolean>;
    /**
     * List of associated tags.
     */
    tags?: pulumi.Input<pulumi.Input<number>[]>;
}
