// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * <!-- subcategory:Notifications -->Notification resource.
 * For more information refer to [Notification](https://wiki.servarr.com/readarr/settings#connect).
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as readarr from "@maienm/pulumi-readarr";
 *
 * const example = new readarr.notifications.Notification("example", {
 *     configContract: "CustomScriptSettings",
 *     implementation: "CustomScript",
 *     includeHealthWarnings: false,
 *     name: "Example",
 *     onAuthorDelete: false,
 *     onBookDelete: false,
 *     onBookFileDelete: false,
 *     onBookFileDeleteForUpgrade: true,
 *     onBookRetag: false,
 *     onDownloadFailure: true,
 *     onGrab: false,
 *     onHealthIssue: false,
 *     onImportFailure: false,
 *     onReleaseImport: false,
 *     onRename: false,
 *     onUpgrade: false,
 *     path: "/scripts/readarr.sh",
 * });
 * ```
 *
 * ## Import
 *
 * import using the API/UI ID
 *
 * ```sh
 *  $ pulumi import readarr:Notifications/notification:Notification example 1
 * ```
 */
export class Notification extends pulumi.CustomResource {
    /**
     * Get an existing Notification resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NotificationState, opts?: pulumi.CustomResourceOptions): Notification {
        return new Notification(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'readarr:Notifications/notification:Notification';

    /**
     * Returns true if the given object is an instance of Notification.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Notification {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Notification.__pulumiType;
    }

    /**
     * Access token.
     */
    public readonly accessToken!: pulumi.Output<string>;
    /**
     * Access token secret.
     */
    public readonly accessTokenSecret!: pulumi.Output<string>;
    /**
     * Add IDs.
     */
    public readonly addIds!: pulumi.Output<string[]>;
    /**
     * API key.
     */
    public readonly apiKey!: pulumi.Output<string>;
    /**
     * App token.
     */
    public readonly appToken!: pulumi.Output<string>;
    /**
     * Arguments.
     */
    public readonly arguments!: pulumi.Output<string>;
    /**
     * Attach files flag.
     */
    public readonly attachFiles!: pulumi.Output<boolean>;
    /**
     * Auth user.
     */
    public readonly authUser!: pulumi.Output<string>;
    /**
     * Author.
     */
    public readonly author!: pulumi.Output<string>;
    /**
     * Avatar.
     */
    public readonly avatar!: pulumi.Output<string>;
    /**
     * Bcc.
     */
    public readonly bccs!: pulumi.Output<string[]>;
    /**
     * Bot token.
     */
    public readonly botToken!: pulumi.Output<string>;
    /**
     * Cc.
     */
    public readonly ccs!: pulumi.Output<string[]>;
    /**
     * Channel.
     */
    public readonly channel!: pulumi.Output<string>;
    /**
     * Channel tags.
     */
    public readonly channelTags!: pulumi.Output<string[]>;
    /**
     * Chat ID.
     */
    public readonly chatId!: pulumi.Output<string>;
    /**
     * Click URL.
     */
    public readonly clickUrl!: pulumi.Output<string>;
    /**
     * Condition. `10` BrandNew, `20` LikeNew, `30` VeryGood, `40` Good, `50` Acceptable, `60` Poor.
     */
    public readonly condition!: pulumi.Output<number>;
    /**
     * Notification configuration template.
     */
    public readonly configContract!: pulumi.Output<string>;
    /**
     * Consumer key.
     */
    public readonly consumerKey!: pulumi.Output<string>;
    /**
     * Consumer secret.
     */
    public readonly consumerSecret!: pulumi.Output<string>;
    /**
     * Condition description.
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * Device IDs.
     */
    public readonly deviceIds!: pulumi.Output<string[]>;
    /**
     * Device names.
     */
    public readonly deviceNames!: pulumi.Output<string>;
    /**
     * Devices.
     */
    public readonly devices!: pulumi.Output<string[]>;
    /**
     * Direct message flag.
     */
    public readonly directMessage!: pulumi.Output<boolean>;
    /**
     * Event.
     */
    public readonly event!: pulumi.Output<string>;
    /**
     * Expire.
     */
    public readonly expire!: pulumi.Output<number>;
    /**
     * Devices.
     */
    public readonly fieldTags!: pulumi.Output<string[]>;
    /**
     * From.
     */
    public readonly from!: pulumi.Output<string>;
    /**
     * Grab fields. `0` Overview, `1` Rating, `2` Genres, `3` Quality, `4` Group, `5` Size, `6` Links, `7` Release, `8` Poster, `9` Fanart, `10` CustomFormats, `11` CustomFormatScore.
     */
    public readonly grabFields!: pulumi.Output<number>;
    /**
     * Host.
     */
    public readonly host!: pulumi.Output<string>;
    /**
     * Icon.
     */
    public readonly icon!: pulumi.Output<string>;
    /**
     * Notification implementation name.
     */
    public readonly implementation!: pulumi.Output<string>;
    /**
     * Import fields. `0` Overview, `1` Rating, `2` Genres, `3` Quality, `4` Codecs, `5` Group, `6` Size, `7` Languages, `8` Subtitles, `9` Links, `10` Release, `11` Poster, `12` Fanart.
     */
    public readonly importFields!: pulumi.Output<number>;
    /**
     * Include health warnings.
     */
    public readonly includeHealthWarnings!: pulumi.Output<boolean>;
    /**
     * Instance name.
     */
    public readonly instanceName!: pulumi.Output<string>;
    /**
     * Key.
     */
    public readonly key!: pulumi.Output<string>;
    /**
     * Purchase location.
     */
    public readonly location!: pulumi.Output<string>;
    /**
     * Map From.
     */
    public readonly mapFrom!: pulumi.Output<string>;
    /**
     * Map To.
     */
    public readonly mapTo!: pulumi.Output<string>;
    /**
     * Mention.
     */
    public readonly mention!: pulumi.Output<string>;
    /**
     * Method. `1` POST, `2` PUT.
     */
    public readonly method!: pulumi.Output<number>;
    /**
     * Notification name.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Notify flag.
     */
    public readonly notify!: pulumi.Output<boolean>;
    /**
     * On application update flag.
     */
    public readonly onApplicationUpdate!: pulumi.Output<boolean>;
    /**
     * On author deleted flag.
     */
    public readonly onAuthorDelete!: pulumi.Output<boolean>;
    /**
     * On book delete flag.
     */
    public readonly onBookDelete!: pulumi.Output<boolean>;
    /**
     * On book file delete flag.
     */
    public readonly onBookFileDelete!: pulumi.Output<boolean>;
    /**
     * On book file delete for upgrade flag.
     */
    public readonly onBookFileDeleteForUpgrade!: pulumi.Output<boolean>;
    /**
     * On book retag flag.
     */
    public readonly onBookRetag!: pulumi.Output<boolean>;
    /**
     * On download failure flag.
     */
    public readonly onDownloadFailure!: pulumi.Output<boolean>;
    /**
     * On grab flag.
     */
    public readonly onGrab!: pulumi.Output<boolean>;
    /**
     * On health issue flag.
     */
    public readonly onHealthIssue!: pulumi.Output<boolean>;
    /**
     * On import failure flag.
     */
    public readonly onImportFailure!: pulumi.Output<boolean>;
    /**
     * On release import flag.
     */
    public readonly onReleaseImport!: pulumi.Output<boolean>;
    /**
     * On rename flag.
     */
    public readonly onRename!: pulumi.Output<boolean>;
    /**
     * On upgrade flag.
     */
    public readonly onUpgrade!: pulumi.Output<boolean>;
    /**
     * password.
     */
    public readonly password!: pulumi.Output<string>;
    /**
     * Path.
     */
    public readonly path!: pulumi.Output<string>;
    /**
     * Port.
     */
    public readonly port!: pulumi.Output<number>;
    /**
     * Priority.
     */
    public readonly priority!: pulumi.Output<number>;
    /**
     * Recipients.
     */
    public readonly recipients!: pulumi.Output<string[]>;
    /**
     * Refresh token.
     */
    public readonly refreshToken!: pulumi.Output<string>;
    /**
     * Remove IDs.
     */
    public readonly removeIds!: pulumi.Output<string[]>;
    /**
     * Request token secret.
     */
    public readonly requestTokenSecret!: pulumi.Output<string>;
    /**
     * Require encryption flag.
     */
    public readonly requireEncryption!: pulumi.Output<boolean>;
    /**
     * Retry.
     */
    public readonly retry!: pulumi.Output<number>;
    /**
     * Add silently flag.
     */
    public readonly sendSilently!: pulumi.Output<boolean>;
    /**
     * Sender domain.
     */
    public readonly senderDomain!: pulumi.Output<string>;
    /**
     * Sender ID.
     */
    public readonly senderId!: pulumi.Output<string>;
    /**
     * server.
     */
    public readonly server!: pulumi.Output<string>;
    /**
     * Server url.
     */
    public readonly serverUrl!: pulumi.Output<string>;
    /**
     * Sign in.
     */
    public readonly signIn!: pulumi.Output<string>;
    /**
     * Sound.
     */
    public readonly sound!: pulumi.Output<string>;
    /**
     * List of associated tags.
     */
    public readonly tags!: pulumi.Output<number[]>;
    /**
     * Token.
     */
    public readonly token!: pulumi.Output<string>;
    /**
     * Devices.
     */
    public readonly topics!: pulumi.Output<string[]>;
    /**
     * To.
     */
    public readonly tos!: pulumi.Output<string[]>;
    /**
     * Update library flag.
     */
    public readonly updateLibrary!: pulumi.Output<boolean>;
    /**
     * URL.
     */
    public readonly url!: pulumi.Output<string>;
    /**
     * URL base.
     */
    public readonly urlBase!: pulumi.Output<string>;
    /**
     * Use EU endpoint flag.
     */
    public readonly useEuEndpoint!: pulumi.Output<boolean>;
    /**
     * Use SSL flag.
     */
    public readonly useSsl!: pulumi.Output<boolean>;
    /**
     * User ID.
     */
    public readonly userId!: pulumi.Output<string>;
    /**
     * User key.
     */
    public readonly userKey!: pulumi.Output<string>;
    /**
     * Username.
     */
    public readonly username!: pulumi.Output<string>;
    /**
     * Web hook url.
     */
    public readonly webHookUrl!: pulumi.Output<string>;

    /**
     * Create a Notification resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NotificationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NotificationArgs | NotificationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NotificationState | undefined;
            resourceInputs["accessToken"] = state ? state.accessToken : undefined;
            resourceInputs["accessTokenSecret"] = state ? state.accessTokenSecret : undefined;
            resourceInputs["addIds"] = state ? state.addIds : undefined;
            resourceInputs["apiKey"] = state ? state.apiKey : undefined;
            resourceInputs["appToken"] = state ? state.appToken : undefined;
            resourceInputs["arguments"] = state ? state.arguments : undefined;
            resourceInputs["attachFiles"] = state ? state.attachFiles : undefined;
            resourceInputs["authUser"] = state ? state.authUser : undefined;
            resourceInputs["author"] = state ? state.author : undefined;
            resourceInputs["avatar"] = state ? state.avatar : undefined;
            resourceInputs["bccs"] = state ? state.bccs : undefined;
            resourceInputs["botToken"] = state ? state.botToken : undefined;
            resourceInputs["ccs"] = state ? state.ccs : undefined;
            resourceInputs["channel"] = state ? state.channel : undefined;
            resourceInputs["channelTags"] = state ? state.channelTags : undefined;
            resourceInputs["chatId"] = state ? state.chatId : undefined;
            resourceInputs["clickUrl"] = state ? state.clickUrl : undefined;
            resourceInputs["condition"] = state ? state.condition : undefined;
            resourceInputs["configContract"] = state ? state.configContract : undefined;
            resourceInputs["consumerKey"] = state ? state.consumerKey : undefined;
            resourceInputs["consumerSecret"] = state ? state.consumerSecret : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["deviceIds"] = state ? state.deviceIds : undefined;
            resourceInputs["deviceNames"] = state ? state.deviceNames : undefined;
            resourceInputs["devices"] = state ? state.devices : undefined;
            resourceInputs["directMessage"] = state ? state.directMessage : undefined;
            resourceInputs["event"] = state ? state.event : undefined;
            resourceInputs["expire"] = state ? state.expire : undefined;
            resourceInputs["fieldTags"] = state ? state.fieldTags : undefined;
            resourceInputs["from"] = state ? state.from : undefined;
            resourceInputs["grabFields"] = state ? state.grabFields : undefined;
            resourceInputs["host"] = state ? state.host : undefined;
            resourceInputs["icon"] = state ? state.icon : undefined;
            resourceInputs["implementation"] = state ? state.implementation : undefined;
            resourceInputs["importFields"] = state ? state.importFields : undefined;
            resourceInputs["includeHealthWarnings"] = state ? state.includeHealthWarnings : undefined;
            resourceInputs["instanceName"] = state ? state.instanceName : undefined;
            resourceInputs["key"] = state ? state.key : undefined;
            resourceInputs["location"] = state ? state.location : undefined;
            resourceInputs["mapFrom"] = state ? state.mapFrom : undefined;
            resourceInputs["mapTo"] = state ? state.mapTo : undefined;
            resourceInputs["mention"] = state ? state.mention : undefined;
            resourceInputs["method"] = state ? state.method : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["notify"] = state ? state.notify : undefined;
            resourceInputs["onApplicationUpdate"] = state ? state.onApplicationUpdate : undefined;
            resourceInputs["onAuthorDelete"] = state ? state.onAuthorDelete : undefined;
            resourceInputs["onBookDelete"] = state ? state.onBookDelete : undefined;
            resourceInputs["onBookFileDelete"] = state ? state.onBookFileDelete : undefined;
            resourceInputs["onBookFileDeleteForUpgrade"] = state ? state.onBookFileDeleteForUpgrade : undefined;
            resourceInputs["onBookRetag"] = state ? state.onBookRetag : undefined;
            resourceInputs["onDownloadFailure"] = state ? state.onDownloadFailure : undefined;
            resourceInputs["onGrab"] = state ? state.onGrab : undefined;
            resourceInputs["onHealthIssue"] = state ? state.onHealthIssue : undefined;
            resourceInputs["onImportFailure"] = state ? state.onImportFailure : undefined;
            resourceInputs["onReleaseImport"] = state ? state.onReleaseImport : undefined;
            resourceInputs["onRename"] = state ? state.onRename : undefined;
            resourceInputs["onUpgrade"] = state ? state.onUpgrade : undefined;
            resourceInputs["password"] = state ? state.password : undefined;
            resourceInputs["path"] = state ? state.path : undefined;
            resourceInputs["port"] = state ? state.port : undefined;
            resourceInputs["priority"] = state ? state.priority : undefined;
            resourceInputs["recipients"] = state ? state.recipients : undefined;
            resourceInputs["refreshToken"] = state ? state.refreshToken : undefined;
            resourceInputs["removeIds"] = state ? state.removeIds : undefined;
            resourceInputs["requestTokenSecret"] = state ? state.requestTokenSecret : undefined;
            resourceInputs["requireEncryption"] = state ? state.requireEncryption : undefined;
            resourceInputs["retry"] = state ? state.retry : undefined;
            resourceInputs["sendSilently"] = state ? state.sendSilently : undefined;
            resourceInputs["senderDomain"] = state ? state.senderDomain : undefined;
            resourceInputs["senderId"] = state ? state.senderId : undefined;
            resourceInputs["server"] = state ? state.server : undefined;
            resourceInputs["serverUrl"] = state ? state.serverUrl : undefined;
            resourceInputs["signIn"] = state ? state.signIn : undefined;
            resourceInputs["sound"] = state ? state.sound : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["token"] = state ? state.token : undefined;
            resourceInputs["topics"] = state ? state.topics : undefined;
            resourceInputs["tos"] = state ? state.tos : undefined;
            resourceInputs["updateLibrary"] = state ? state.updateLibrary : undefined;
            resourceInputs["url"] = state ? state.url : undefined;
            resourceInputs["urlBase"] = state ? state.urlBase : undefined;
            resourceInputs["useEuEndpoint"] = state ? state.useEuEndpoint : undefined;
            resourceInputs["useSsl"] = state ? state.useSsl : undefined;
            resourceInputs["userId"] = state ? state.userId : undefined;
            resourceInputs["userKey"] = state ? state.userKey : undefined;
            resourceInputs["username"] = state ? state.username : undefined;
            resourceInputs["webHookUrl"] = state ? state.webHookUrl : undefined;
        } else {
            const args = argsOrState as NotificationArgs | undefined;
            if ((!args || args.configContract === undefined) && !opts.urn) {
                throw new Error("Missing required property 'configContract'");
            }
            if ((!args || args.implementation === undefined) && !opts.urn) {
                throw new Error("Missing required property 'implementation'");
            }
            if ((!args || args.name === undefined) && !opts.urn) {
                throw new Error("Missing required property 'name'");
            }
            resourceInputs["accessToken"] = args ? args.accessToken : undefined;
            resourceInputs["accessTokenSecret"] = args ? args.accessTokenSecret : undefined;
            resourceInputs["addIds"] = args ? args.addIds : undefined;
            resourceInputs["apiKey"] = args ? args.apiKey : undefined;
            resourceInputs["appToken"] = args ? args.appToken : undefined;
            resourceInputs["arguments"] = args ? args.arguments : undefined;
            resourceInputs["attachFiles"] = args ? args.attachFiles : undefined;
            resourceInputs["authUser"] = args ? args.authUser : undefined;
            resourceInputs["author"] = args ? args.author : undefined;
            resourceInputs["avatar"] = args ? args.avatar : undefined;
            resourceInputs["bccs"] = args ? args.bccs : undefined;
            resourceInputs["botToken"] = args ? args.botToken : undefined;
            resourceInputs["ccs"] = args ? args.ccs : undefined;
            resourceInputs["channel"] = args ? args.channel : undefined;
            resourceInputs["channelTags"] = args ? args.channelTags : undefined;
            resourceInputs["chatId"] = args ? args.chatId : undefined;
            resourceInputs["clickUrl"] = args ? args.clickUrl : undefined;
            resourceInputs["condition"] = args ? args.condition : undefined;
            resourceInputs["configContract"] = args ? args.configContract : undefined;
            resourceInputs["consumerKey"] = args ? args.consumerKey : undefined;
            resourceInputs["consumerSecret"] = args ? args.consumerSecret : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["deviceIds"] = args ? args.deviceIds : undefined;
            resourceInputs["deviceNames"] = args ? args.deviceNames : undefined;
            resourceInputs["devices"] = args ? args.devices : undefined;
            resourceInputs["directMessage"] = args ? args.directMessage : undefined;
            resourceInputs["event"] = args ? args.event : undefined;
            resourceInputs["expire"] = args ? args.expire : undefined;
            resourceInputs["fieldTags"] = args ? args.fieldTags : undefined;
            resourceInputs["from"] = args ? args.from : undefined;
            resourceInputs["grabFields"] = args ? args.grabFields : undefined;
            resourceInputs["host"] = args ? args.host : undefined;
            resourceInputs["icon"] = args ? args.icon : undefined;
            resourceInputs["implementation"] = args ? args.implementation : undefined;
            resourceInputs["importFields"] = args ? args.importFields : undefined;
            resourceInputs["includeHealthWarnings"] = args ? args.includeHealthWarnings : undefined;
            resourceInputs["instanceName"] = args ? args.instanceName : undefined;
            resourceInputs["key"] = args ? args.key : undefined;
            resourceInputs["location"] = args ? args.location : undefined;
            resourceInputs["mapFrom"] = args ? args.mapFrom : undefined;
            resourceInputs["mapTo"] = args ? args.mapTo : undefined;
            resourceInputs["mention"] = args ? args.mention : undefined;
            resourceInputs["method"] = args ? args.method : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["notify"] = args ? args.notify : undefined;
            resourceInputs["onApplicationUpdate"] = args ? args.onApplicationUpdate : undefined;
            resourceInputs["onAuthorDelete"] = args ? args.onAuthorDelete : undefined;
            resourceInputs["onBookDelete"] = args ? args.onBookDelete : undefined;
            resourceInputs["onBookFileDelete"] = args ? args.onBookFileDelete : undefined;
            resourceInputs["onBookFileDeleteForUpgrade"] = args ? args.onBookFileDeleteForUpgrade : undefined;
            resourceInputs["onBookRetag"] = args ? args.onBookRetag : undefined;
            resourceInputs["onDownloadFailure"] = args ? args.onDownloadFailure : undefined;
            resourceInputs["onGrab"] = args ? args.onGrab : undefined;
            resourceInputs["onHealthIssue"] = args ? args.onHealthIssue : undefined;
            resourceInputs["onImportFailure"] = args ? args.onImportFailure : undefined;
            resourceInputs["onReleaseImport"] = args ? args.onReleaseImport : undefined;
            resourceInputs["onRename"] = args ? args.onRename : undefined;
            resourceInputs["onUpgrade"] = args ? args.onUpgrade : undefined;
            resourceInputs["password"] = args ? args.password : undefined;
            resourceInputs["path"] = args ? args.path : undefined;
            resourceInputs["port"] = args ? args.port : undefined;
            resourceInputs["priority"] = args ? args.priority : undefined;
            resourceInputs["recipients"] = args ? args.recipients : undefined;
            resourceInputs["refreshToken"] = args ? args.refreshToken : undefined;
            resourceInputs["removeIds"] = args ? args.removeIds : undefined;
            resourceInputs["requestTokenSecret"] = args?.requestTokenSecret ? pulumi.secret(args.requestTokenSecret) : undefined;
            resourceInputs["requireEncryption"] = args ? args.requireEncryption : undefined;
            resourceInputs["retry"] = args ? args.retry : undefined;
            resourceInputs["sendSilently"] = args ? args.sendSilently : undefined;
            resourceInputs["senderDomain"] = args ? args.senderDomain : undefined;
            resourceInputs["senderId"] = args ? args.senderId : undefined;
            resourceInputs["server"] = args ? args.server : undefined;
            resourceInputs["serverUrl"] = args ? args.serverUrl : undefined;
            resourceInputs["signIn"] = args ? args.signIn : undefined;
            resourceInputs["sound"] = args ? args.sound : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["token"] = args?.token ? pulumi.secret(args.token) : undefined;
            resourceInputs["topics"] = args ? args.topics : undefined;
            resourceInputs["tos"] = args ? args.tos : undefined;
            resourceInputs["updateLibrary"] = args ? args.updateLibrary : undefined;
            resourceInputs["url"] = args ? args.url : undefined;
            resourceInputs["urlBase"] = args ? args.urlBase : undefined;
            resourceInputs["useEuEndpoint"] = args ? args.useEuEndpoint : undefined;
            resourceInputs["useSsl"] = args ? args.useSsl : undefined;
            resourceInputs["userId"] = args ? args.userId : undefined;
            resourceInputs["userKey"] = args ? args.userKey : undefined;
            resourceInputs["username"] = args ? args.username : undefined;
            resourceInputs["webHookUrl"] = args ? args.webHookUrl : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["requestTokenSecret", "token"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Notification.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Notification resources.
 */
export interface NotificationState {
    /**
     * Access token.
     */
    accessToken?: pulumi.Input<string>;
    /**
     * Access token secret.
     */
    accessTokenSecret?: pulumi.Input<string>;
    /**
     * Add IDs.
     */
    addIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * API key.
     */
    apiKey?: pulumi.Input<string>;
    /**
     * App token.
     */
    appToken?: pulumi.Input<string>;
    /**
     * Arguments.
     */
    arguments?: pulumi.Input<string>;
    /**
     * Attach files flag.
     */
    attachFiles?: pulumi.Input<boolean>;
    /**
     * Auth user.
     */
    authUser?: pulumi.Input<string>;
    /**
     * Author.
     */
    author?: pulumi.Input<string>;
    /**
     * Avatar.
     */
    avatar?: pulumi.Input<string>;
    /**
     * Bcc.
     */
    bccs?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Bot token.
     */
    botToken?: pulumi.Input<string>;
    /**
     * Cc.
     */
    ccs?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Channel.
     */
    channel?: pulumi.Input<string>;
    /**
     * Channel tags.
     */
    channelTags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Chat ID.
     */
    chatId?: pulumi.Input<string>;
    /**
     * Click URL.
     */
    clickUrl?: pulumi.Input<string>;
    /**
     * Condition. `10` BrandNew, `20` LikeNew, `30` VeryGood, `40` Good, `50` Acceptable, `60` Poor.
     */
    condition?: pulumi.Input<number>;
    /**
     * Notification configuration template.
     */
    configContract?: pulumi.Input<string>;
    /**
     * Consumer key.
     */
    consumerKey?: pulumi.Input<string>;
    /**
     * Consumer secret.
     */
    consumerSecret?: pulumi.Input<string>;
    /**
     * Condition description.
     */
    description?: pulumi.Input<string>;
    /**
     * Device IDs.
     */
    deviceIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Device names.
     */
    deviceNames?: pulumi.Input<string>;
    /**
     * Devices.
     */
    devices?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Direct message flag.
     */
    directMessage?: pulumi.Input<boolean>;
    /**
     * Event.
     */
    event?: pulumi.Input<string>;
    /**
     * Expire.
     */
    expire?: pulumi.Input<number>;
    /**
     * Devices.
     */
    fieldTags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * From.
     */
    from?: pulumi.Input<string>;
    /**
     * Grab fields. `0` Overview, `1` Rating, `2` Genres, `3` Quality, `4` Group, `5` Size, `6` Links, `7` Release, `8` Poster, `9` Fanart, `10` CustomFormats, `11` CustomFormatScore.
     */
    grabFields?: pulumi.Input<number>;
    /**
     * Host.
     */
    host?: pulumi.Input<string>;
    /**
     * Icon.
     */
    icon?: pulumi.Input<string>;
    /**
     * Notification implementation name.
     */
    implementation?: pulumi.Input<string>;
    /**
     * Import fields. `0` Overview, `1` Rating, `2` Genres, `3` Quality, `4` Codecs, `5` Group, `6` Size, `7` Languages, `8` Subtitles, `9` Links, `10` Release, `11` Poster, `12` Fanart.
     */
    importFields?: pulumi.Input<number>;
    /**
     * Include health warnings.
     */
    includeHealthWarnings?: pulumi.Input<boolean>;
    /**
     * Instance name.
     */
    instanceName?: pulumi.Input<string>;
    /**
     * Key.
     */
    key?: pulumi.Input<string>;
    /**
     * Purchase location.
     */
    location?: pulumi.Input<string>;
    /**
     * Map From.
     */
    mapFrom?: pulumi.Input<string>;
    /**
     * Map To.
     */
    mapTo?: pulumi.Input<string>;
    /**
     * Mention.
     */
    mention?: pulumi.Input<string>;
    /**
     * Method. `1` POST, `2` PUT.
     */
    method?: pulumi.Input<number>;
    /**
     * Notification name.
     */
    name?: pulumi.Input<string>;
    /**
     * Notify flag.
     */
    notify?: pulumi.Input<boolean>;
    /**
     * On application update flag.
     */
    onApplicationUpdate?: pulumi.Input<boolean>;
    /**
     * On author deleted flag.
     */
    onAuthorDelete?: pulumi.Input<boolean>;
    /**
     * On book delete flag.
     */
    onBookDelete?: pulumi.Input<boolean>;
    /**
     * On book file delete flag.
     */
    onBookFileDelete?: pulumi.Input<boolean>;
    /**
     * On book file delete for upgrade flag.
     */
    onBookFileDeleteForUpgrade?: pulumi.Input<boolean>;
    /**
     * On book retag flag.
     */
    onBookRetag?: pulumi.Input<boolean>;
    /**
     * On download failure flag.
     */
    onDownloadFailure?: pulumi.Input<boolean>;
    /**
     * On grab flag.
     */
    onGrab?: pulumi.Input<boolean>;
    /**
     * On health issue flag.
     */
    onHealthIssue?: pulumi.Input<boolean>;
    /**
     * On import failure flag.
     */
    onImportFailure?: pulumi.Input<boolean>;
    /**
     * On release import flag.
     */
    onReleaseImport?: pulumi.Input<boolean>;
    /**
     * On rename flag.
     */
    onRename?: pulumi.Input<boolean>;
    /**
     * On upgrade flag.
     */
    onUpgrade?: pulumi.Input<boolean>;
    /**
     * password.
     */
    password?: pulumi.Input<string>;
    /**
     * Path.
     */
    path?: pulumi.Input<string>;
    /**
     * Port.
     */
    port?: pulumi.Input<number>;
    /**
     * Priority.
     */
    priority?: pulumi.Input<number>;
    /**
     * Recipients.
     */
    recipients?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Refresh token.
     */
    refreshToken?: pulumi.Input<string>;
    /**
     * Remove IDs.
     */
    removeIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Request token secret.
     */
    requestTokenSecret?: pulumi.Input<string>;
    /**
     * Require encryption flag.
     */
    requireEncryption?: pulumi.Input<boolean>;
    /**
     * Retry.
     */
    retry?: pulumi.Input<number>;
    /**
     * Add silently flag.
     */
    sendSilently?: pulumi.Input<boolean>;
    /**
     * Sender domain.
     */
    senderDomain?: pulumi.Input<string>;
    /**
     * Sender ID.
     */
    senderId?: pulumi.Input<string>;
    /**
     * server.
     */
    server?: pulumi.Input<string>;
    /**
     * Server url.
     */
    serverUrl?: pulumi.Input<string>;
    /**
     * Sign in.
     */
    signIn?: pulumi.Input<string>;
    /**
     * Sound.
     */
    sound?: pulumi.Input<string>;
    /**
     * List of associated tags.
     */
    tags?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * Token.
     */
    token?: pulumi.Input<string>;
    /**
     * Devices.
     */
    topics?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * To.
     */
    tos?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Update library flag.
     */
    updateLibrary?: pulumi.Input<boolean>;
    /**
     * URL.
     */
    url?: pulumi.Input<string>;
    /**
     * URL base.
     */
    urlBase?: pulumi.Input<string>;
    /**
     * Use EU endpoint flag.
     */
    useEuEndpoint?: pulumi.Input<boolean>;
    /**
     * Use SSL flag.
     */
    useSsl?: pulumi.Input<boolean>;
    /**
     * User ID.
     */
    userId?: pulumi.Input<string>;
    /**
     * User key.
     */
    userKey?: pulumi.Input<string>;
    /**
     * Username.
     */
    username?: pulumi.Input<string>;
    /**
     * Web hook url.
     */
    webHookUrl?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Notification resource.
 */
export interface NotificationArgs {
    /**
     * Access token.
     */
    accessToken?: pulumi.Input<string>;
    /**
     * Access token secret.
     */
    accessTokenSecret?: pulumi.Input<string>;
    /**
     * Add IDs.
     */
    addIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * API key.
     */
    apiKey?: pulumi.Input<string>;
    /**
     * App token.
     */
    appToken?: pulumi.Input<string>;
    /**
     * Arguments.
     */
    arguments?: pulumi.Input<string>;
    /**
     * Attach files flag.
     */
    attachFiles?: pulumi.Input<boolean>;
    /**
     * Auth user.
     */
    authUser?: pulumi.Input<string>;
    /**
     * Author.
     */
    author?: pulumi.Input<string>;
    /**
     * Avatar.
     */
    avatar?: pulumi.Input<string>;
    /**
     * Bcc.
     */
    bccs?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Bot token.
     */
    botToken?: pulumi.Input<string>;
    /**
     * Cc.
     */
    ccs?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Channel.
     */
    channel?: pulumi.Input<string>;
    /**
     * Channel tags.
     */
    channelTags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Chat ID.
     */
    chatId?: pulumi.Input<string>;
    /**
     * Click URL.
     */
    clickUrl?: pulumi.Input<string>;
    /**
     * Condition. `10` BrandNew, `20` LikeNew, `30` VeryGood, `40` Good, `50` Acceptable, `60` Poor.
     */
    condition?: pulumi.Input<number>;
    /**
     * Notification configuration template.
     */
    configContract: pulumi.Input<string>;
    /**
     * Consumer key.
     */
    consumerKey?: pulumi.Input<string>;
    /**
     * Consumer secret.
     */
    consumerSecret?: pulumi.Input<string>;
    /**
     * Condition description.
     */
    description?: pulumi.Input<string>;
    /**
     * Device IDs.
     */
    deviceIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Device names.
     */
    deviceNames?: pulumi.Input<string>;
    /**
     * Devices.
     */
    devices?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Direct message flag.
     */
    directMessage?: pulumi.Input<boolean>;
    /**
     * Event.
     */
    event?: pulumi.Input<string>;
    /**
     * Expire.
     */
    expire?: pulumi.Input<number>;
    /**
     * Devices.
     */
    fieldTags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * From.
     */
    from?: pulumi.Input<string>;
    /**
     * Grab fields. `0` Overview, `1` Rating, `2` Genres, `3` Quality, `4` Group, `5` Size, `6` Links, `7` Release, `8` Poster, `9` Fanart, `10` CustomFormats, `11` CustomFormatScore.
     */
    grabFields?: pulumi.Input<number>;
    /**
     * Host.
     */
    host?: pulumi.Input<string>;
    /**
     * Icon.
     */
    icon?: pulumi.Input<string>;
    /**
     * Notification implementation name.
     */
    implementation: pulumi.Input<string>;
    /**
     * Import fields. `0` Overview, `1` Rating, `2` Genres, `3` Quality, `4` Codecs, `5` Group, `6` Size, `7` Languages, `8` Subtitles, `9` Links, `10` Release, `11` Poster, `12` Fanart.
     */
    importFields?: pulumi.Input<number>;
    /**
     * Include health warnings.
     */
    includeHealthWarnings?: pulumi.Input<boolean>;
    /**
     * Instance name.
     */
    instanceName?: pulumi.Input<string>;
    /**
     * Key.
     */
    key?: pulumi.Input<string>;
    /**
     * Purchase location.
     */
    location?: pulumi.Input<string>;
    /**
     * Map From.
     */
    mapFrom?: pulumi.Input<string>;
    /**
     * Map To.
     */
    mapTo?: pulumi.Input<string>;
    /**
     * Mention.
     */
    mention?: pulumi.Input<string>;
    /**
     * Method. `1` POST, `2` PUT.
     */
    method?: pulumi.Input<number>;
    /**
     * Notification name.
     */
    name: pulumi.Input<string>;
    /**
     * Notify flag.
     */
    notify?: pulumi.Input<boolean>;
    /**
     * On application update flag.
     */
    onApplicationUpdate?: pulumi.Input<boolean>;
    /**
     * On author deleted flag.
     */
    onAuthorDelete?: pulumi.Input<boolean>;
    /**
     * On book delete flag.
     */
    onBookDelete?: pulumi.Input<boolean>;
    /**
     * On book file delete flag.
     */
    onBookFileDelete?: pulumi.Input<boolean>;
    /**
     * On book file delete for upgrade flag.
     */
    onBookFileDeleteForUpgrade?: pulumi.Input<boolean>;
    /**
     * On book retag flag.
     */
    onBookRetag?: pulumi.Input<boolean>;
    /**
     * On download failure flag.
     */
    onDownloadFailure?: pulumi.Input<boolean>;
    /**
     * On grab flag.
     */
    onGrab?: pulumi.Input<boolean>;
    /**
     * On health issue flag.
     */
    onHealthIssue?: pulumi.Input<boolean>;
    /**
     * On import failure flag.
     */
    onImportFailure?: pulumi.Input<boolean>;
    /**
     * On release import flag.
     */
    onReleaseImport?: pulumi.Input<boolean>;
    /**
     * On rename flag.
     */
    onRename?: pulumi.Input<boolean>;
    /**
     * On upgrade flag.
     */
    onUpgrade?: pulumi.Input<boolean>;
    /**
     * password.
     */
    password?: pulumi.Input<string>;
    /**
     * Path.
     */
    path?: pulumi.Input<string>;
    /**
     * Port.
     */
    port?: pulumi.Input<number>;
    /**
     * Priority.
     */
    priority?: pulumi.Input<number>;
    /**
     * Recipients.
     */
    recipients?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Refresh token.
     */
    refreshToken?: pulumi.Input<string>;
    /**
     * Remove IDs.
     */
    removeIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Request token secret.
     */
    requestTokenSecret?: pulumi.Input<string>;
    /**
     * Require encryption flag.
     */
    requireEncryption?: pulumi.Input<boolean>;
    /**
     * Retry.
     */
    retry?: pulumi.Input<number>;
    /**
     * Add silently flag.
     */
    sendSilently?: pulumi.Input<boolean>;
    /**
     * Sender domain.
     */
    senderDomain?: pulumi.Input<string>;
    /**
     * Sender ID.
     */
    senderId?: pulumi.Input<string>;
    /**
     * server.
     */
    server?: pulumi.Input<string>;
    /**
     * Server url.
     */
    serverUrl?: pulumi.Input<string>;
    /**
     * Sign in.
     */
    signIn?: pulumi.Input<string>;
    /**
     * Sound.
     */
    sound?: pulumi.Input<string>;
    /**
     * List of associated tags.
     */
    tags?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * Token.
     */
    token?: pulumi.Input<string>;
    /**
     * Devices.
     */
    topics?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * To.
     */
    tos?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Update library flag.
     */
    updateLibrary?: pulumi.Input<boolean>;
    /**
     * URL.
     */
    url?: pulumi.Input<string>;
    /**
     * URL base.
     */
    urlBase?: pulumi.Input<string>;
    /**
     * Use EU endpoint flag.
     */
    useEuEndpoint?: pulumi.Input<boolean>;
    /**
     * Use SSL flag.
     */
    useSsl?: pulumi.Input<boolean>;
    /**
     * User ID.
     */
    userId?: pulumi.Input<string>;
    /**
     * User key.
     */
    userKey?: pulumi.Input<string>;
    /**
     * Username.
     */
    username?: pulumi.Input<string>;
    /**
     * Web hook url.
     */
    webHookUrl?: pulumi.Input<string>;
}
