// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * <!-- subcategory:Notifications -->Notification Synology resource.
 * For more information refer to [Notification](https://wiki.servarr.com/readarr/settings#connect) and [Synology](https://wiki.servarr.com/readarr/supported#synologyindexer).
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as readarr from "@maienm/pulumi-readarr";
 *
 * const example = new readarr.notifications.NotificationSynologyIndexer("example", {
 *     name: "Example",
 *     onAuthorDelete: false,
 *     onBookDelete: false,
 *     onBookFileDelete: true,
 *     onBookFileDeleteForUpgrade: false,
 *     onBookRetag: true,
 *     onReleaseImport: false,
 *     onRename: false,
 *     onUpgrade: false,
 *     updateLibrary: true,
 * });
 * ```
 *
 * ## Import
 *
 * import using the API/UI ID
 *
 * ```sh
 *  $ pulumi import readarr:Notifications/notificationSynologyIndexer:NotificationSynologyIndexer example 1
 * ```
 */
export class NotificationSynologyIndexer extends pulumi.CustomResource {
    /**
     * Get an existing NotificationSynologyIndexer resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NotificationSynologyIndexerState, opts?: pulumi.CustomResourceOptions): NotificationSynologyIndexer {
        return new NotificationSynologyIndexer(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'readarr:Notifications/notificationSynologyIndexer:NotificationSynologyIndexer';

    /**
     * Returns true if the given object is an instance of NotificationSynologyIndexer.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is NotificationSynologyIndexer {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NotificationSynologyIndexer.__pulumiType;
    }

    /**
     * Notification name.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * On author deleted flag.
     */
    public readonly onAuthorDelete!: pulumi.Output<boolean>;
    /**
     * On book delete flag.
     */
    public readonly onBookDelete!: pulumi.Output<boolean>;
    /**
     * On book file delete flag.
     */
    public readonly onBookFileDelete!: pulumi.Output<boolean>;
    /**
     * On book file delete for upgrade flag.
     */
    public readonly onBookFileDeleteForUpgrade!: pulumi.Output<boolean>;
    /**
     * On book retag flag.
     */
    public readonly onBookRetag!: pulumi.Output<boolean>;
    /**
     * On release import flag.
     */
    public readonly onReleaseImport!: pulumi.Output<boolean>;
    /**
     * On rename flag.
     */
    public readonly onRename!: pulumi.Output<boolean>;
    /**
     * On upgrade flag.
     */
    public readonly onUpgrade!: pulumi.Output<boolean>;
    /**
     * List of associated tags.
     */
    public readonly tags!: pulumi.Output<number[]>;
    /**
     * Update library flag.
     */
    public readonly updateLibrary!: pulumi.Output<boolean>;

    /**
     * Create a NotificationSynologyIndexer resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NotificationSynologyIndexerArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NotificationSynologyIndexerArgs | NotificationSynologyIndexerState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NotificationSynologyIndexerState | undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["onAuthorDelete"] = state ? state.onAuthorDelete : undefined;
            resourceInputs["onBookDelete"] = state ? state.onBookDelete : undefined;
            resourceInputs["onBookFileDelete"] = state ? state.onBookFileDelete : undefined;
            resourceInputs["onBookFileDeleteForUpgrade"] = state ? state.onBookFileDeleteForUpgrade : undefined;
            resourceInputs["onBookRetag"] = state ? state.onBookRetag : undefined;
            resourceInputs["onReleaseImport"] = state ? state.onReleaseImport : undefined;
            resourceInputs["onRename"] = state ? state.onRename : undefined;
            resourceInputs["onUpgrade"] = state ? state.onUpgrade : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["updateLibrary"] = state ? state.updateLibrary : undefined;
        } else {
            const args = argsOrState as NotificationSynologyIndexerArgs | undefined;
            if ((!args || args.name === undefined) && !opts.urn) {
                throw new Error("Missing required property 'name'");
            }
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["onAuthorDelete"] = args ? args.onAuthorDelete : undefined;
            resourceInputs["onBookDelete"] = args ? args.onBookDelete : undefined;
            resourceInputs["onBookFileDelete"] = args ? args.onBookFileDelete : undefined;
            resourceInputs["onBookFileDeleteForUpgrade"] = args ? args.onBookFileDeleteForUpgrade : undefined;
            resourceInputs["onBookRetag"] = args ? args.onBookRetag : undefined;
            resourceInputs["onReleaseImport"] = args ? args.onReleaseImport : undefined;
            resourceInputs["onRename"] = args ? args.onRename : undefined;
            resourceInputs["onUpgrade"] = args ? args.onUpgrade : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["updateLibrary"] = args ? args.updateLibrary : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(NotificationSynologyIndexer.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering NotificationSynologyIndexer resources.
 */
export interface NotificationSynologyIndexerState {
    /**
     * Notification name.
     */
    name?: pulumi.Input<string>;
    /**
     * On author deleted flag.
     */
    onAuthorDelete?: pulumi.Input<boolean>;
    /**
     * On book delete flag.
     */
    onBookDelete?: pulumi.Input<boolean>;
    /**
     * On book file delete flag.
     */
    onBookFileDelete?: pulumi.Input<boolean>;
    /**
     * On book file delete for upgrade flag.
     */
    onBookFileDeleteForUpgrade?: pulumi.Input<boolean>;
    /**
     * On book retag flag.
     */
    onBookRetag?: pulumi.Input<boolean>;
    /**
     * On release import flag.
     */
    onReleaseImport?: pulumi.Input<boolean>;
    /**
     * On rename flag.
     */
    onRename?: pulumi.Input<boolean>;
    /**
     * On upgrade flag.
     */
    onUpgrade?: pulumi.Input<boolean>;
    /**
     * List of associated tags.
     */
    tags?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * Update library flag.
     */
    updateLibrary?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a NotificationSynologyIndexer resource.
 */
export interface NotificationSynologyIndexerArgs {
    /**
     * Notification name.
     */
    name: pulumi.Input<string>;
    /**
     * On author deleted flag.
     */
    onAuthorDelete?: pulumi.Input<boolean>;
    /**
     * On book delete flag.
     */
    onBookDelete?: pulumi.Input<boolean>;
    /**
     * On book file delete flag.
     */
    onBookFileDelete?: pulumi.Input<boolean>;
    /**
     * On book file delete for upgrade flag.
     */
    onBookFileDeleteForUpgrade?: pulumi.Input<boolean>;
    /**
     * On book retag flag.
     */
    onBookRetag?: pulumi.Input<boolean>;
    /**
     * On release import flag.
     */
    onReleaseImport?: pulumi.Input<boolean>;
    /**
     * On rename flag.
     */
    onRename?: pulumi.Input<boolean>;
    /**
     * On upgrade flag.
     */
    onUpgrade?: pulumi.Input<boolean>;
    /**
     * List of associated tags.
     */
    tags?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * Update library flag.
     */
    updateLibrary?: pulumi.Input<boolean>;
}
