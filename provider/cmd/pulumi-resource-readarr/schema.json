{
    "name": "readarr",
    "displayName": "readarr",
    "description": "A Pulumi package for creating and managing a readarr application.",
    "keywords": [
        "pulumi",
        "readarr",
        "category/infrastructure"
    ],
    "homepage": "https://github.com/MaienM/pulumi-readarr",
    "license": "Apache-2.0",
    "attribution": "This Pulumi package is based on the [`readarr` Terraform Provider](https://github.com/devopsarr/terraform-provider-readarr).",
    "repository": "https://github.com/MaienM/pulumi-readarr",
    "logoUrl": "https://raw.githubusercontent.com/MaienM/pulumi-readarr/main/docs/readarr.png",
    "pluginDownloadURL": "github://api.github.com/MaienM/pulumi-readarr",
    "publisher": "MaienM",
    "meta": {
        "moduleFormat": "(.*)(?:/[^/]*)"
    },
    "language": {
        "csharp": {
            "compatibility": "tfbridge20",
            "namespaces": null,
            "packageReferences": {
                "Pulumi": "3.*"
            },
            "rootNamespace": "MaienM"
        },
        "go": {
            "generateExtraInputTypes": true,
            "generateResourceContainerTypes": true,
            "importBasePath": "github.com/MaienM/pulumi-readarr/sdk/v2/go/readarr"
        },
        "java": {
            "basePackage": "com.maienm",
            "buildFiles": "",
            "gradleNexusPublishPluginVersion": ""
        },
        "nodejs": {
            "compatibility": "tfbridge20",
            "dependencies": {
                "@pulumi/pulumi": "^3.0.0"
            },
            "devDependencies": {
                "@types/mime": "^2.0.0",
                "@types/node": "^10.0.0"
            },
            "disableUnionOutputTypes": true,
            "packageDescription": "A Pulumi package for creating and managing a readarr application.",
            "packageName": "@maienm/pulumi-readarr",
            "pluginName": "",
            "pluginVersion": "",
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/devopsarr/terraform-provider-readarr)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-readarr` repo](https://github.com/MaienM/pulumi-readarr/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-readarr` repo](https://github.com/devopsarr/terraform-provider-readarr/issues).",
            "typescriptVersion": ""
        },
        "python": {
            "compatibility": "tfbridge20",
            "packageName": "pulumi_readarr",
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/devopsarr/terraform-provider-readarr)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-readarr` repo](https://github.com/MaienM/pulumi-readarr/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-readarr` repo](https://github.com/devopsarr/terraform-provider-readarr/issues).",
            "requires": {
                "pulumi": "\u003e=3.0.0,\u003c4.0.0"
            }
        }
    },
    "config": {
        "variables": {
            "apiKey": {
                "type": "string",
                "description": "API key for Readarr authentication. Can be specified via the `READARR_API_KEY` environment variable.\n",
                "secret": true
            },
            "url": {
                "type": "string",
                "description": "Full Readarr URL with protocol and port (e.g. `https://test.readarr.lib:8787`). You should **NOT** supply any path\n(`/api`), the SDK will use the appropriate paths. Can be specified via the `READARR_URL` environment variable.\n"
            }
        }
    },
    "types": {
        "readarr:Authors/getAuthorsAuthor:getAuthorsAuthor": {
            "properties": {
                "authorName": {
                    "type": "string",
                    "description": "Author name.\n"
                },
                "foreignAuthorId": {
                    "type": "string",
                    "description": "Foreign author ID.\n"
                },
                "genres": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List genres.\n"
                },
                "id": {
                    "type": "integer",
                    "description": "Author ID.\n"
                },
                "monitored": {
                    "type": "boolean",
                    "description": "Monitored flag.\n"
                },
                "overview": {
                    "type": "string",
                    "description": "Overview.\n"
                },
                "path": {
                    "type": "string",
                    "description": "Full author path.\n"
                },
                "qualityProfileId": {
                    "type": "integer",
                    "description": "Quality profile ID.\n"
                },
                "status": {
                    "type": "string",
                    "description": "Author status.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                }
            },
            "type": "object",
            "required": [
                "authorName",
                "foreignAuthorId",
                "genres",
                "id",
                "monitored",
                "overview",
                "path",
                "qualityProfileId",
                "status",
                "tags"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "readarr:DownloadClients/getDownloadClientsDownloadClient:getDownloadClientsDownloadClient": {
            "properties": {
                "addPaused": {
                    "type": "boolean",
                    "description": "Add paused flag.\n"
                },
                "addStopped": {
                    "type": "boolean",
                    "description": "Add stopped flag.\n"
                },
                "additionalTags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "Additional tags, `0` TitleSlug, `1` Quality, `2` Language, `3` ReleaseGroup, `4` Year, `5` Indexer, `6` Network.\n"
                },
                "apiKey": {
                    "type": "string",
                    "description": "API key.\n"
                },
                "bookCategory": {
                    "type": "string",
                    "description": "Book category.\n"
                },
                "bookDirectory": {
                    "type": "string",
                    "description": "Book directory.\n"
                },
                "bookImportedCategory": {
                    "type": "string",
                    "description": "Book imported category.\n"
                },
                "bookdirectory": {
                    "type": "string",
                    "description": "Book directory.\n"
                },
                "category": {
                    "type": "string",
                    "description": "Category.\n"
                },
                "configContract": {
                    "type": "string",
                    "description": "DownloadClient configuration template.\n"
                },
                "destination": {
                    "type": "string",
                    "description": "Destination.\n"
                },
                "enable": {
                    "type": "boolean",
                    "description": "Enable flag.\n"
                },
                "fieldTags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Field tags.\n"
                },
                "firstAndLast": {
                    "type": "boolean",
                    "description": "First and last flag.\n"
                },
                "host": {
                    "type": "string",
                    "description": "host.\n"
                },
                "id": {
                    "type": "integer",
                    "description": "Download Client ID.\n"
                },
                "implementation": {
                    "type": "string",
                    "description": "DownloadClient implementation name.\n"
                },
                "initialState": {
                    "type": "integer",
                    "description": "Initial state. `0` Start, `1` ForceStart, `2` Pause.\n"
                },
                "intialState": {
                    "type": "integer",
                    "description": "Initial state, with Stop support. `0` Start, `1` ForceStart, `2` Pause, `3` Stop.\n"
                },
                "magnetFileExtension": {
                    "type": "string",
                    "description": "Magnet file extension.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Download Client name.\n"
                },
                "nzbFolder": {
                    "type": "string",
                    "description": "NZB folder.\n"
                },
                "olderBookPriority": {
                    "type": "integer",
                    "description": "Older Book priority. `0` Last, `1` First.\n"
                },
                "password": {
                    "type": "string",
                    "description": "Password.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "Port.\n"
                },
                "postImportTags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Post import tags.\n"
                },
                "priority": {
                    "type": "integer",
                    "description": "Priority.\n"
                },
                "protocol": {
                    "type": "string",
                    "description": "Protocol. Valid values are 'usenet' and 'torrent'.\n"
                },
                "readOnly": {
                    "type": "boolean",
                    "description": "Read only flag.\n"
                },
                "recentBookPriority": {
                    "type": "integer",
                    "description": "Recent Book priority. `0` Last, `1` First.\n"
                },
                "rpcPath": {
                    "type": "string",
                    "description": "RPC path.\n"
                },
                "saveMagnetFiles": {
                    "type": "boolean",
                    "description": "Save magnet files flag.\n"
                },
                "secretToken": {
                    "type": "string",
                    "description": "Secret token.\n"
                },
                "sequentialOrder": {
                    "type": "boolean",
                    "description": "Sequential order flag.\n"
                },
                "startOnAdd": {
                    "type": "boolean",
                    "description": "Start on add flag.\n"
                },
                "strmFolder": {
                    "type": "string",
                    "description": "STRM folder.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                },
                "torrentFolder": {
                    "type": "string",
                    "description": "Torrent folder.\n"
                },
                "urlBase": {
                    "type": "string",
                    "description": "Base URL.\n"
                },
                "useSsl": {
                    "type": "boolean",
                    "description": "Use SSL flag.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username.\n"
                },
                "watchFolder": {
                    "type": "string",
                    "description": "Watch folder flag.\n"
                }
            },
            "type": "object",
            "required": [
                "addPaused",
                "addStopped",
                "additionalTags",
                "apiKey",
                "bookCategory",
                "bookDirectory",
                "bookImportedCategory",
                "bookdirectory",
                "category",
                "configContract",
                "destination",
                "enable",
                "fieldTags",
                "firstAndLast",
                "host",
                "id",
                "implementation",
                "initialState",
                "intialState",
                "magnetFileExtension",
                "name",
                "nzbFolder",
                "olderBookPriority",
                "password",
                "port",
                "postImportTags",
                "priority",
                "protocol",
                "readOnly",
                "recentBookPriority",
                "rpcPath",
                "saveMagnetFiles",
                "secretToken",
                "sequentialOrder",
                "startOnAdd",
                "strmFolder",
                "tags",
                "torrentFolder",
                "urlBase",
                "useSsl",
                "username",
                "watchFolder"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "readarr:DownloadClients/getRemotePathMappingsRemotePathMapping:getRemotePathMappingsRemotePathMapping": {
            "properties": {
                "host": {
                    "type": "string",
                    "description": "Download Client host.\n"
                },
                "id": {
                    "type": "integer",
                    "description": "RemotePathMapping ID.\n"
                },
                "localPath": {
                    "type": "string",
                    "description": "Local path.\n"
                },
                "remotePath": {
                    "type": "string",
                    "description": "Download Client remote path.\n"
                }
            },
            "type": "object",
            "required": [
                "host",
                "id",
                "localPath",
                "remotePath"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "readarr:ImportLists/getImportListExclusionsImportListExclusion:getImportListExclusionsImportListExclusion": {
            "properties": {
                "authorName": {
                    "type": "string",
                    "description": "Author to be excluded.\n"
                },
                "foreignId": {
                    "type": "string",
                    "description": "Musicbrainz ID.\n"
                },
                "id": {
                    "type": "integer",
                    "description": "ImportListExclusion ID.\n"
                }
            },
            "type": "object",
            "required": [
                "authorName",
                "foreignId",
                "id"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "readarr:ImportLists/getImportListsImportList:getImportListsImportList": {
            "properties": {
                "accessToken": {
                    "type": "string",
                    "description": "Access token.\n",
                    "secret": true
                },
                "accessTokenSecret": {
                    "type": "string",
                    "description": "Access token secret.\n",
                    "secret": true
                },
                "apiKey": {
                    "type": "string",
                    "description": "API key.\n",
                    "secret": true
                },
                "baseUrl": {
                    "type": "string",
                    "description": "Base URL.\n"
                },
                "bookshelfIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Bookshelf IDs.\n"
                },
                "configContract": {
                    "type": "string",
                    "description": "ImportList configuration template.\n"
                },
                "enableAutomaticAdd": {
                    "type": "boolean",
                    "description": "Enable automatic add flag.\n"
                },
                "id": {
                    "type": "integer",
                    "description": "Import List ID.\n"
                },
                "implementation": {
                    "type": "string",
                    "description": "ImportList implementation name.\n"
                },
                "listId": {
                    "type": "integer",
                    "description": "List ID.\n"
                },
                "listOrder": {
                    "type": "integer",
                    "description": "List order.\n"
                },
                "listType": {
                    "type": "string",
                    "description": "List type.\n"
                },
                "metadataProfileId": {
                    "type": "integer",
                    "description": "Metadata profile ID.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Import List name.\n"
                },
                "profileIds": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "Profile IDs.\n"
                },
                "qualityProfileId": {
                    "type": "integer",
                    "description": "Quality profile ID.\n"
                },
                "requestTokenSecret": {
                    "type": "string",
                    "description": "Request token secret.\n",
                    "secret": true
                },
                "rootFolderPath": {
                    "type": "string",
                    "description": "Root folder path.\n"
                },
                "seriesId": {
                    "type": "integer",
                    "description": "Series ID.\n"
                },
                "shouldMonitor": {
                    "type": "string",
                    "description": "Should monitor.\n"
                },
                "shouldSearch": {
                    "type": "boolean",
                    "description": "Should search flag.\n"
                },
                "tagIds": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "Tag IDs.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                },
                "userId": {
                    "type": "string",
                    "description": "User ID.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username.\n"
                }
            },
            "type": "object",
            "required": [
                "accessToken",
                "accessTokenSecret",
                "apiKey",
                "baseUrl",
                "bookshelfIds",
                "configContract",
                "enableAutomaticAdd",
                "id",
                "implementation",
                "listId",
                "listOrder",
                "listType",
                "metadataProfileId",
                "name",
                "profileIds",
                "qualityProfileId",
                "requestTokenSecret",
                "rootFolderPath",
                "seriesId",
                "shouldMonitor",
                "shouldSearch",
                "tagIds",
                "tags",
                "userId",
                "username"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "readarr:Indexers/getIndexersIndexer:getIndexersIndexer": {
            "properties": {
                "additionalParameters": {
                    "type": "string",
                    "description": "Additional parameters.\n"
                },
                "allowZeroSize": {
                    "type": "boolean",
                    "description": "Allow zero size files.\n"
                },
                "apiKey": {
                    "type": "string",
                    "description": "API key.\n"
                },
                "apiPath": {
                    "type": "string",
                    "description": "API path.\n"
                },
                "apiUser": {
                    "type": "string",
                    "description": "API User.\n"
                },
                "authorSeedTime": {
                    "type": "integer",
                    "description": "Author seed time.\n"
                },
                "baseUrl": {
                    "type": "string",
                    "description": "Base URL.\n"
                },
                "captchaToken": {
                    "type": "string",
                    "description": "Captcha token.\n"
                },
                "categories": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "Series list.\n"
                },
                "configContract": {
                    "type": "string",
                    "description": "Indexer configuration template.\n"
                },
                "cookie": {
                    "type": "string",
                    "description": "Cookie.\n"
                },
                "delay": {
                    "type": "integer",
                    "description": "Delay before grabbing.\n"
                },
                "earlyReleaseLimit": {
                    "type": "integer",
                    "description": "Early release limit.\n"
                },
                "enableAutomaticSearch": {
                    "type": "boolean",
                    "description": "Enable automatic search flag.\n"
                },
                "enableInteractiveSearch": {
                    "type": "boolean",
                    "description": "Enable interactive search flag.\n"
                },
                "enableRss": {
                    "type": "boolean",
                    "description": "Enable RSS flag.\n"
                },
                "id": {
                    "type": "integer",
                    "description": "Indexer ID.\n"
                },
                "implementation": {
                    "type": "string",
                    "description": "Indexer implementation name.\n"
                },
                "minimumSeeders": {
                    "type": "integer",
                    "description": "Minimum seeders.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Indexer name.\n"
                },
                "passkey": {
                    "type": "string",
                    "description": "Passkey.\n",
                    "secret": true
                },
                "password": {
                    "type": "string",
                    "description": "Password.\n",
                    "secret": true
                },
                "priority": {
                    "type": "integer",
                    "description": "Priority.\n"
                },
                "protocol": {
                    "type": "string",
                    "description": "Protocol. Valid values are 'usenet' and 'torrent'.\n"
                },
                "rankedOnly": {
                    "type": "boolean",
                    "description": "Allow ranked only.\n"
                },
                "seedRatio": {
                    "type": "number",
                    "description": "Seed ratio.\n"
                },
                "seedTime": {
                    "type": "integer",
                    "description": "Seed time.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username.\n"
                }
            },
            "type": "object",
            "required": [
                "additionalParameters",
                "allowZeroSize",
                "apiKey",
                "apiPath",
                "apiUser",
                "authorSeedTime",
                "baseUrl",
                "captchaToken",
                "categories",
                "configContract",
                "cookie",
                "delay",
                "earlyReleaseLimit",
                "enableAutomaticSearch",
                "enableInteractiveSearch",
                "enableRss",
                "id",
                "implementation",
                "minimumSeeders",
                "name",
                "passkey",
                "password",
                "priority",
                "protocol",
                "rankedOnly",
                "seedRatio",
                "seedTime",
                "tags",
                "username"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "readarr:MediaManagement/getRootFoldersRootFolder:getRootFoldersRootFolder": {
            "properties": {
                "accessible": {
                    "type": "boolean",
                    "description": "Access flag.\n"
                },
                "defaultMetadataProfileId": {
                    "type": "integer",
                    "description": "Default metadata profile ID.\n"
                },
                "defaultMonitorOption": {
                    "type": "string",
                    "description": "Default monitor option.\n"
                },
                "defaultQualityProfileId": {
                    "type": "integer",
                    "description": "Default metadata profile ID.\n"
                },
                "defaultTags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                },
                "host": {
                    "type": "string",
                    "description": "Calibre host.\n"
                },
                "id": {
                    "type": "integer",
                    "description": "Root Folder ID.\n"
                },
                "isCalibreLibrary": {
                    "type": "boolean",
                    "description": "Is calibre library flag.\n"
                },
                "library": {
                    "type": "string",
                    "description": "Calibre library.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Root Folder name.\n"
                },
                "outputProfile": {
                    "type": "string",
                    "description": "Calibre output profile.\n"
                },
                "password": {
                    "type": "string",
                    "description": "Calibre password.\n",
                    "secret": true
                },
                "path": {
                    "type": "string",
                    "description": "Root Folder absolute path.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "Calibre Port.\n"
                },
                "useSsl": {
                    "type": "boolean",
                    "description": "Use SSL for calibre connection.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Calibre username.\n"
                }
            },
            "type": "object",
            "required": [
                "accessible",
                "defaultMetadataProfileId",
                "defaultMonitorOption",
                "defaultQualityProfileId",
                "defaultTags",
                "host",
                "id",
                "isCalibreLibrary",
                "library",
                "name",
                "outputProfile",
                "password",
                "path",
                "port",
                "useSsl",
                "username"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "readarr:Notifications/getNotificationsNotification:getNotificationsNotification": {
            "properties": {
                "accessToken": {
                    "type": "string",
                    "description": "Access token.\n"
                },
                "accessTokenSecret": {
                    "type": "string",
                    "description": "Access token secret.\n"
                },
                "addIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Add IDs.\n"
                },
                "apiKey": {
                    "type": "string",
                    "description": "API key.\n"
                },
                "appToken": {
                    "type": "string",
                    "description": "App token.\n"
                },
                "arguments": {
                    "type": "string",
                    "description": "Arguments.\n"
                },
                "attachFiles": {
                    "type": "boolean",
                    "description": "Attach files flag.\n"
                },
                "authUser": {
                    "type": "string",
                    "description": "Auth user.\n"
                },
                "author": {
                    "type": "string",
                    "description": "Author.\n"
                },
                "avatar": {
                    "type": "string",
                    "description": "Avatar.\n"
                },
                "bccs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Bcc.\n"
                },
                "botToken": {
                    "type": "string",
                    "description": "Bot token.\n"
                },
                "ccs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Cc.\n"
                },
                "channel": {
                    "type": "string",
                    "description": "Channel.\n"
                },
                "channelTags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Channel tags.\n"
                },
                "chatId": {
                    "type": "string",
                    "description": "Chat ID.\n"
                },
                "clickUrl": {
                    "type": "string",
                    "description": "Click URL.\n"
                },
                "condition": {
                    "type": "integer",
                    "description": "Condition. `10` BrandNew, `20` LikeNew, `30` VeryGood, `40` Good, `50` Acceptable, `60` Poor.\n"
                },
                "configContract": {
                    "type": "string",
                    "description": "Notification configuration template.\n"
                },
                "consumerKey": {
                    "type": "string",
                    "description": "Consumer key.\n"
                },
                "consumerSecret": {
                    "type": "string",
                    "description": "Consumer secret.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Condition description.\n"
                },
                "deviceIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Device IDs.\n"
                },
                "deviceNames": {
                    "type": "string",
                    "description": "Device names.\n"
                },
                "devices": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Devices.\n"
                },
                "directMessage": {
                    "type": "boolean",
                    "description": "Direct message flag.\n"
                },
                "event": {
                    "type": "string",
                    "description": "Event.\n"
                },
                "expire": {
                    "type": "integer",
                    "description": "Expire.\n"
                },
                "fieldTags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Devices.\n"
                },
                "from": {
                    "type": "string",
                    "description": "From.\n"
                },
                "grabFields": {
                    "type": "integer",
                    "description": "Grab fields. `0` Overview, `1` Rating, `2` Genres, `3` Quality, `4` Group, `5` Size, `6` Links, `7` Release, `8` Poster, `9` Fanart, `10` CustomFormats, `11` CustomFormatScore.\n"
                },
                "host": {
                    "type": "string",
                    "description": "Host.\n"
                },
                "icon": {
                    "type": "string",
                    "description": "Icon.\n"
                },
                "id": {
                    "type": "integer",
                    "description": "Notification ID.\n"
                },
                "implementation": {
                    "type": "string",
                    "description": "Notification implementation name.\n"
                },
                "importFields": {
                    "type": "integer",
                    "description": "Import fields. `0` Overview, `1` Rating, `2` Genres, `3` Quality, `4` Codecs, `5` Group, `6` Size, `7` Languages, `8` Subtitles, `9` Links, `10` Release, `11` Poster, `12` Fanart.\n"
                },
                "includeHealthWarnings": {
                    "type": "boolean",
                    "description": "Include health warnings.\n"
                },
                "instanceName": {
                    "type": "string",
                    "description": "Instance name.\n"
                },
                "key": {
                    "type": "string",
                    "description": "Key.\n"
                },
                "location": {
                    "type": "string",
                    "description": "Purchase location.\n"
                },
                "mapFrom": {
                    "type": "string",
                    "description": "Map From.\n"
                },
                "mapTo": {
                    "type": "string",
                    "description": "Map To.\n"
                },
                "mention": {
                    "type": "string",
                    "description": "Mention.\n"
                },
                "method": {
                    "type": "integer",
                    "description": "Method. `1` POST, `2` PUT.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Notification name.\n"
                },
                "notify": {
                    "type": "boolean",
                    "description": "Notify flag.\n"
                },
                "onApplicationUpdate": {
                    "type": "boolean",
                    "description": "On application update flag.\n"
                },
                "onAuthorDelete": {
                    "type": "boolean",
                    "description": "On author deleted flag.\n"
                },
                "onBookDelete": {
                    "type": "boolean",
                    "description": "On book delete flag.\n"
                },
                "onBookFileDelete": {
                    "type": "boolean",
                    "description": "On book file delete flag.\n"
                },
                "onBookFileDeleteForUpgrade": {
                    "type": "boolean",
                    "description": "On book file delete for upgrade flag.\n"
                },
                "onBookRetag": {
                    "type": "boolean",
                    "description": "On book retag flag.\n"
                },
                "onDownloadFailure": {
                    "type": "boolean",
                    "description": "On download failure flag.\n"
                },
                "onGrab": {
                    "type": "boolean",
                    "description": "On grab flag.\n"
                },
                "onHealthIssue": {
                    "type": "boolean",
                    "description": "On health issue flag.\n"
                },
                "onImportFailure": {
                    "type": "boolean",
                    "description": "On import failure flag.\n"
                },
                "onReleaseImport": {
                    "type": "boolean",
                    "description": "On release import flag.\n"
                },
                "onRename": {
                    "type": "boolean",
                    "description": "On rename flag.\n"
                },
                "onUpgrade": {
                    "type": "boolean",
                    "description": "On upgrade flag.\n"
                },
                "password": {
                    "type": "string",
                    "description": "password.\n"
                },
                "path": {
                    "type": "string",
                    "description": "Path.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "Port.\n"
                },
                "priority": {
                    "type": "integer",
                    "description": "Priority.\n"
                },
                "recipients": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Recipients.\n"
                },
                "refreshToken": {
                    "type": "string",
                    "description": "Refresh token.\n"
                },
                "removeIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Remove IDs.\n"
                },
                "requestTokenSecret": {
                    "type": "string",
                    "description": "Request token secret.\n",
                    "secret": true
                },
                "requireEncryption": {
                    "type": "boolean",
                    "description": "Require encryption flag.\n"
                },
                "retry": {
                    "type": "integer",
                    "description": "Retry.\n"
                },
                "sendSilently": {
                    "type": "boolean",
                    "description": "Add silently flag.\n"
                },
                "senderDomain": {
                    "type": "string",
                    "description": "Sender domain.\n"
                },
                "senderId": {
                    "type": "string",
                    "description": "Sender ID.\n"
                },
                "server": {
                    "type": "string",
                    "description": "server.\n"
                },
                "serverUrl": {
                    "type": "string",
                    "description": "Server url.\n"
                },
                "signIn": {
                    "type": "string",
                    "description": "Sign in.\n"
                },
                "sound": {
                    "type": "string",
                    "description": "Sound.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                },
                "token": {
                    "type": "string",
                    "description": "Token.\n",
                    "secret": true
                },
                "topics": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Devices.\n"
                },
                "tos": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "To.\n"
                },
                "updateLibrary": {
                    "type": "boolean",
                    "description": "Update library flag.\n"
                },
                "url": {
                    "type": "string",
                    "description": "URL.\n"
                },
                "urlBase": {
                    "type": "string",
                    "description": "URL base.\n"
                },
                "useEuEndpoint": {
                    "type": "boolean",
                    "description": "Use EU endpoint flag.\n"
                },
                "useSsl": {
                    "type": "boolean",
                    "description": "Use SSL flag.\n"
                },
                "userId": {
                    "type": "string",
                    "description": "User ID.\n"
                },
                "userKey": {
                    "type": "string",
                    "description": "User key.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username.\n"
                },
                "webHookUrl": {
                    "type": "string",
                    "description": "Web hook url.\n"
                }
            },
            "type": "object",
            "required": [
                "accessToken",
                "accessTokenSecret",
                "addIds",
                "apiKey",
                "appToken",
                "arguments",
                "attachFiles",
                "authUser",
                "author",
                "avatar",
                "bccs",
                "botToken",
                "ccs",
                "channel",
                "channelTags",
                "chatId",
                "clickUrl",
                "condition",
                "configContract",
                "consumerKey",
                "consumerSecret",
                "description",
                "deviceIds",
                "deviceNames",
                "devices",
                "directMessage",
                "event",
                "expire",
                "fieldTags",
                "from",
                "grabFields",
                "host",
                "icon",
                "id",
                "implementation",
                "importFields",
                "includeHealthWarnings",
                "instanceName",
                "key",
                "location",
                "mapFrom",
                "mapTo",
                "mention",
                "method",
                "name",
                "notify",
                "onApplicationUpdate",
                "onAuthorDelete",
                "onBookDelete",
                "onBookFileDelete",
                "onBookFileDeleteForUpgrade",
                "onBookRetag",
                "onDownloadFailure",
                "onGrab",
                "onHealthIssue",
                "onImportFailure",
                "onReleaseImport",
                "onRename",
                "onUpgrade",
                "password",
                "path",
                "port",
                "priority",
                "recipients",
                "refreshToken",
                "removeIds",
                "requestTokenSecret",
                "requireEncryption",
                "retry",
                "sendSilently",
                "senderDomain",
                "senderId",
                "server",
                "serverUrl",
                "signIn",
                "sound",
                "tags",
                "tos",
                "token",
                "topics",
                "updateLibrary",
                "url",
                "urlBase",
                "useEuEndpoint",
                "useSsl",
                "userId",
                "userKey",
                "username",
                "webHookUrl"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "readarr:Profiles/CustomFormatSpecification:CustomFormatSpecification": {
            "properties": {
                "implementation": {
                    "type": "string",
                    "description": "Implementation.\n"
                },
                "max": {
                    "type": "integer",
                    "description": "Max.\n"
                },
                "min": {
                    "type": "integer",
                    "description": "Min.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specification name.\n"
                },
                "negate": {
                    "type": "boolean",
                    "description": "Negate flag.\n"
                },
                "required": {
                    "type": "boolean",
                    "description": "Required flag.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "implementation",
                        "max",
                        "min",
                        "name",
                        "negate",
                        "required",
                        "value"
                    ]
                }
            }
        },
        "readarr:Profiles/QualityProfileFormatItem:QualityProfileFormatItem": {
            "properties": {
                "format": {
                    "type": "integer",
                    "description": "Format.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name.\n"
                },
                "score": {
                    "type": "integer",
                    "description": "Score.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "format",
                        "name",
                        "score"
                    ]
                }
            }
        },
        "readarr:Profiles/QualityProfileQualityGroup:QualityProfileQualityGroup": {
            "properties": {
                "id": {
                    "type": "integer",
                    "description": "Quality group ID.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Quality group name.\n"
                },
                "qualities": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/readarr:Profiles/QualityProfileQualityGroupQuality:QualityProfileQualityGroupQuality"
                    },
                    "description": "Qualities in group.\n"
                }
            },
            "type": "object",
            "required": [
                "qualities"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id",
                        "name",
                        "qualities"
                    ]
                }
            }
        },
        "readarr:Profiles/QualityProfileQualityGroupQuality:QualityProfileQualityGroupQuality": {
            "properties": {
                "id": {
                    "type": "integer",
                    "description": "Quality Profile ID.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Quality Profile Name.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id",
                        "name"
                    ]
                }
            }
        },
        "readarr:Profiles/getCustomFormatSpecification:getCustomFormatSpecification": {
            "properties": {
                "implementation": {
                    "type": "string",
                    "description": "Implementation.\n"
                },
                "max": {
                    "type": "integer",
                    "description": "Max.\n"
                },
                "min": {
                    "type": "integer",
                    "description": "Min.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Specification name.\n"
                },
                "negate": {
                    "type": "boolean",
                    "description": "Negate flag.\n"
                },
                "required": {
                    "type": "boolean",
                    "description": "Computed flag.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Value.\n"
                }
            },
            "type": "object",
            "required": [
                "implementation",
                "max",
                "min",
                "name",
                "negate",
                "required",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "readarr:Profiles/getCustomFormatsCustomFormat:getCustomFormatsCustomFormat": {
            "properties": {
                "id": {
                    "type": "integer",
                    "description": "Custom Format ID.\n"
                },
                "includeCustomFormatWhenRenaming": {
                    "type": "boolean",
                    "description": "Include custom format when renaming flag.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Custom Format name.\n"
                },
                "specifications": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/readarr:Profiles/getCustomFormatsCustomFormatSpecification:getCustomFormatsCustomFormatSpecification"
                    },
                    "description": "Specifications.\n"
                }
            },
            "type": "object",
            "required": [
                "id",
                "includeCustomFormatWhenRenaming",
                "name",
                "specifications"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "readarr:Profiles/getCustomFormatsCustomFormatSpecification:getCustomFormatsCustomFormatSpecification": {
            "properties": {
                "implementation": {
                    "type": "string"
                },
                "max": {
                    "type": "integer"
                },
                "min": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "negate": {
                    "type": "boolean"
                },
                "required": {
                    "type": "boolean"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "implementation",
                "max",
                "min",
                "name",
                "negate",
                "required",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "readarr:Profiles/getDelayProfilesDelayProfile:getDelayProfilesDelayProfile": {
            "properties": {
                "enableTorrent": {
                    "type": "boolean",
                    "description": "Torrent allowed Flag.\n"
                },
                "enableUsenet": {
                    "type": "boolean",
                    "description": "Usenet allowed Flag.\n"
                },
                "id": {
                    "type": "integer",
                    "description": "Delay Profile ID.\n"
                },
                "order": {
                    "type": "integer",
                    "description": "Order.\n"
                },
                "preferredProtocol": {
                    "type": "string",
                    "description": "Preferred protocol.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                },
                "torrentDelay": {
                    "type": "integer",
                    "description": "Torrent Delay.\n"
                },
                "usenetDelay": {
                    "type": "integer",
                    "description": "Usenet delay.\n"
                }
            },
            "type": "object",
            "required": [
                "enableTorrent",
                "enableUsenet",
                "id",
                "order",
                "preferredProtocol",
                "tags",
                "torrentDelay",
                "usenetDelay"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "readarr:Profiles/getMetadataProfilesMetadataProfile:getMetadataProfilesMetadataProfile": {
            "properties": {
                "allowedLanguages": {
                    "type": "string",
                    "description": "Allowed languages. Comma separated list of ISO 639-3 language codes.\n"
                },
                "id": {
                    "type": "integer",
                    "description": "Metadata Profile ID.\n"
                },
                "ignored": {
                    "type": "string",
                    "description": "Terms to ignore. Comma separated list.\n"
                },
                "minPages": {
                    "type": "integer",
                    "description": "Minimum pages.\n"
                },
                "minPopularity": {
                    "type": "number",
                    "description": "Minimum popularity.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Metadata Profile name.\n"
                },
                "skipMissingDate": {
                    "type": "boolean",
                    "description": "Skip missing date.\n"
                },
                "skipMissingIsbn": {
                    "type": "boolean",
                    "description": "Skip missing ISBN.\n"
                },
                "skipPartsAndSets": {
                    "type": "boolean",
                    "description": "Skip parts and sets.\n"
                },
                "skipSeriesSecondary": {
                    "type": "boolean",
                    "description": "Skip secondary series books.\n"
                }
            },
            "type": "object",
            "required": [
                "allowedLanguages",
                "id",
                "ignored",
                "minPages",
                "minPopularity",
                "name",
                "skipMissingDate",
                "skipMissingIsbn",
                "skipPartsAndSets",
                "skipSeriesSecondary"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "readarr:Profiles/getQualityDefinitionsQualityDefinition:getQualityDefinitionsQualityDefinition": {
            "properties": {
                "id": {
                    "type": "integer",
                    "description": "Quality Definition ID.\n"
                },
                "maxSize": {
                    "type": "number",
                    "description": "Maximum size MB/min.\n"
                },
                "minSize": {
                    "type": "number",
                    "description": "Minimum size MB/min.\n"
                },
                "qualityId": {
                    "type": "integer",
                    "description": "Quality ID.\n"
                },
                "qualityName": {
                    "type": "string",
                    "description": "Quality Name.\n"
                },
                "title": {
                    "type": "string",
                    "description": "Quality Definition Title.\n"
                }
            },
            "type": "object",
            "required": [
                "id",
                "maxSize",
                "minSize",
                "qualityId",
                "qualityName",
                "title"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "readarr:Profiles/getQualityProfileFormatItem:getQualityProfileFormatItem": {
            "properties": {
                "format": {
                    "type": "integer",
                    "description": "Format.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name.\n"
                },
                "score": {
                    "type": "integer",
                    "description": "Score.\n"
                }
            },
            "type": "object",
            "required": [
                "format",
                "name",
                "score"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "readarr:Profiles/getQualityProfileQualityGroup:getQualityProfileQualityGroup": {
            "properties": {
                "id": {
                    "type": "integer",
                    "description": "Quality group ID.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Quality group name.\n"
                },
                "qualities": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/readarr:Profiles/getQualityProfileQualityGroupQuality:getQualityProfileQualityGroupQuality"
                    },
                    "description": "Qualities in group.\n"
                }
            },
            "type": "object",
            "required": [
                "id",
                "name",
                "qualities"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "readarr:Profiles/getQualityProfileQualityGroupQuality:getQualityProfileQualityGroupQuality": {
            "properties": {
                "id": {
                    "type": "integer",
                    "description": "Quality Profile ID.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Quality Profile Name.\n"
                }
            },
            "type": "object",
            "required": [
                "id",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "readarr:Profiles/getQualityProfilesQualityProfile:getQualityProfilesQualityProfile": {
            "properties": {
                "cutoff": {
                    "type": "integer",
                    "description": "Quality ID to which cutoff.\n"
                },
                "cutoffFormatScore": {
                    "type": "integer",
                    "description": "Cutoff format score.\n"
                },
                "formatItems": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/readarr:Profiles/getQualityProfilesQualityProfileFormatItem:getQualityProfilesQualityProfileFormatItem"
                    },
                    "description": "Format items.\n"
                },
                "id": {
                    "type": "integer",
                    "description": "Quality Profile ID.\n"
                },
                "minFormatScore": {
                    "type": "integer",
                    "description": "Min format score.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Quality Profile Name.\n"
                },
                "qualityGroups": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/readarr:Profiles/getQualityProfilesQualityProfileQualityGroup:getQualityProfilesQualityProfileQualityGroup"
                    },
                    "description": "Quality groups.\n"
                },
                "upgradeAllowed": {
                    "type": "boolean",
                    "description": "Upgrade allowed flag.\n"
                }
            },
            "type": "object",
            "required": [
                "cutoff",
                "cutoffFormatScore",
                "formatItems",
                "id",
                "minFormatScore",
                "name",
                "qualityGroups",
                "upgradeAllowed"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "readarr:Profiles/getQualityProfilesQualityProfileFormatItem:getQualityProfilesQualityProfileFormatItem": {
            "properties": {
                "format": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "score": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "format",
                "name",
                "score"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "readarr:Profiles/getQualityProfilesQualityProfileQualityGroup:getQualityProfilesQualityProfileQualityGroup": {
            "properties": {
                "id": {
                    "type": "integer",
                    "description": "The ID of this resource.\n"
                },
                "name": {
                    "type": "string"
                },
                "qualities": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/readarr:Profiles/getQualityProfilesQualityProfileQualityGroupQuality:getQualityProfilesQualityProfileQualityGroupQuality"
                    }
                }
            },
            "type": "object",
            "required": [
                "id",
                "name",
                "qualities"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "readarr:Profiles/getQualityProfilesQualityProfileQualityGroupQuality:getQualityProfilesQualityProfileQualityGroupQuality": {
            "properties": {
                "id": {
                    "type": "integer",
                    "description": "The ID of this resource.\n"
                },
                "name": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "readarr:Profiles/getReleaseProfilesReleaseProfile:getReleaseProfilesReleaseProfile": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enabled.\n"
                },
                "id": {
                    "type": "integer",
                    "description": "Release Profile ID.\n"
                },
                "ignoreds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Ignored terms. At least one of `required` and `ignored` must be set.\n"
                },
                "indexerId": {
                    "type": "integer",
                    "description": "Indexer ID. Set `0` for all.\n"
                },
                "requireds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Required terms. At least one of `required` and `ignored` must be set.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                }
            },
            "type": "object",
            "required": [
                "enabled",
                "id",
                "ignoreds",
                "indexerId",
                "requireds",
                "tags"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "readarr:Tags/getTagsTag:getTagsTag": {
            "properties": {
                "id": {
                    "type": "integer",
                    "description": "Tag ID.\n"
                },
                "label": {
                    "type": "string",
                    "description": "Tag label.\n"
                }
            },
            "type": "object",
            "required": [
                "id",
                "label"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        }
    },
    "provider": {
        "description": "The provider type for the readarr package. By default, resources use package-wide configuration\nsettings, however an explicit `Provider` instance may be created and passed during resource\nconstruction to achieve fine-grained programmatic control over provider settings. See the\n[documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.\n",
        "properties": {
            "apiKey": {
                "type": "string",
                "description": "API key for Readarr authentication. Can be specified via the `READARR_API_KEY` environment variable.\n",
                "secret": true
            },
            "url": {
                "type": "string",
                "description": "Full Readarr URL with protocol and port (e.g. `https://test.readarr.lib:8787`). You should **NOT** supply any path\n(`/api`), the SDK will use the appropriate paths. Can be specified via the `READARR_URL` environment variable.\n"
            }
        },
        "inputProperties": {
            "apiKey": {
                "type": "string",
                "description": "API key for Readarr authentication. Can be specified via the `READARR_API_KEY` environment variable.\n",
                "secret": true
            },
            "url": {
                "type": "string",
                "description": "Full Readarr URL with protocol and port (e.g. `https://test.readarr.lib:8787`). You should **NOT** supply any path\n(`/api`), the SDK will use the appropriate paths. Can be specified via the `READARR_URL` environment variable.\n"
            }
        }
    },
    "resources": {
        "readarr:Authors/author:Author": {
            "description": "\u003c!-- subcategory:Authors --\u003eAuthor resource.\nFor more information refer to [Authors](https://wiki.servarr.com/readarr/library#authors) documentation.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.readarr.Tags.Tag;\nimport com.pulumi.readarr.Tags.TagArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new Tag(\"example\", TagArgs.builder()        \n            .authorName(\"Leo Tolstoy\")\n            .foreignAuthorId(\"128382\")\n            .monitored(true)\n            .path(\"/books/leotolstoy\")\n            .qualityProfileId(1)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: readarr:Tags:Tag\n    properties:\n      authorName: Leo Tolstoy\n      foreignAuthorId: '128382'\n      monitored: true\n      path: /books/leotolstoy\n      qualityProfileId: 1\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nimport using the API/UI ID\n\n```sh\n $ pulumi import readarr:Authors/author:Author example 10\n```\n\n ",
            "properties": {
                "authorName": {
                    "type": "string",
                    "description": "Author name.\n"
                },
                "foreignAuthorId": {
                    "type": "string",
                    "description": "Foreign author ID.\n"
                },
                "genres": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List genres.\n"
                },
                "monitored": {
                    "type": "boolean",
                    "description": "Monitored flag.\n"
                },
                "overview": {
                    "type": "string",
                    "description": "Overview.\n"
                },
                "path": {
                    "type": "string",
                    "description": "Full author path.\n"
                },
                "qualityProfileId": {
                    "type": "integer",
                    "description": "Quality profile ID.\n"
                },
                "status": {
                    "type": "string",
                    "description": "Author status.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                }
            },
            "required": [
                "authorName",
                "foreignAuthorId",
                "genres",
                "monitored",
                "overview",
                "path",
                "qualityProfileId",
                "status",
                "tags"
            ],
            "inputProperties": {
                "authorName": {
                    "type": "string",
                    "description": "Author name.\n"
                },
                "foreignAuthorId": {
                    "type": "string",
                    "description": "Foreign author ID.\n"
                },
                "monitored": {
                    "type": "boolean",
                    "description": "Monitored flag.\n"
                },
                "path": {
                    "type": "string",
                    "description": "Full author path.\n"
                },
                "qualityProfileId": {
                    "type": "integer",
                    "description": "Quality profile ID.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                }
            },
            "requiredInputs": [
                "authorName",
                "foreignAuthorId",
                "monitored",
                "path",
                "qualityProfileId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Author resources.\n",
                "properties": {
                    "authorName": {
                        "type": "string",
                        "description": "Author name.\n"
                    },
                    "foreignAuthorId": {
                        "type": "string",
                        "description": "Foreign author ID.\n"
                    },
                    "genres": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List genres.\n"
                    },
                    "monitored": {
                        "type": "boolean",
                        "description": "Monitored flag.\n"
                    },
                    "overview": {
                        "type": "string",
                        "description": "Overview.\n"
                    },
                    "path": {
                        "type": "string",
                        "description": "Full author path.\n"
                    },
                    "qualityProfileId": {
                        "type": "integer",
                        "description": "Quality profile ID.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "Author status.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "List of associated tags.\n"
                    }
                },
                "type": "object"
            }
        },
        "readarr:DownloadClients/downloadClient:DownloadClient": {
            "description": "\u003c!-- subcategory:Download Clients --\u003eGeneric Download Client resource. When possible use a specific resource instead.\nFor more information refer to [Download Client](https://wiki.servarr.com/readarr/settings#download-clients).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as readarr from \"@maienm/pulumi-readarr\";\n\nconst example = new readarr.downloadclients.DownloadClient(\"example\", {\n    configContract: \"TransmissionSettings\",\n    enable: true,\n    host: \"transmission\",\n    implementation: \"Transmission\",\n    name: \"Example\",\n    port: 9091,\n    priority: 1,\n    protocol: \"torrent\",\n    urlBase: \"/transmission/\",\n});\n```\n```python\nimport pulumi\nimport pulumi_readarr as readarr\n\nexample = readarr.download_clients.DownloadClient(\"example\",\n    config_contract=\"TransmissionSettings\",\n    enable=True,\n    host=\"transmission\",\n    implementation=\"Transmission\",\n    name=\"Example\",\n    port=9091,\n    priority=1,\n    protocol=\"torrent\",\n    url_base=\"/transmission/\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Readarr = MaienM.Readarr;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Readarr.DownloadClients.DownloadClient(\"example\", new()\n    {\n        ConfigContract = \"TransmissionSettings\",\n        Enable = true,\n        Host = \"transmission\",\n        Implementation = \"Transmission\",\n        Name = \"Example\",\n        Port = 9091,\n        Priority = 1,\n        Protocol = \"torrent\",\n        UrlBase = \"/transmission/\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/MaienM/pulumi-readarr/sdk/v2/go/readarr/DownloadClients\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := DownloadClients.NewDownloadClient(ctx, \"example\", \u0026DownloadClients.DownloadClientArgs{\n\t\t\tConfigContract: pulumi.String(\"TransmissionSettings\"),\n\t\t\tEnable:         pulumi.Bool(true),\n\t\t\tHost:           pulumi.String(\"transmission\"),\n\t\t\tImplementation: pulumi.String(\"Transmission\"),\n\t\t\tName:           pulumi.String(\"Example\"),\n\t\t\tPort:           pulumi.Int(9091),\n\t\t\tPriority:       pulumi.Int(1),\n\t\t\tProtocol:       pulumi.String(\"torrent\"),\n\t\t\tUrlBase:        pulumi.String(\"/transmission/\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.readarr.DownloadClients.DownloadClient;\nimport com.pulumi.readarr.DownloadClients.DownloadClientArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new DownloadClient(\"example\", DownloadClientArgs.builder()        \n            .configContract(\"TransmissionSettings\")\n            .enable(true)\n            .host(\"transmission\")\n            .implementation(\"Transmission\")\n            .name(\"Example\")\n            .port(9091)\n            .priority(1)\n            .protocol(\"torrent\")\n            .urlBase(\"/transmission/\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: readarr:DownloadClients:DownloadClient\n    properties:\n      configContract: TransmissionSettings\n      enable: true\n      host: transmission\n      implementation: Transmission\n      name: Example\n      port: 9091\n      priority: 1\n      protocol: torrent\n      urlBase: /transmission/\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nimport using the API/UI ID\n\n```sh\n $ pulumi import readarr:DownloadClients/downloadClient:DownloadClient example 1\n```\n\n ",
            "properties": {
                "addPaused": {
                    "type": "boolean",
                    "description": "Add paused flag.\n"
                },
                "addStopped": {
                    "type": "boolean",
                    "description": "Add stopped flag.\n"
                },
                "additionalTags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "Additional tags, `0` TitleSlug, `1` Quality, `2` Language, `3` ReleaseGroup, `4` Year, `5` Indexer, `6` Network.\n"
                },
                "apiKey": {
                    "type": "string",
                    "description": "API key.\n"
                },
                "bookCategory": {
                    "type": "string",
                    "description": "Book category.\n"
                },
                "bookDirectory": {
                    "type": "string",
                    "description": "Book directory.\n"
                },
                "bookImportedCategory": {
                    "type": "string",
                    "description": "Book imported category.\n"
                },
                "bookdirectory": {
                    "type": "string",
                    "description": "Book directory.\n"
                },
                "category": {
                    "type": "string",
                    "description": "Category.\n"
                },
                "configContract": {
                    "type": "string",
                    "description": "DownloadClient configuration template.\n"
                },
                "destination": {
                    "type": "string",
                    "description": "Destination.\n"
                },
                "enable": {
                    "type": "boolean",
                    "description": "Enable flag.\n"
                },
                "fieldTags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Field tags.\n"
                },
                "firstAndLast": {
                    "type": "boolean",
                    "description": "First and last flag.\n"
                },
                "host": {
                    "type": "string",
                    "description": "host.\n"
                },
                "implementation": {
                    "type": "string",
                    "description": "DownloadClient implementation name.\n"
                },
                "initialState": {
                    "type": "integer",
                    "description": "Initial state. `0` Start, `1` ForceStart, `2` Pause.\n"
                },
                "intialState": {
                    "type": "integer",
                    "description": "Initial state, with Stop support. `0` Start, `1` ForceStart, `2` Pause, `3` Stop.\n"
                },
                "magnetFileExtension": {
                    "type": "string",
                    "description": "Magnet file extension.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Download Client name.\n"
                },
                "nzbFolder": {
                    "type": "string",
                    "description": "NZB folder.\n"
                },
                "olderBookPriority": {
                    "type": "integer",
                    "description": "Older Book priority. `0` Last, `1` First.\n"
                },
                "password": {
                    "type": "string",
                    "description": "Password.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "Port.\n"
                },
                "postImportTags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Post import tags.\n"
                },
                "priority": {
                    "type": "integer",
                    "description": "Priority.\n"
                },
                "protocol": {
                    "type": "string",
                    "description": "Protocol. Valid values are 'usenet' and 'torrent'.\n"
                },
                "readOnly": {
                    "type": "boolean",
                    "description": "Read only flag.\n"
                },
                "recentBookPriority": {
                    "type": "integer",
                    "description": "Recent Book priority. `0` Last, `1` First.\n"
                },
                "rpcPath": {
                    "type": "string",
                    "description": "RPC path.\n"
                },
                "saveMagnetFiles": {
                    "type": "boolean",
                    "description": "Save magnet files flag.\n"
                },
                "secretToken": {
                    "type": "string",
                    "description": "Secret token.\n"
                },
                "sequentialOrder": {
                    "type": "boolean",
                    "description": "Sequential order flag.\n"
                },
                "startOnAdd": {
                    "type": "boolean",
                    "description": "Start on add flag.\n"
                },
                "strmFolder": {
                    "type": "string",
                    "description": "STRM folder.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                },
                "torrentFolder": {
                    "type": "string",
                    "description": "Torrent folder.\n"
                },
                "urlBase": {
                    "type": "string",
                    "description": "Base URL.\n"
                },
                "useSsl": {
                    "type": "boolean",
                    "description": "Use SSL flag.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username.\n"
                },
                "watchFolder": {
                    "type": "string",
                    "description": "Watch folder flag.\n"
                }
            },
            "required": [
                "addPaused",
                "addStopped",
                "additionalTags",
                "apiKey",
                "bookCategory",
                "bookDirectory",
                "bookImportedCategory",
                "bookdirectory",
                "category",
                "configContract",
                "destination",
                "enable",
                "fieldTags",
                "firstAndLast",
                "host",
                "implementation",
                "initialState",
                "intialState",
                "magnetFileExtension",
                "name",
                "nzbFolder",
                "olderBookPriority",
                "password",
                "port",
                "postImportTags",
                "priority",
                "protocol",
                "readOnly",
                "recentBookPriority",
                "rpcPath",
                "saveMagnetFiles",
                "secretToken",
                "sequentialOrder",
                "startOnAdd",
                "strmFolder",
                "tags",
                "torrentFolder",
                "urlBase",
                "useSsl",
                "username",
                "watchFolder"
            ],
            "inputProperties": {
                "addPaused": {
                    "type": "boolean",
                    "description": "Add paused flag.\n"
                },
                "addStopped": {
                    "type": "boolean",
                    "description": "Add stopped flag.\n"
                },
                "additionalTags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "Additional tags, `0` TitleSlug, `1` Quality, `2` Language, `3` ReleaseGroup, `4` Year, `5` Indexer, `6` Network.\n"
                },
                "apiKey": {
                    "type": "string",
                    "description": "API key.\n"
                },
                "bookCategory": {
                    "type": "string",
                    "description": "Book category.\n"
                },
                "bookDirectory": {
                    "type": "string",
                    "description": "Book directory.\n"
                },
                "bookImportedCategory": {
                    "type": "string",
                    "description": "Book imported category.\n"
                },
                "bookdirectory": {
                    "type": "string",
                    "description": "Book directory.\n"
                },
                "category": {
                    "type": "string",
                    "description": "Category.\n"
                },
                "configContract": {
                    "type": "string",
                    "description": "DownloadClient configuration template.\n"
                },
                "destination": {
                    "type": "string",
                    "description": "Destination.\n"
                },
                "enable": {
                    "type": "boolean",
                    "description": "Enable flag.\n"
                },
                "fieldTags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Field tags.\n"
                },
                "firstAndLast": {
                    "type": "boolean",
                    "description": "First and last flag.\n"
                },
                "host": {
                    "type": "string",
                    "description": "host.\n"
                },
                "implementation": {
                    "type": "string",
                    "description": "DownloadClient implementation name.\n"
                },
                "initialState": {
                    "type": "integer",
                    "description": "Initial state. `0` Start, `1` ForceStart, `2` Pause.\n"
                },
                "intialState": {
                    "type": "integer",
                    "description": "Initial state, with Stop support. `0` Start, `1` ForceStart, `2` Pause, `3` Stop.\n"
                },
                "magnetFileExtension": {
                    "type": "string",
                    "description": "Magnet file extension.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Download Client name.\n"
                },
                "nzbFolder": {
                    "type": "string",
                    "description": "NZB folder.\n"
                },
                "olderBookPriority": {
                    "type": "integer",
                    "description": "Older Book priority. `0` Last, `1` First.\n"
                },
                "password": {
                    "type": "string",
                    "description": "Password.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "Port.\n"
                },
                "postImportTags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Post import tags.\n"
                },
                "priority": {
                    "type": "integer",
                    "description": "Priority.\n"
                },
                "protocol": {
                    "type": "string",
                    "description": "Protocol. Valid values are 'usenet' and 'torrent'.\n"
                },
                "readOnly": {
                    "type": "boolean",
                    "description": "Read only flag.\n"
                },
                "recentBookPriority": {
                    "type": "integer",
                    "description": "Recent Book priority. `0` Last, `1` First.\n"
                },
                "rpcPath": {
                    "type": "string",
                    "description": "RPC path.\n"
                },
                "saveMagnetFiles": {
                    "type": "boolean",
                    "description": "Save magnet files flag.\n"
                },
                "secretToken": {
                    "type": "string",
                    "description": "Secret token.\n"
                },
                "sequentialOrder": {
                    "type": "boolean",
                    "description": "Sequential order flag.\n"
                },
                "startOnAdd": {
                    "type": "boolean",
                    "description": "Start on add flag.\n"
                },
                "strmFolder": {
                    "type": "string",
                    "description": "STRM folder.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                },
                "torrentFolder": {
                    "type": "string",
                    "description": "Torrent folder.\n"
                },
                "urlBase": {
                    "type": "string",
                    "description": "Base URL.\n"
                },
                "useSsl": {
                    "type": "boolean",
                    "description": "Use SSL flag.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username.\n"
                },
                "watchFolder": {
                    "type": "string",
                    "description": "Watch folder flag.\n"
                }
            },
            "requiredInputs": [
                "configContract",
                "implementation",
                "name",
                "protocol"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DownloadClient resources.\n",
                "properties": {
                    "addPaused": {
                        "type": "boolean",
                        "description": "Add paused flag.\n"
                    },
                    "addStopped": {
                        "type": "boolean",
                        "description": "Add stopped flag.\n"
                    },
                    "additionalTags": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "Additional tags, `0` TitleSlug, `1` Quality, `2` Language, `3` ReleaseGroup, `4` Year, `5` Indexer, `6` Network.\n"
                    },
                    "apiKey": {
                        "type": "string",
                        "description": "API key.\n"
                    },
                    "bookCategory": {
                        "type": "string",
                        "description": "Book category.\n"
                    },
                    "bookDirectory": {
                        "type": "string",
                        "description": "Book directory.\n"
                    },
                    "bookImportedCategory": {
                        "type": "string",
                        "description": "Book imported category.\n"
                    },
                    "bookdirectory": {
                        "type": "string",
                        "description": "Book directory.\n"
                    },
                    "category": {
                        "type": "string",
                        "description": "Category.\n"
                    },
                    "configContract": {
                        "type": "string",
                        "description": "DownloadClient configuration template.\n"
                    },
                    "destination": {
                        "type": "string",
                        "description": "Destination.\n"
                    },
                    "enable": {
                        "type": "boolean",
                        "description": "Enable flag.\n"
                    },
                    "fieldTags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Field tags.\n"
                    },
                    "firstAndLast": {
                        "type": "boolean",
                        "description": "First and last flag.\n"
                    },
                    "host": {
                        "type": "string",
                        "description": "host.\n"
                    },
                    "implementation": {
                        "type": "string",
                        "description": "DownloadClient implementation name.\n"
                    },
                    "initialState": {
                        "type": "integer",
                        "description": "Initial state. `0` Start, `1` ForceStart, `2` Pause.\n"
                    },
                    "intialState": {
                        "type": "integer",
                        "description": "Initial state, with Stop support. `0` Start, `1` ForceStart, `2` Pause, `3` Stop.\n"
                    },
                    "magnetFileExtension": {
                        "type": "string",
                        "description": "Magnet file extension.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Download Client name.\n"
                    },
                    "nzbFolder": {
                        "type": "string",
                        "description": "NZB folder.\n"
                    },
                    "olderBookPriority": {
                        "type": "integer",
                        "description": "Older Book priority. `0` Last, `1` First.\n"
                    },
                    "password": {
                        "type": "string",
                        "description": "Password.\n"
                    },
                    "port": {
                        "type": "integer",
                        "description": "Port.\n"
                    },
                    "postImportTags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Post import tags.\n"
                    },
                    "priority": {
                        "type": "integer",
                        "description": "Priority.\n"
                    },
                    "protocol": {
                        "type": "string",
                        "description": "Protocol. Valid values are 'usenet' and 'torrent'.\n"
                    },
                    "readOnly": {
                        "type": "boolean",
                        "description": "Read only flag.\n"
                    },
                    "recentBookPriority": {
                        "type": "integer",
                        "description": "Recent Book priority. `0` Last, `1` First.\n"
                    },
                    "rpcPath": {
                        "type": "string",
                        "description": "RPC path.\n"
                    },
                    "saveMagnetFiles": {
                        "type": "boolean",
                        "description": "Save magnet files flag.\n"
                    },
                    "secretToken": {
                        "type": "string",
                        "description": "Secret token.\n"
                    },
                    "sequentialOrder": {
                        "type": "boolean",
                        "description": "Sequential order flag.\n"
                    },
                    "startOnAdd": {
                        "type": "boolean",
                        "description": "Start on add flag.\n"
                    },
                    "strmFolder": {
                        "type": "string",
                        "description": "STRM folder.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "List of associated tags.\n"
                    },
                    "torrentFolder": {
                        "type": "string",
                        "description": "Torrent folder.\n"
                    },
                    "urlBase": {
                        "type": "string",
                        "description": "Base URL.\n"
                    },
                    "useSsl": {
                        "type": "boolean",
                        "description": "Use SSL flag.\n"
                    },
                    "username": {
                        "type": "string",
                        "description": "Username.\n"
                    },
                    "watchFolder": {
                        "type": "string",
                        "description": "Watch folder flag.\n"
                    }
                },
                "type": "object"
            }
        },
        "readarr:DownloadClients/downloadClientAria2:DownloadClientAria2": {
            "description": "\u003c!-- subcategory:Download Clients --\u003eDownload Client Aria2 resource.\nFor more information refer to [Download Client](https://wiki.servarr.com/readarr/settings#download-clients) and [Aria2](https://wiki.servarr.com/readarr/supported#aria2).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as readarr from \"@maienm/pulumi-readarr\";\n\nconst example = new readarr.downloadclients.DownloadClientAria2(\"example\", {\n    enable: true,\n    host: \"aria2\",\n    name: \"Example\",\n    port: 6800,\n    priority: 1,\n    rpcPath: \"/aria2/\",\n});\n```\n```python\nimport pulumi\nimport pulumi_readarr as readarr\n\nexample = readarr.download_clients.DownloadClientAria2(\"example\",\n    enable=True,\n    host=\"aria2\",\n    name=\"Example\",\n    port=6800,\n    priority=1,\n    rpc_path=\"/aria2/\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Readarr = MaienM.Readarr;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Readarr.DownloadClients.DownloadClientAria2(\"example\", new()\n    {\n        Enable = true,\n        Host = \"aria2\",\n        Name = \"Example\",\n        Port = 6800,\n        Priority = 1,\n        RpcPath = \"/aria2/\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/MaienM/pulumi-readarr/sdk/v2/go/readarr/DownloadClients\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := DownloadClients.NewDownloadClientAria2(ctx, \"example\", \u0026DownloadClients.DownloadClientAria2Args{\n\t\t\tEnable:   pulumi.Bool(true),\n\t\t\tHost:     pulumi.String(\"aria2\"),\n\t\t\tName:     pulumi.String(\"Example\"),\n\t\t\tPort:     pulumi.Int(6800),\n\t\t\tPriority: pulumi.Int(1),\n\t\t\tRpcPath:  pulumi.String(\"/aria2/\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.readarr.DownloadClients.DownloadClientAria2;\nimport com.pulumi.readarr.DownloadClients.DownloadClientAria2Args;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new DownloadClientAria2(\"example\", DownloadClientAria2Args.builder()        \n            .enable(true)\n            .host(\"aria2\")\n            .name(\"Example\")\n            .port(6800)\n            .priority(1)\n            .rpcPath(\"/aria2/\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: readarr:DownloadClients:DownloadClientAria2\n    properties:\n      enable: true\n      host: aria2\n      name: Example\n      port: 6800\n      priority: 1\n      rpcPath: /aria2/\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nimport using the API/UI ID\n\n```sh\n $ pulumi import readarr:DownloadClients/downloadClientAria2:DownloadClientAria2 example 1\n```\n\n ",
            "properties": {
                "enable": {
                    "type": "boolean",
                    "description": "Enable flag.\n"
                },
                "host": {
                    "type": "string",
                    "description": "host.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Download Client name.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "Port.\n"
                },
                "priority": {
                    "type": "integer",
                    "description": "Priority.\n"
                },
                "rpcPath": {
                    "type": "string",
                    "description": "RPC path.\n"
                },
                "secretToken": {
                    "type": "string",
                    "description": "Secret token.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                },
                "useSsl": {
                    "type": "boolean",
                    "description": "Use SSL flag.\n"
                }
            },
            "required": [
                "enable",
                "host",
                "name",
                "port",
                "priority",
                "rpcPath",
                "secretToken",
                "tags",
                "useSsl"
            ],
            "inputProperties": {
                "enable": {
                    "type": "boolean",
                    "description": "Enable flag.\n"
                },
                "host": {
                    "type": "string",
                    "description": "host.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Download Client name.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "Port.\n"
                },
                "priority": {
                    "type": "integer",
                    "description": "Priority.\n"
                },
                "rpcPath": {
                    "type": "string",
                    "description": "RPC path.\n"
                },
                "secretToken": {
                    "type": "string",
                    "description": "Secret token.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                },
                "useSsl": {
                    "type": "boolean",
                    "description": "Use SSL flag.\n"
                }
            },
            "requiredInputs": [
                "name"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DownloadClientAria2 resources.\n",
                "properties": {
                    "enable": {
                        "type": "boolean",
                        "description": "Enable flag.\n"
                    },
                    "host": {
                        "type": "string",
                        "description": "host.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Download Client name.\n"
                    },
                    "port": {
                        "type": "integer",
                        "description": "Port.\n"
                    },
                    "priority": {
                        "type": "integer",
                        "description": "Priority.\n"
                    },
                    "rpcPath": {
                        "type": "string",
                        "description": "RPC path.\n"
                    },
                    "secretToken": {
                        "type": "string",
                        "description": "Secret token.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "List of associated tags.\n"
                    },
                    "useSsl": {
                        "type": "boolean",
                        "description": "Use SSL flag.\n"
                    }
                },
                "type": "object"
            }
        },
        "readarr:DownloadClients/downloadClientConfig:DownloadClientConfig": {
            "description": "\u003c!-- subcategory:Download Clients --\u003eDownload Client Config resource.\nFor more information refer to [Download Client](https://wiki.servarr.com/readarr/settings#completed-download-handling) documentation.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as readarr from \"@maienm/pulumi-readarr\";\n\nconst example = new readarr.downloadclients.DownloadClientConfig(\"example\", {\n    autoRedownloadFailed: false,\n    enableCompletedDownloadHandling: true,\n    removeCompletedDownloads: false,\n    removeFailedDownloads: false,\n});\n```\n```python\nimport pulumi\nimport pulumi_readarr as readarr\n\nexample = readarr.download_clients.DownloadClientConfig(\"example\",\n    auto_redownload_failed=False,\n    enable_completed_download_handling=True,\n    remove_completed_downloads=False,\n    remove_failed_downloads=False)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Readarr = MaienM.Readarr;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Readarr.DownloadClients.DownloadClientConfig(\"example\", new()\n    {\n        AutoRedownloadFailed = false,\n        EnableCompletedDownloadHandling = true,\n        RemoveCompletedDownloads = false,\n        RemoveFailedDownloads = false,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/MaienM/pulumi-readarr/sdk/v2/go/readarr/DownloadClients\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := DownloadClients.NewDownloadClientConfig(ctx, \"example\", \u0026DownloadClients.DownloadClientConfigArgs{\n\t\t\tAutoRedownloadFailed:            pulumi.Bool(false),\n\t\t\tEnableCompletedDownloadHandling: pulumi.Bool(true),\n\t\t\tRemoveCompletedDownloads:        pulumi.Bool(false),\n\t\t\tRemoveFailedDownloads:           pulumi.Bool(false),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.readarr.DownloadClients.DownloadClientConfig;\nimport com.pulumi.readarr.DownloadClients.DownloadClientConfigArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new DownloadClientConfig(\"example\", DownloadClientConfigArgs.builder()        \n            .autoRedownloadFailed(false)\n            .enableCompletedDownloadHandling(true)\n            .removeCompletedDownloads(false)\n            .removeFailedDownloads(false)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: readarr:DownloadClients:DownloadClientConfig\n    properties:\n      autoRedownloadFailed: false\n      enableCompletedDownloadHandling: true\n      removeCompletedDownloads: false\n      removeFailedDownloads: false\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nimport does not need parameters\n\n```sh\n $ pulumi import readarr:DownloadClients/downloadClientConfig:DownloadClientConfig example\n```\n\n ",
            "properties": {
                "autoRedownloadFailed": {
                    "type": "boolean",
                    "description": "Auto Redownload Failed flag.\n"
                },
                "downloadClientWorkingFolders": {
                    "type": "string",
                    "description": "Download Client Working Folders.\n"
                },
                "enableCompletedDownloadHandling": {
                    "type": "boolean",
                    "description": "Enable Completed Download Handling flag.\n"
                },
                "removeCompletedDownloads": {
                    "type": "boolean",
                    "description": "Remove completed downloads flag.\n"
                },
                "removeFailedDownloads": {
                    "type": "boolean",
                    "description": "Remove failed downloads flag.\n"
                }
            },
            "required": [
                "autoRedownloadFailed",
                "downloadClientWorkingFolders",
                "enableCompletedDownloadHandling",
                "removeCompletedDownloads",
                "removeFailedDownloads"
            ],
            "inputProperties": {
                "autoRedownloadFailed": {
                    "type": "boolean",
                    "description": "Auto Redownload Failed flag.\n"
                },
                "enableCompletedDownloadHandling": {
                    "type": "boolean",
                    "description": "Enable Completed Download Handling flag.\n"
                },
                "removeCompletedDownloads": {
                    "type": "boolean",
                    "description": "Remove completed downloads flag.\n"
                },
                "removeFailedDownloads": {
                    "type": "boolean",
                    "description": "Remove failed downloads flag.\n"
                }
            },
            "requiredInputs": [
                "autoRedownloadFailed",
                "enableCompletedDownloadHandling",
                "removeCompletedDownloads",
                "removeFailedDownloads"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DownloadClientConfig resources.\n",
                "properties": {
                    "autoRedownloadFailed": {
                        "type": "boolean",
                        "description": "Auto Redownload Failed flag.\n"
                    },
                    "downloadClientWorkingFolders": {
                        "type": "string",
                        "description": "Download Client Working Folders.\n"
                    },
                    "enableCompletedDownloadHandling": {
                        "type": "boolean",
                        "description": "Enable Completed Download Handling flag.\n"
                    },
                    "removeCompletedDownloads": {
                        "type": "boolean",
                        "description": "Remove completed downloads flag.\n"
                    },
                    "removeFailedDownloads": {
                        "type": "boolean",
                        "description": "Remove failed downloads flag.\n"
                    }
                },
                "type": "object"
            }
        },
        "readarr:DownloadClients/downloadClientDeluge:DownloadClientDeluge": {
            "description": "\u003c!-- subcategory:Download Clients --\u003eDownload Client Deluge resource.\nFor more information refer to [Download Client](https://wiki.servarr.com/readarr/settings#download-clients) and [Deluge](https://wiki.servarr.com/readarr/supported#deluge).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as readarr from \"@maienm/pulumi-readarr\";\n\nconst example = new readarr.downloadclients.DownloadClientDeluge(\"example\", {\n    enable: true,\n    host: \"deluge\",\n    name: \"Example\",\n    port: 9091,\n    priority: 1,\n    urlBase: \"/deluge/\",\n});\n```\n```python\nimport pulumi\nimport pulumi_readarr as readarr\n\nexample = readarr.download_clients.DownloadClientDeluge(\"example\",\n    enable=True,\n    host=\"deluge\",\n    name=\"Example\",\n    port=9091,\n    priority=1,\n    url_base=\"/deluge/\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Readarr = MaienM.Readarr;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Readarr.DownloadClients.DownloadClientDeluge(\"example\", new()\n    {\n        Enable = true,\n        Host = \"deluge\",\n        Name = \"Example\",\n        Port = 9091,\n        Priority = 1,\n        UrlBase = \"/deluge/\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/MaienM/pulumi-readarr/sdk/v2/go/readarr/DownloadClients\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := DownloadClients.NewDownloadClientDeluge(ctx, \"example\", \u0026DownloadClients.DownloadClientDelugeArgs{\n\t\t\tEnable:   pulumi.Bool(true),\n\t\t\tHost:     pulumi.String(\"deluge\"),\n\t\t\tName:     pulumi.String(\"Example\"),\n\t\t\tPort:     pulumi.Int(9091),\n\t\t\tPriority: pulumi.Int(1),\n\t\t\tUrlBase:  pulumi.String(\"/deluge/\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.readarr.DownloadClients.DownloadClientDeluge;\nimport com.pulumi.readarr.DownloadClients.DownloadClientDelugeArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new DownloadClientDeluge(\"example\", DownloadClientDelugeArgs.builder()        \n            .enable(true)\n            .host(\"deluge\")\n            .name(\"Example\")\n            .port(9091)\n            .priority(1)\n            .urlBase(\"/deluge/\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: readarr:DownloadClients:DownloadClientDeluge\n    properties:\n      enable: true\n      host: deluge\n      name: Example\n      port: 9091\n      priority: 1\n      urlBase: /deluge/\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nimport using the API/UI ID\n\n```sh\n $ pulumi import readarr:DownloadClients/downloadClientDeluge:DownloadClientDeluge example 1\n```\n\n ",
            "properties": {
                "addPaused": {
                    "type": "boolean",
                    "description": "Add paused flag.\n"
                },
                "bookCategory": {
                    "type": "string",
                    "description": "Book category.\n"
                },
                "bookImportedCategory": {
                    "type": "string",
                    "description": "Book imported category.\n"
                },
                "enable": {
                    "type": "boolean",
                    "description": "Enable flag.\n"
                },
                "host": {
                    "type": "string",
                    "description": "host.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Download Client name.\n"
                },
                "olderBookPriority": {
                    "type": "integer",
                    "description": "Older Music priority. `0` Last, `1` First.\n"
                },
                "password": {
                    "type": "string",
                    "description": "Password.\n",
                    "secret": true
                },
                "port": {
                    "type": "integer",
                    "description": "Port.\n"
                },
                "priority": {
                    "type": "integer",
                    "description": "Priority.\n"
                },
                "recentBookPriority": {
                    "type": "integer",
                    "description": "Recent Music priority. `0` Last, `1` First.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                },
                "urlBase": {
                    "type": "string",
                    "description": "Base URL.\n"
                },
                "useSsl": {
                    "type": "boolean",
                    "description": "Use SSL flag.\n"
                }
            },
            "required": [
                "addPaused",
                "bookCategory",
                "bookImportedCategory",
                "enable",
                "host",
                "name",
                "olderBookPriority",
                "password",
                "port",
                "priority",
                "recentBookPriority",
                "tags",
                "urlBase",
                "useSsl"
            ],
            "inputProperties": {
                "addPaused": {
                    "type": "boolean",
                    "description": "Add paused flag.\n"
                },
                "bookCategory": {
                    "type": "string",
                    "description": "Book category.\n"
                },
                "bookImportedCategory": {
                    "type": "string",
                    "description": "Book imported category.\n"
                },
                "enable": {
                    "type": "boolean",
                    "description": "Enable flag.\n"
                },
                "host": {
                    "type": "string",
                    "description": "host.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Download Client name.\n"
                },
                "olderBookPriority": {
                    "type": "integer",
                    "description": "Older Music priority. `0` Last, `1` First.\n"
                },
                "password": {
                    "type": "string",
                    "description": "Password.\n",
                    "secret": true
                },
                "port": {
                    "type": "integer",
                    "description": "Port.\n"
                },
                "priority": {
                    "type": "integer",
                    "description": "Priority.\n"
                },
                "recentBookPriority": {
                    "type": "integer",
                    "description": "Recent Music priority. `0` Last, `1` First.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                },
                "urlBase": {
                    "type": "string",
                    "description": "Base URL.\n"
                },
                "useSsl": {
                    "type": "boolean",
                    "description": "Use SSL flag.\n"
                }
            },
            "requiredInputs": [
                "name"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DownloadClientDeluge resources.\n",
                "properties": {
                    "addPaused": {
                        "type": "boolean",
                        "description": "Add paused flag.\n"
                    },
                    "bookCategory": {
                        "type": "string",
                        "description": "Book category.\n"
                    },
                    "bookImportedCategory": {
                        "type": "string",
                        "description": "Book imported category.\n"
                    },
                    "enable": {
                        "type": "boolean",
                        "description": "Enable flag.\n"
                    },
                    "host": {
                        "type": "string",
                        "description": "host.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Download Client name.\n"
                    },
                    "olderBookPriority": {
                        "type": "integer",
                        "description": "Older Music priority. `0` Last, `1` First.\n"
                    },
                    "password": {
                        "type": "string",
                        "description": "Password.\n",
                        "secret": true
                    },
                    "port": {
                        "type": "integer",
                        "description": "Port.\n"
                    },
                    "priority": {
                        "type": "integer",
                        "description": "Priority.\n"
                    },
                    "recentBookPriority": {
                        "type": "integer",
                        "description": "Recent Music priority. `0` Last, `1` First.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "List of associated tags.\n"
                    },
                    "urlBase": {
                        "type": "string",
                        "description": "Base URL.\n"
                    },
                    "useSsl": {
                        "type": "boolean",
                        "description": "Use SSL flag.\n"
                    }
                },
                "type": "object"
            }
        },
        "readarr:DownloadClients/downloadClientFlood:DownloadClientFlood": {
            "description": "\u003c!-- subcategory:Download Clients --\u003eDownload Client Flood resource.\nFor more information refer to [Download Client](https://wiki.servarr.com/readarr/settings#download-clients) and [Flood](https://wiki.servarr.com/readarr/supported#flood).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as readarr from \"@maienm/pulumi-readarr\";\n\nconst example = new readarr.downloadclients.DownloadClientFlood(\"example\", {\n    addPaused: true,\n    additionalTags: [\n        0,\n        1,\n    ],\n    enable: true,\n    fieldTags: [\"readarr\"],\n    host: \"flood\",\n    name: \"Example\",\n    port: 9091,\n    priority: 1,\n    urlBase: \"/flood/\",\n});\n```\n```python\nimport pulumi\nimport pulumi_readarr as readarr\n\nexample = readarr.download_clients.DownloadClientFlood(\"example\",\n    add_paused=True,\n    additional_tags=[\n        0,\n        1,\n    ],\n    enable=True,\n    field_tags=[\"readarr\"],\n    host=\"flood\",\n    name=\"Example\",\n    port=9091,\n    priority=1,\n    url_base=\"/flood/\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Readarr = MaienM.Readarr;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Readarr.DownloadClients.DownloadClientFlood(\"example\", new()\n    {\n        AddPaused = true,\n        AdditionalTags = new[]\n        {\n            0,\n            1,\n        },\n        Enable = true,\n        FieldTags = new[]\n        {\n            \"readarr\",\n        },\n        Host = \"flood\",\n        Name = \"Example\",\n        Port = 9091,\n        Priority = 1,\n        UrlBase = \"/flood/\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/MaienM/pulumi-readarr/sdk/v2/go/readarr/DownloadClients\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := DownloadClients.NewDownloadClientFlood(ctx, \"example\", \u0026DownloadClients.DownloadClientFloodArgs{\n\t\t\tAddPaused: pulumi.Bool(true),\n\t\t\tAdditionalTags: pulumi.IntArray{\n\t\t\t\tpulumi.Int(0),\n\t\t\t\tpulumi.Int(1),\n\t\t\t},\n\t\t\tEnable: pulumi.Bool(true),\n\t\t\tFieldTags: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"readarr\"),\n\t\t\t},\n\t\t\tHost:     pulumi.String(\"flood\"),\n\t\t\tName:     pulumi.String(\"Example\"),\n\t\t\tPort:     pulumi.Int(9091),\n\t\t\tPriority: pulumi.Int(1),\n\t\t\tUrlBase:  pulumi.String(\"/flood/\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.readarr.DownloadClients.DownloadClientFlood;\nimport com.pulumi.readarr.DownloadClients.DownloadClientFloodArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new DownloadClientFlood(\"example\", DownloadClientFloodArgs.builder()        \n            .addPaused(true)\n            .additionalTags(            \n                0,\n                1)\n            .enable(true)\n            .fieldTags(\"readarr\")\n            .host(\"flood\")\n            .name(\"Example\")\n            .port(9091)\n            .priority(1)\n            .urlBase(\"/flood/\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: readarr:DownloadClients:DownloadClientFlood\n    properties:\n      addPaused: true\n      additionalTags:\n        - 0\n        - 1\n      enable: true\n      fieldTags:\n        - readarr\n      host: flood\n      name: Example\n      port: 9091\n      priority: 1\n      urlBase: /flood/\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nimport using the API/UI ID\n\n```sh\n $ pulumi import readarr:DownloadClients/downloadClientFlood:DownloadClientFlood example 1\n```\n\n ",
            "properties": {
                "addPaused": {
                    "type": "boolean",
                    "description": "Add paused flag.\n"
                },
                "additionalTags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "Additional tags, `0` Author, `1` Quality, `2` ReleaseGroup, `3` Year, `4` Indexer.\n"
                },
                "destination": {
                    "type": "string",
                    "description": "Destination.\n"
                },
                "enable": {
                    "type": "boolean",
                    "description": "Enable flag.\n"
                },
                "fieldTags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Field tags.\n"
                },
                "host": {
                    "type": "string",
                    "description": "host.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Download Client name.\n"
                },
                "password": {
                    "type": "string",
                    "description": "Password.\n",
                    "secret": true
                },
                "port": {
                    "type": "integer",
                    "description": "Port.\n"
                },
                "postImportTags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Post import tags.\n"
                },
                "priority": {
                    "type": "integer",
                    "description": "Priority.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                },
                "urlBase": {
                    "type": "string",
                    "description": "Base URL.\n"
                },
                "useSsl": {
                    "type": "boolean",
                    "description": "Use SSL flag.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username.\n"
                }
            },
            "required": [
                "addPaused",
                "additionalTags",
                "destination",
                "enable",
                "fieldTags",
                "host",
                "name",
                "password",
                "port",
                "postImportTags",
                "priority",
                "tags",
                "urlBase",
                "useSsl",
                "username"
            ],
            "inputProperties": {
                "addPaused": {
                    "type": "boolean",
                    "description": "Add paused flag.\n"
                },
                "additionalTags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "Additional tags, `0` Author, `1` Quality, `2` ReleaseGroup, `3` Year, `4` Indexer.\n"
                },
                "destination": {
                    "type": "string",
                    "description": "Destination.\n"
                },
                "enable": {
                    "type": "boolean",
                    "description": "Enable flag.\n"
                },
                "fieldTags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Field tags.\n"
                },
                "host": {
                    "type": "string",
                    "description": "host.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Download Client name.\n"
                },
                "password": {
                    "type": "string",
                    "description": "Password.\n",
                    "secret": true
                },
                "port": {
                    "type": "integer",
                    "description": "Port.\n"
                },
                "postImportTags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Post import tags.\n"
                },
                "priority": {
                    "type": "integer",
                    "description": "Priority.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                },
                "urlBase": {
                    "type": "string",
                    "description": "Base URL.\n"
                },
                "useSsl": {
                    "type": "boolean",
                    "description": "Use SSL flag.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username.\n"
                }
            },
            "requiredInputs": [
                "name"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DownloadClientFlood resources.\n",
                "properties": {
                    "addPaused": {
                        "type": "boolean",
                        "description": "Add paused flag.\n"
                    },
                    "additionalTags": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "Additional tags, `0` Author, `1` Quality, `2` ReleaseGroup, `3` Year, `4` Indexer.\n"
                    },
                    "destination": {
                        "type": "string",
                        "description": "Destination.\n"
                    },
                    "enable": {
                        "type": "boolean",
                        "description": "Enable flag.\n"
                    },
                    "fieldTags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Field tags.\n"
                    },
                    "host": {
                        "type": "string",
                        "description": "host.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Download Client name.\n"
                    },
                    "password": {
                        "type": "string",
                        "description": "Password.\n",
                        "secret": true
                    },
                    "port": {
                        "type": "integer",
                        "description": "Port.\n"
                    },
                    "postImportTags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Post import tags.\n"
                    },
                    "priority": {
                        "type": "integer",
                        "description": "Priority.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "List of associated tags.\n"
                    },
                    "urlBase": {
                        "type": "string",
                        "description": "Base URL.\n"
                    },
                    "useSsl": {
                        "type": "boolean",
                        "description": "Use SSL flag.\n"
                    },
                    "username": {
                        "type": "string",
                        "description": "Username.\n"
                    }
                },
                "type": "object"
            }
        },
        "readarr:DownloadClients/downloadClientHadouken:DownloadClientHadouken": {
            "description": "\u003c!-- subcategory:Download Clients --\u003eDownload Client Hadouken resource.\nFor more information refer to [Download Client](https://wiki.servarr.com/readarr/settings#download-clients) and [Hadouken](https://wiki.servarr.com/readarr/supported#hadouken).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as readarr from \"@maienm/pulumi-readarr\";\n\nconst example = new readarr.downloadclients.DownloadClientHadouken(\"example\", {\n    enable: true,\n    host: \"hadouken\",\n    name: \"Example\",\n    password: \"password\",\n    port: 9091,\n    priority: 1,\n    urlBase: \"/hadouken/\",\n    username: \"username\",\n});\n```\n```python\nimport pulumi\nimport pulumi_readarr as readarr\n\nexample = readarr.download_clients.DownloadClientHadouken(\"example\",\n    enable=True,\n    host=\"hadouken\",\n    name=\"Example\",\n    password=\"password\",\n    port=9091,\n    priority=1,\n    url_base=\"/hadouken/\",\n    username=\"username\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Readarr = MaienM.Readarr;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Readarr.DownloadClients.DownloadClientHadouken(\"example\", new()\n    {\n        Enable = true,\n        Host = \"hadouken\",\n        Name = \"Example\",\n        Password = \"password\",\n        Port = 9091,\n        Priority = 1,\n        UrlBase = \"/hadouken/\",\n        Username = \"username\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/MaienM/pulumi-readarr/sdk/v2/go/readarr/DownloadClients\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := DownloadClients.NewDownloadClientHadouken(ctx, \"example\", \u0026DownloadClients.DownloadClientHadoukenArgs{\n\t\t\tEnable:   pulumi.Bool(true),\n\t\t\tHost:     pulumi.String(\"hadouken\"),\n\t\t\tName:     pulumi.String(\"Example\"),\n\t\t\tPassword: pulumi.String(\"password\"),\n\t\t\tPort:     pulumi.Int(9091),\n\t\t\tPriority: pulumi.Int(1),\n\t\t\tUrlBase:  pulumi.String(\"/hadouken/\"),\n\t\t\tUsername: pulumi.String(\"username\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.readarr.DownloadClients.DownloadClientHadouken;\nimport com.pulumi.readarr.DownloadClients.DownloadClientHadoukenArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new DownloadClientHadouken(\"example\", DownloadClientHadoukenArgs.builder()        \n            .enable(true)\n            .host(\"hadouken\")\n            .name(\"Example\")\n            .password(\"password\")\n            .port(9091)\n            .priority(1)\n            .urlBase(\"/hadouken/\")\n            .username(\"username\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: readarr:DownloadClients:DownloadClientHadouken\n    properties:\n      enable: true\n      host: hadouken\n      name: Example\n      password: password\n      port: 9091\n      priority: 1\n      urlBase: /hadouken/\n      username: username\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nimport using the API/UI ID\n\n```sh\n $ pulumi import readarr:DownloadClients/downloadClientHadouken:DownloadClientHadouken example 1\n```\n\n ",
            "properties": {
                "category": {
                    "type": "string",
                    "description": "Category.\n"
                },
                "enable": {
                    "type": "boolean",
                    "description": "Enable flag.\n"
                },
                "host": {
                    "type": "string",
                    "description": "host.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Download Client name.\n"
                },
                "password": {
                    "type": "string",
                    "description": "Password.\n",
                    "secret": true
                },
                "port": {
                    "type": "integer",
                    "description": "Port.\n"
                },
                "priority": {
                    "type": "integer",
                    "description": "Priority.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                },
                "urlBase": {
                    "type": "string",
                    "description": "Base URL.\n"
                },
                "useSsl": {
                    "type": "boolean",
                    "description": "Use SSL flag.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username.\n"
                }
            },
            "required": [
                "category",
                "enable",
                "host",
                "name",
                "password",
                "port",
                "priority",
                "tags",
                "urlBase",
                "useSsl",
                "username"
            ],
            "inputProperties": {
                "category": {
                    "type": "string",
                    "description": "Category.\n"
                },
                "enable": {
                    "type": "boolean",
                    "description": "Enable flag.\n"
                },
                "host": {
                    "type": "string",
                    "description": "host.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Download Client name.\n"
                },
                "password": {
                    "type": "string",
                    "description": "Password.\n",
                    "secret": true
                },
                "port": {
                    "type": "integer",
                    "description": "Port.\n"
                },
                "priority": {
                    "type": "integer",
                    "description": "Priority.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                },
                "urlBase": {
                    "type": "string",
                    "description": "Base URL.\n"
                },
                "useSsl": {
                    "type": "boolean",
                    "description": "Use SSL flag.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username.\n"
                }
            },
            "requiredInputs": [
                "name",
                "password",
                "username"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DownloadClientHadouken resources.\n",
                "properties": {
                    "category": {
                        "type": "string",
                        "description": "Category.\n"
                    },
                    "enable": {
                        "type": "boolean",
                        "description": "Enable flag.\n"
                    },
                    "host": {
                        "type": "string",
                        "description": "host.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Download Client name.\n"
                    },
                    "password": {
                        "type": "string",
                        "description": "Password.\n",
                        "secret": true
                    },
                    "port": {
                        "type": "integer",
                        "description": "Port.\n"
                    },
                    "priority": {
                        "type": "integer",
                        "description": "Priority.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "List of associated tags.\n"
                    },
                    "urlBase": {
                        "type": "string",
                        "description": "Base URL.\n"
                    },
                    "useSsl": {
                        "type": "boolean",
                        "description": "Use SSL flag.\n"
                    },
                    "username": {
                        "type": "string",
                        "description": "Username.\n"
                    }
                },
                "type": "object"
            }
        },
        "readarr:DownloadClients/downloadClientNzbget:DownloadClientNzbget": {
            "description": "\u003c!-- subcategory:Download Clients --\u003eDownload Client NZBGet resource.\nFor more information refer to [Download Client](https://wiki.servarr.com/readarr/settings#download-clients) and [NZBGet](https://wiki.servarr.com/readarr/supported#nzbget).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as readarr from \"@maienm/pulumi-readarr\";\n\nconst example = new readarr.downloadclients.DownloadClientNzbget(\"example\", {\n    enable: true,\n    host: \"nzbget\",\n    name: \"Example\",\n    port: 6789,\n    priority: 1,\n    urlBase: \"/nzbget/\",\n});\n```\n```python\nimport pulumi\nimport pulumi_readarr as readarr\n\nexample = readarr.download_clients.DownloadClientNzbget(\"example\",\n    enable=True,\n    host=\"nzbget\",\n    name=\"Example\",\n    port=6789,\n    priority=1,\n    url_base=\"/nzbget/\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Readarr = MaienM.Readarr;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Readarr.DownloadClients.DownloadClientNzbget(\"example\", new()\n    {\n        Enable = true,\n        Host = \"nzbget\",\n        Name = \"Example\",\n        Port = 6789,\n        Priority = 1,\n        UrlBase = \"/nzbget/\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/MaienM/pulumi-readarr/sdk/v2/go/readarr/DownloadClients\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := DownloadClients.NewDownloadClientNzbget(ctx, \"example\", \u0026DownloadClients.DownloadClientNzbgetArgs{\n\t\t\tEnable:   pulumi.Bool(true),\n\t\t\tHost:     pulumi.String(\"nzbget\"),\n\t\t\tName:     pulumi.String(\"Example\"),\n\t\t\tPort:     pulumi.Int(6789),\n\t\t\tPriority: pulumi.Int(1),\n\t\t\tUrlBase:  pulumi.String(\"/nzbget/\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.readarr.DownloadClients.DownloadClientNzbget;\nimport com.pulumi.readarr.DownloadClients.DownloadClientNzbgetArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new DownloadClientNzbget(\"example\", DownloadClientNzbgetArgs.builder()        \n            .enable(true)\n            .host(\"nzbget\")\n            .name(\"Example\")\n            .port(6789)\n            .priority(1)\n            .urlBase(\"/nzbget/\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: readarr:DownloadClients:DownloadClientNzbget\n    properties:\n      enable: true\n      host: nzbget\n      name: Example\n      port: 6789\n      priority: 1\n      urlBase: /nzbget/\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nimport using the API/UI ID\n\n```sh\n $ pulumi import readarr:DownloadClients/downloadClientNzbget:DownloadClientNzbget example 1\n```\n\n ",
            "properties": {
                "addPaused": {
                    "type": "boolean",
                    "description": "Add paused flag.\n"
                },
                "bookCategory": {
                    "type": "string",
                    "description": "Book category.\n"
                },
                "enable": {
                    "type": "boolean",
                    "description": "Enable flag.\n"
                },
                "host": {
                    "type": "string",
                    "description": "host.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Download Client name.\n"
                },
                "olderBookPriority": {
                    "type": "integer",
                    "description": "Older Music priority. `-100` VeryLow, `-50` Low, `0` Normal, `50` High, `100` VeryHigh, `900` Force.\n"
                },
                "password": {
                    "type": "string",
                    "description": "Password.\n",
                    "secret": true
                },
                "port": {
                    "type": "integer",
                    "description": "Port.\n"
                },
                "priority": {
                    "type": "integer",
                    "description": "Priority.\n"
                },
                "recentBookPriority": {
                    "type": "integer",
                    "description": "Recent Music priority. `-100` VeryLow, `-50` Low, `0` Normal, `50` High, `100` VeryHigh, `900` Force.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                },
                "urlBase": {
                    "type": "string",
                    "description": "Base URL.\n"
                },
                "useSsl": {
                    "type": "boolean",
                    "description": "Use SSL flag.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username.\n"
                }
            },
            "required": [
                "addPaused",
                "bookCategory",
                "enable",
                "host",
                "name",
                "olderBookPriority",
                "password",
                "port",
                "priority",
                "recentBookPriority",
                "tags",
                "urlBase",
                "useSsl",
                "username"
            ],
            "inputProperties": {
                "addPaused": {
                    "type": "boolean",
                    "description": "Add paused flag.\n"
                },
                "bookCategory": {
                    "type": "string",
                    "description": "Book category.\n"
                },
                "enable": {
                    "type": "boolean",
                    "description": "Enable flag.\n"
                },
                "host": {
                    "type": "string",
                    "description": "host.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Download Client name.\n"
                },
                "olderBookPriority": {
                    "type": "integer",
                    "description": "Older Music priority. `-100` VeryLow, `-50` Low, `0` Normal, `50` High, `100` VeryHigh, `900` Force.\n"
                },
                "password": {
                    "type": "string",
                    "description": "Password.\n",
                    "secret": true
                },
                "port": {
                    "type": "integer",
                    "description": "Port.\n"
                },
                "priority": {
                    "type": "integer",
                    "description": "Priority.\n"
                },
                "recentBookPriority": {
                    "type": "integer",
                    "description": "Recent Music priority. `-100` VeryLow, `-50` Low, `0` Normal, `50` High, `100` VeryHigh, `900` Force.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                },
                "urlBase": {
                    "type": "string",
                    "description": "Base URL.\n"
                },
                "useSsl": {
                    "type": "boolean",
                    "description": "Use SSL flag.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username.\n"
                }
            },
            "requiredInputs": [
                "name"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DownloadClientNzbget resources.\n",
                "properties": {
                    "addPaused": {
                        "type": "boolean",
                        "description": "Add paused flag.\n"
                    },
                    "bookCategory": {
                        "type": "string",
                        "description": "Book category.\n"
                    },
                    "enable": {
                        "type": "boolean",
                        "description": "Enable flag.\n"
                    },
                    "host": {
                        "type": "string",
                        "description": "host.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Download Client name.\n"
                    },
                    "olderBookPriority": {
                        "type": "integer",
                        "description": "Older Music priority. `-100` VeryLow, `-50` Low, `0` Normal, `50` High, `100` VeryHigh, `900` Force.\n"
                    },
                    "password": {
                        "type": "string",
                        "description": "Password.\n",
                        "secret": true
                    },
                    "port": {
                        "type": "integer",
                        "description": "Port.\n"
                    },
                    "priority": {
                        "type": "integer",
                        "description": "Priority.\n"
                    },
                    "recentBookPriority": {
                        "type": "integer",
                        "description": "Recent Music priority. `-100` VeryLow, `-50` Low, `0` Normal, `50` High, `100` VeryHigh, `900` Force.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "List of associated tags.\n"
                    },
                    "urlBase": {
                        "type": "string",
                        "description": "Base URL.\n"
                    },
                    "useSsl": {
                        "type": "boolean",
                        "description": "Use SSL flag.\n"
                    },
                    "username": {
                        "type": "string",
                        "description": "Username.\n"
                    }
                },
                "type": "object"
            }
        },
        "readarr:DownloadClients/downloadClientNzbvortex:DownloadClientNzbvortex": {
            "description": "\u003c!-- subcategory:Download Clients --\u003eDownload Client Nzbvortex resource.\nFor more information refer to [Download Client](https://wiki.servarr.com/readarr/settings#download-clients) and [Nzbvortex](https://wiki.servarr.com/readarr/supported#nzbvortex).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as readarr from \"@maienm/pulumi-readarr\";\n\nconst example = new readarr.downloadclients.DownloadClientNzbvortex(\"example\", {\n    enable: true,\n    host: \"nzbvortex\",\n    name: \"Example\",\n    port: 6789,\n    priority: 1,\n    urlBase: \"/nzbvortex/\",\n});\n```\n```python\nimport pulumi\nimport pulumi_readarr as readarr\n\nexample = readarr.download_clients.DownloadClientNzbvortex(\"example\",\n    enable=True,\n    host=\"nzbvortex\",\n    name=\"Example\",\n    port=6789,\n    priority=1,\n    url_base=\"/nzbvortex/\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Readarr = MaienM.Readarr;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Readarr.DownloadClients.DownloadClientNzbvortex(\"example\", new()\n    {\n        Enable = true,\n        Host = \"nzbvortex\",\n        Name = \"Example\",\n        Port = 6789,\n        Priority = 1,\n        UrlBase = \"/nzbvortex/\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/MaienM/pulumi-readarr/sdk/v2/go/readarr/DownloadClients\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := DownloadClients.NewDownloadClientNzbvortex(ctx, \"example\", \u0026DownloadClients.DownloadClientNzbvortexArgs{\n\t\t\tEnable:   pulumi.Bool(true),\n\t\t\tHost:     pulumi.String(\"nzbvortex\"),\n\t\t\tName:     pulumi.String(\"Example\"),\n\t\t\tPort:     pulumi.Int(6789),\n\t\t\tPriority: pulumi.Int(1),\n\t\t\tUrlBase:  pulumi.String(\"/nzbvortex/\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.readarr.DownloadClients.DownloadClientNzbvortex;\nimport com.pulumi.readarr.DownloadClients.DownloadClientNzbvortexArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new DownloadClientNzbvortex(\"example\", DownloadClientNzbvortexArgs.builder()        \n            .enable(true)\n            .host(\"nzbvortex\")\n            .name(\"Example\")\n            .port(6789)\n            .priority(1)\n            .urlBase(\"/nzbvortex/\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: readarr:DownloadClients:DownloadClientNzbvortex\n    properties:\n      enable: true\n      host: nzbvortex\n      name: Example\n      port: 6789\n      priority: 1\n      urlBase: /nzbvortex/\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nimport using the API/UI ID\n\n```sh\n $ pulumi import readarr:DownloadClients/downloadClientNzbvortex:DownloadClientNzbvortex example 1\n```\n\n ",
            "properties": {
                "apiKey": {
                    "type": "string",
                    "description": "API key.\n"
                },
                "bookCategory": {
                    "type": "string",
                    "description": "Book category.\n"
                },
                "enable": {
                    "type": "boolean",
                    "description": "Enable flag.\n"
                },
                "host": {
                    "type": "string",
                    "description": "host.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Download Client name.\n"
                },
                "olderBookPriority": {
                    "type": "integer",
                    "description": "Older Music priority. `-1` Low, `0` Normal, `1` High.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "Port.\n"
                },
                "priority": {
                    "type": "integer",
                    "description": "Priority.\n"
                },
                "recentBookPriority": {
                    "type": "integer",
                    "description": "Recent Music priority. `-1` Low, `0` Normal, `1` High.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                },
                "urlBase": {
                    "type": "string",
                    "description": "Base URL.\n"
                }
            },
            "required": [
                "apiKey",
                "bookCategory",
                "enable",
                "host",
                "name",
                "olderBookPriority",
                "port",
                "priority",
                "recentBookPriority",
                "tags",
                "urlBase"
            ],
            "inputProperties": {
                "apiKey": {
                    "type": "string",
                    "description": "API key.\n"
                },
                "bookCategory": {
                    "type": "string",
                    "description": "Book category.\n"
                },
                "enable": {
                    "type": "boolean",
                    "description": "Enable flag.\n"
                },
                "host": {
                    "type": "string",
                    "description": "host.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Download Client name.\n"
                },
                "olderBookPriority": {
                    "type": "integer",
                    "description": "Older Music priority. `-1` Low, `0` Normal, `1` High.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "Port.\n"
                },
                "priority": {
                    "type": "integer",
                    "description": "Priority.\n"
                },
                "recentBookPriority": {
                    "type": "integer",
                    "description": "Recent Music priority. `-1` Low, `0` Normal, `1` High.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                },
                "urlBase": {
                    "type": "string",
                    "description": "Base URL.\n"
                }
            },
            "requiredInputs": [
                "apiKey",
                "name"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DownloadClientNzbvortex resources.\n",
                "properties": {
                    "apiKey": {
                        "type": "string",
                        "description": "API key.\n"
                    },
                    "bookCategory": {
                        "type": "string",
                        "description": "Book category.\n"
                    },
                    "enable": {
                        "type": "boolean",
                        "description": "Enable flag.\n"
                    },
                    "host": {
                        "type": "string",
                        "description": "host.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Download Client name.\n"
                    },
                    "olderBookPriority": {
                        "type": "integer",
                        "description": "Older Music priority. `-1` Low, `0` Normal, `1` High.\n"
                    },
                    "port": {
                        "type": "integer",
                        "description": "Port.\n"
                    },
                    "priority": {
                        "type": "integer",
                        "description": "Priority.\n"
                    },
                    "recentBookPriority": {
                        "type": "integer",
                        "description": "Recent Music priority. `-1` Low, `0` Normal, `1` High.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "List of associated tags.\n"
                    },
                    "urlBase": {
                        "type": "string",
                        "description": "Base URL.\n"
                    }
                },
                "type": "object"
            }
        },
        "readarr:DownloadClients/downloadClientPneumatic:DownloadClientPneumatic": {
            "description": "\u003c!-- subcategory:Download Clients --\u003eDownload Client Pneumatic resource.\nFor more information refer to [Download Client](https://wiki.servarr.com/readarr/settings#download-clients) and [Pneumatic](https://wiki.servarr.com/readarr/supported#pneumatic).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as readarr from \"@maienm/pulumi-readarr\";\n\nconst example = new readarr.downloadclients.DownloadClientPneumatic(\"example\", {\n    enable: true,\n    name: \"Example\",\n    nzbFolder: \"/nzb/\",\n    priority: 1,\n    strmFolder: \"/strm/\",\n});\n```\n```python\nimport pulumi\nimport pulumi_readarr as readarr\n\nexample = readarr.download_clients.DownloadClientPneumatic(\"example\",\n    enable=True,\n    name=\"Example\",\n    nzb_folder=\"/nzb/\",\n    priority=1,\n    strm_folder=\"/strm/\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Readarr = MaienM.Readarr;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Readarr.DownloadClients.DownloadClientPneumatic(\"example\", new()\n    {\n        Enable = true,\n        Name = \"Example\",\n        NzbFolder = \"/nzb/\",\n        Priority = 1,\n        StrmFolder = \"/strm/\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/MaienM/pulumi-readarr/sdk/v2/go/readarr/DownloadClients\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := DownloadClients.NewDownloadClientPneumatic(ctx, \"example\", \u0026DownloadClients.DownloadClientPneumaticArgs{\n\t\t\tEnable:     pulumi.Bool(true),\n\t\t\tName:       pulumi.String(\"Example\"),\n\t\t\tNzbFolder:  pulumi.String(\"/nzb/\"),\n\t\t\tPriority:   pulumi.Int(1),\n\t\t\tStrmFolder: pulumi.String(\"/strm/\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.readarr.DownloadClients.DownloadClientPneumatic;\nimport com.pulumi.readarr.DownloadClients.DownloadClientPneumaticArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new DownloadClientPneumatic(\"example\", DownloadClientPneumaticArgs.builder()        \n            .enable(true)\n            .name(\"Example\")\n            .nzbFolder(\"/nzb/\")\n            .priority(1)\n            .strmFolder(\"/strm/\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: readarr:DownloadClients:DownloadClientPneumatic\n    properties:\n      enable: true\n      name: Example\n      nzbFolder: /nzb/\n      priority: 1\n      strmFolder: /strm/\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nimport using the API/UI ID\n\n```sh\n $ pulumi import readarr:DownloadClients/downloadClientPneumatic:DownloadClientPneumatic example 1\n```\n\n ",
            "properties": {
                "enable": {
                    "type": "boolean",
                    "description": "Enable flag.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Download Client name.\n"
                },
                "nzbFolder": {
                    "type": "string",
                    "description": "NZB folder.\n"
                },
                "priority": {
                    "type": "integer",
                    "description": "Priority.\n"
                },
                "strmFolder": {
                    "type": "string",
                    "description": "STRM folder.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                }
            },
            "required": [
                "enable",
                "name",
                "nzbFolder",
                "priority",
                "strmFolder",
                "tags"
            ],
            "inputProperties": {
                "enable": {
                    "type": "boolean",
                    "description": "Enable flag.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Download Client name.\n"
                },
                "nzbFolder": {
                    "type": "string",
                    "description": "NZB folder.\n"
                },
                "priority": {
                    "type": "integer",
                    "description": "Priority.\n"
                },
                "strmFolder": {
                    "type": "string",
                    "description": "STRM folder.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                }
            },
            "requiredInputs": [
                "name",
                "nzbFolder",
                "strmFolder"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DownloadClientPneumatic resources.\n",
                "properties": {
                    "enable": {
                        "type": "boolean",
                        "description": "Enable flag.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Download Client name.\n"
                    },
                    "nzbFolder": {
                        "type": "string",
                        "description": "NZB folder.\n"
                    },
                    "priority": {
                        "type": "integer",
                        "description": "Priority.\n"
                    },
                    "strmFolder": {
                        "type": "string",
                        "description": "STRM folder.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "List of associated tags.\n"
                    }
                },
                "type": "object"
            }
        },
        "readarr:DownloadClients/downloadClientQbittorrent:DownloadClientQbittorrent": {
            "description": "\u003c!-- subcategory:Download Clients --\u003eDownload Client qBittorrent resource.\nFor more information refer to [Download Client](https://wiki.servarr.com/readarr/settings#download-clients) and [qBittorrent](https://wiki.servarr.com/readarr/supported#qbittorrent).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as readarr from \"@maienm/pulumi-readarr\";\n\nconst example = new readarr.downloadclients.DownloadClientQbittorrent(\"example\", {\n    bookCategory: \"tv-readarr\",\n    enable: true,\n    firstAndLast: true,\n    host: \"qbittorrent\",\n    name: \"Example\",\n    port: 9091,\n    priority: 1,\n    urlBase: \"/qbittorrent/\",\n});\n```\n```python\nimport pulumi\nimport pulumi_readarr as readarr\n\nexample = readarr.download_clients.DownloadClientQbittorrent(\"example\",\n    book_category=\"tv-readarr\",\n    enable=True,\n    first_and_last=True,\n    host=\"qbittorrent\",\n    name=\"Example\",\n    port=9091,\n    priority=1,\n    url_base=\"/qbittorrent/\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Readarr = MaienM.Readarr;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Readarr.DownloadClients.DownloadClientQbittorrent(\"example\", new()\n    {\n        BookCategory = \"tv-readarr\",\n        Enable = true,\n        FirstAndLast = true,\n        Host = \"qbittorrent\",\n        Name = \"Example\",\n        Port = 9091,\n        Priority = 1,\n        UrlBase = \"/qbittorrent/\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/MaienM/pulumi-readarr/sdk/v2/go/readarr/DownloadClients\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := DownloadClients.NewDownloadClientQbittorrent(ctx, \"example\", \u0026DownloadClients.DownloadClientQbittorrentArgs{\n\t\t\tBookCategory: pulumi.String(\"tv-readarr\"),\n\t\t\tEnable:       pulumi.Bool(true),\n\t\t\tFirstAndLast: pulumi.Bool(true),\n\t\t\tHost:         pulumi.String(\"qbittorrent\"),\n\t\t\tName:         pulumi.String(\"Example\"),\n\t\t\tPort:         pulumi.Int(9091),\n\t\t\tPriority:     pulumi.Int(1),\n\t\t\tUrlBase:      pulumi.String(\"/qbittorrent/\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.readarr.DownloadClients.DownloadClientQbittorrent;\nimport com.pulumi.readarr.DownloadClients.DownloadClientQbittorrentArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new DownloadClientQbittorrent(\"example\", DownloadClientQbittorrentArgs.builder()        \n            .bookCategory(\"tv-readarr\")\n            .enable(true)\n            .firstAndLast(true)\n            .host(\"qbittorrent\")\n            .name(\"Example\")\n            .port(9091)\n            .priority(1)\n            .urlBase(\"/qbittorrent/\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: readarr:DownloadClients:DownloadClientQbittorrent\n    properties:\n      bookCategory: tv-readarr\n      enable: true\n      firstAndLast: true\n      host: qbittorrent\n      name: Example\n      port: 9091\n      priority: 1\n      urlBase: /qbittorrent/\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nimport using the API/UI ID\n\n```sh\n $ pulumi import readarr:DownloadClients/downloadClientQbittorrent:DownloadClientQbittorrent example 1\n```\n\n ",
            "properties": {
                "bookCategory": {
                    "type": "string",
                    "description": "Book category.\n"
                },
                "bookImportedCategory": {
                    "type": "string",
                    "description": "Book imported category.\n"
                },
                "enable": {
                    "type": "boolean",
                    "description": "Enable flag.\n"
                },
                "firstAndLast": {
                    "type": "boolean",
                    "description": "First and last flag.\n"
                },
                "host": {
                    "type": "string",
                    "description": "host.\n"
                },
                "initialState": {
                    "type": "integer",
                    "description": "Initial state, with Stop support. `0` Start, `1` ForceStart, `2` Pause.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Download Client name.\n"
                },
                "olderBookPriority": {
                    "type": "integer",
                    "description": "Older Music priority. `0` Last, `1` First.\n"
                },
                "password": {
                    "type": "string",
                    "description": "Password.\n",
                    "secret": true
                },
                "port": {
                    "type": "integer",
                    "description": "Port.\n"
                },
                "priority": {
                    "type": "integer",
                    "description": "Priority.\n"
                },
                "recentBookPriority": {
                    "type": "integer",
                    "description": "Recent Music priority. `0` Last, `1` First.\n"
                },
                "sequentialOrder": {
                    "type": "boolean",
                    "description": "Sequential order flag.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                },
                "urlBase": {
                    "type": "string",
                    "description": "Base URL.\n"
                },
                "useSsl": {
                    "type": "boolean",
                    "description": "Use SSL flag.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username.\n"
                }
            },
            "required": [
                "bookCategory",
                "bookImportedCategory",
                "enable",
                "firstAndLast",
                "host",
                "initialState",
                "name",
                "olderBookPriority",
                "password",
                "port",
                "priority",
                "recentBookPriority",
                "sequentialOrder",
                "tags",
                "urlBase",
                "useSsl",
                "username"
            ],
            "inputProperties": {
                "bookCategory": {
                    "type": "string",
                    "description": "Book category.\n"
                },
                "bookImportedCategory": {
                    "type": "string",
                    "description": "Book imported category.\n"
                },
                "enable": {
                    "type": "boolean",
                    "description": "Enable flag.\n"
                },
                "firstAndLast": {
                    "type": "boolean",
                    "description": "First and last flag.\n"
                },
                "host": {
                    "type": "string",
                    "description": "host.\n"
                },
                "initialState": {
                    "type": "integer",
                    "description": "Initial state, with Stop support. `0` Start, `1` ForceStart, `2` Pause.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Download Client name.\n"
                },
                "olderBookPriority": {
                    "type": "integer",
                    "description": "Older Music priority. `0` Last, `1` First.\n"
                },
                "password": {
                    "type": "string",
                    "description": "Password.\n",
                    "secret": true
                },
                "port": {
                    "type": "integer",
                    "description": "Port.\n"
                },
                "priority": {
                    "type": "integer",
                    "description": "Priority.\n"
                },
                "recentBookPriority": {
                    "type": "integer",
                    "description": "Recent Music priority. `0` Last, `1` First.\n"
                },
                "sequentialOrder": {
                    "type": "boolean",
                    "description": "Sequential order flag.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                },
                "urlBase": {
                    "type": "string",
                    "description": "Base URL.\n"
                },
                "useSsl": {
                    "type": "boolean",
                    "description": "Use SSL flag.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username.\n"
                }
            },
            "requiredInputs": [
                "name"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DownloadClientQbittorrent resources.\n",
                "properties": {
                    "bookCategory": {
                        "type": "string",
                        "description": "Book category.\n"
                    },
                    "bookImportedCategory": {
                        "type": "string",
                        "description": "Book imported category.\n"
                    },
                    "enable": {
                        "type": "boolean",
                        "description": "Enable flag.\n"
                    },
                    "firstAndLast": {
                        "type": "boolean",
                        "description": "First and last flag.\n"
                    },
                    "host": {
                        "type": "string",
                        "description": "host.\n"
                    },
                    "initialState": {
                        "type": "integer",
                        "description": "Initial state, with Stop support. `0` Start, `1` ForceStart, `2` Pause.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Download Client name.\n"
                    },
                    "olderBookPriority": {
                        "type": "integer",
                        "description": "Older Music priority. `0` Last, `1` First.\n"
                    },
                    "password": {
                        "type": "string",
                        "description": "Password.\n",
                        "secret": true
                    },
                    "port": {
                        "type": "integer",
                        "description": "Port.\n"
                    },
                    "priority": {
                        "type": "integer",
                        "description": "Priority.\n"
                    },
                    "recentBookPriority": {
                        "type": "integer",
                        "description": "Recent Music priority. `0` Last, `1` First.\n"
                    },
                    "sequentialOrder": {
                        "type": "boolean",
                        "description": "Sequential order flag.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "List of associated tags.\n"
                    },
                    "urlBase": {
                        "type": "string",
                        "description": "Base URL.\n"
                    },
                    "useSsl": {
                        "type": "boolean",
                        "description": "Use SSL flag.\n"
                    },
                    "username": {
                        "type": "string",
                        "description": "Username.\n"
                    }
                },
                "type": "object"
            }
        },
        "readarr:DownloadClients/downloadClientRtorrent:DownloadClientRtorrent": {
            "description": "\u003c!-- subcategory:Download Clients --\u003eDownload Client RTorrent resource.\nFor more information refer to [Download Client](https://wiki.servarr.com/readarr/settings#download-clients) and [RTorrent](https://wiki.servarr.com/readarr/supported#rtorrent).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as readarr from \"@maienm/pulumi-readarr\";\n\nconst example = new readarr.downloadclients.DownloadClientRtorrent(\"example\", {\n    enable: true,\n    host: \"rtorrent\",\n    name: \"Example\",\n    port: 9091,\n    priority: 1,\n    urlBase: \"/rtorrent/\",\n});\n```\n```python\nimport pulumi\nimport pulumi_readarr as readarr\n\nexample = readarr.download_clients.DownloadClientRtorrent(\"example\",\n    enable=True,\n    host=\"rtorrent\",\n    name=\"Example\",\n    port=9091,\n    priority=1,\n    url_base=\"/rtorrent/\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Readarr = MaienM.Readarr;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Readarr.DownloadClients.DownloadClientRtorrent(\"example\", new()\n    {\n        Enable = true,\n        Host = \"rtorrent\",\n        Name = \"Example\",\n        Port = 9091,\n        Priority = 1,\n        UrlBase = \"/rtorrent/\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/MaienM/pulumi-readarr/sdk/v2/go/readarr/DownloadClients\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := DownloadClients.NewDownloadClientRtorrent(ctx, \"example\", \u0026DownloadClients.DownloadClientRtorrentArgs{\n\t\t\tEnable:   pulumi.Bool(true),\n\t\t\tHost:     pulumi.String(\"rtorrent\"),\n\t\t\tName:     pulumi.String(\"Example\"),\n\t\t\tPort:     pulumi.Int(9091),\n\t\t\tPriority: pulumi.Int(1),\n\t\t\tUrlBase:  pulumi.String(\"/rtorrent/\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.readarr.DownloadClients.DownloadClientRtorrent;\nimport com.pulumi.readarr.DownloadClients.DownloadClientRtorrentArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new DownloadClientRtorrent(\"example\", DownloadClientRtorrentArgs.builder()        \n            .enable(true)\n            .host(\"rtorrent\")\n            .name(\"Example\")\n            .port(9091)\n            .priority(1)\n            .urlBase(\"/rtorrent/\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: readarr:DownloadClients:DownloadClientRtorrent\n    properties:\n      enable: true\n      host: rtorrent\n      name: Example\n      port: 9091\n      priority: 1\n      urlBase: /rtorrent/\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nimport using the API/UI ID\n\n```sh\n $ pulumi import readarr:DownloadClients/downloadClientRtorrent:DownloadClientRtorrent example 1\n```\n\n ",
            "properties": {
                "addStopped": {
                    "type": "boolean",
                    "description": "Add stopped flag.\n"
                },
                "bookCategory": {
                    "type": "string",
                    "description": "Book category.\n"
                },
                "bookDirectory": {
                    "type": "string",
                    "description": "Book directory.\n"
                },
                "bookImportedCategory": {
                    "type": "string",
                    "description": "Book imported category.\n"
                },
                "enable": {
                    "type": "boolean",
                    "description": "Enable flag.\n"
                },
                "host": {
                    "type": "string",
                    "description": "host.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Download Client name.\n"
                },
                "olderBookPriority": {
                    "type": "integer",
                    "description": "Older Music priority. `0` VeryLow, `1` Low, `2` Normal, `3` High.\n"
                },
                "password": {
                    "type": "string",
                    "description": "Password.\n",
                    "secret": true
                },
                "port": {
                    "type": "integer",
                    "description": "Port.\n"
                },
                "priority": {
                    "type": "integer",
                    "description": "Priority.\n"
                },
                "recentBookPriority": {
                    "type": "integer",
                    "description": "Recent Music priority. `0` VeryLow, `1` Low, `2` Normal, `3` High.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                },
                "urlBase": {
                    "type": "string",
                    "description": "Base URL.\n"
                },
                "useSsl": {
                    "type": "boolean",
                    "description": "Use SSL flag.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username.\n"
                }
            },
            "required": [
                "addStopped",
                "bookCategory",
                "bookDirectory",
                "bookImportedCategory",
                "enable",
                "host",
                "name",
                "olderBookPriority",
                "password",
                "port",
                "priority",
                "recentBookPriority",
                "tags",
                "urlBase",
                "useSsl",
                "username"
            ],
            "inputProperties": {
                "addStopped": {
                    "type": "boolean",
                    "description": "Add stopped flag.\n"
                },
                "bookCategory": {
                    "type": "string",
                    "description": "Book category.\n"
                },
                "bookDirectory": {
                    "type": "string",
                    "description": "Book directory.\n"
                },
                "bookImportedCategory": {
                    "type": "string",
                    "description": "Book imported category.\n"
                },
                "enable": {
                    "type": "boolean",
                    "description": "Enable flag.\n"
                },
                "host": {
                    "type": "string",
                    "description": "host.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Download Client name.\n"
                },
                "olderBookPriority": {
                    "type": "integer",
                    "description": "Older Music priority. `0` VeryLow, `1` Low, `2` Normal, `3` High.\n"
                },
                "password": {
                    "type": "string",
                    "description": "Password.\n",
                    "secret": true
                },
                "port": {
                    "type": "integer",
                    "description": "Port.\n"
                },
                "priority": {
                    "type": "integer",
                    "description": "Priority.\n"
                },
                "recentBookPriority": {
                    "type": "integer",
                    "description": "Recent Music priority. `0` VeryLow, `1` Low, `2` Normal, `3` High.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                },
                "urlBase": {
                    "type": "string",
                    "description": "Base URL.\n"
                },
                "useSsl": {
                    "type": "boolean",
                    "description": "Use SSL flag.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username.\n"
                }
            },
            "requiredInputs": [
                "name"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DownloadClientRtorrent resources.\n",
                "properties": {
                    "addStopped": {
                        "type": "boolean",
                        "description": "Add stopped flag.\n"
                    },
                    "bookCategory": {
                        "type": "string",
                        "description": "Book category.\n"
                    },
                    "bookDirectory": {
                        "type": "string",
                        "description": "Book directory.\n"
                    },
                    "bookImportedCategory": {
                        "type": "string",
                        "description": "Book imported category.\n"
                    },
                    "enable": {
                        "type": "boolean",
                        "description": "Enable flag.\n"
                    },
                    "host": {
                        "type": "string",
                        "description": "host.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Download Client name.\n"
                    },
                    "olderBookPriority": {
                        "type": "integer",
                        "description": "Older Music priority. `0` VeryLow, `1` Low, `2` Normal, `3` High.\n"
                    },
                    "password": {
                        "type": "string",
                        "description": "Password.\n",
                        "secret": true
                    },
                    "port": {
                        "type": "integer",
                        "description": "Port.\n"
                    },
                    "priority": {
                        "type": "integer",
                        "description": "Priority.\n"
                    },
                    "recentBookPriority": {
                        "type": "integer",
                        "description": "Recent Music priority. `0` VeryLow, `1` Low, `2` Normal, `3` High.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "List of associated tags.\n"
                    },
                    "urlBase": {
                        "type": "string",
                        "description": "Base URL.\n"
                    },
                    "useSsl": {
                        "type": "boolean",
                        "description": "Use SSL flag.\n"
                    },
                    "username": {
                        "type": "string",
                        "description": "Username.\n"
                    }
                },
                "type": "object"
            }
        },
        "readarr:DownloadClients/downloadClientSabnzbd:DownloadClientSabnzbd": {
            "description": "\u003c!-- subcategory:Download Clients --\u003eDownload Client Sabnzbd resource.\nFor more information refer to [Download Client](https://wiki.servarr.com/readarr/settings#download-clients) and [Sabnzbd](https://wiki.servarr.com/readarr/supported#sabnzbd).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as readarr from \"@maienm/pulumi-readarr\";\n\nconst example = new readarr.downloadclients.DownloadClientSabnzbd(\"example\", {\n    apiKey: \"example\",\n    enable: true,\n    host: \"sabnzbd\",\n    name: \"Example\",\n    port: 9091,\n    priority: 1,\n    urlBase: \"/sabnzbd/\",\n});\n```\n```python\nimport pulumi\nimport pulumi_readarr as readarr\n\nexample = readarr.download_clients.DownloadClientSabnzbd(\"example\",\n    api_key=\"example\",\n    enable=True,\n    host=\"sabnzbd\",\n    name=\"Example\",\n    port=9091,\n    priority=1,\n    url_base=\"/sabnzbd/\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Readarr = MaienM.Readarr;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Readarr.DownloadClients.DownloadClientSabnzbd(\"example\", new()\n    {\n        ApiKey = \"example\",\n        Enable = true,\n        Host = \"sabnzbd\",\n        Name = \"Example\",\n        Port = 9091,\n        Priority = 1,\n        UrlBase = \"/sabnzbd/\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/MaienM/pulumi-readarr/sdk/v2/go/readarr/DownloadClients\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := DownloadClients.NewDownloadClientSabnzbd(ctx, \"example\", \u0026DownloadClients.DownloadClientSabnzbdArgs{\n\t\t\tApiKey:   pulumi.String(\"example\"),\n\t\t\tEnable:   pulumi.Bool(true),\n\t\t\tHost:     pulumi.String(\"sabnzbd\"),\n\t\t\tName:     pulumi.String(\"Example\"),\n\t\t\tPort:     pulumi.Int(9091),\n\t\t\tPriority: pulumi.Int(1),\n\t\t\tUrlBase:  pulumi.String(\"/sabnzbd/\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.readarr.DownloadClients.DownloadClientSabnzbd;\nimport com.pulumi.readarr.DownloadClients.DownloadClientSabnzbdArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new DownloadClientSabnzbd(\"example\", DownloadClientSabnzbdArgs.builder()        \n            .apiKey(\"example\")\n            .enable(true)\n            .host(\"sabnzbd\")\n            .name(\"Example\")\n            .port(9091)\n            .priority(1)\n            .urlBase(\"/sabnzbd/\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: readarr:DownloadClients:DownloadClientSabnzbd\n    properties:\n      apiKey: example\n      enable: true\n      host: sabnzbd\n      name: Example\n      port: 9091\n      priority: 1\n      urlBase: /sabnzbd/\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nimport using the API/UI ID\n\n```sh\n $ pulumi import readarr:DownloadClients/downloadClientSabnzbd:DownloadClientSabnzbd example 1\n```\n\n ",
            "properties": {
                "apiKey": {
                    "type": "string",
                    "description": "API key.\n",
                    "secret": true
                },
                "bookCategory": {
                    "type": "string",
                    "description": "Book category.\n"
                },
                "enable": {
                    "type": "boolean",
                    "description": "Enable flag.\n"
                },
                "host": {
                    "type": "string",
                    "description": "host.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Download Client name.\n"
                },
                "olderBookPriority": {
                    "type": "integer",
                    "description": "Older Music priority. `-100` Default, `-2` Paused, `-1` Low, `0` Normal, `1` High, `2` Force.\n"
                },
                "password": {
                    "type": "string",
                    "description": "Password.\n",
                    "secret": true
                },
                "port": {
                    "type": "integer",
                    "description": "Port.\n"
                },
                "priority": {
                    "type": "integer",
                    "description": "Priority.\n"
                },
                "recentBookPriority": {
                    "type": "integer",
                    "description": "Recent Music priority. `-100` Default, `-2` Paused, `-1` Low, `0` Normal, `1` High, `2` Force.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                },
                "urlBase": {
                    "type": "string",
                    "description": "Base URL.\n"
                },
                "useSsl": {
                    "type": "boolean",
                    "description": "Use SSL flag.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username.\n"
                }
            },
            "required": [
                "apiKey",
                "bookCategory",
                "enable",
                "host",
                "name",
                "olderBookPriority",
                "password",
                "port",
                "priority",
                "recentBookPriority",
                "tags",
                "urlBase",
                "useSsl",
                "username"
            ],
            "inputProperties": {
                "apiKey": {
                    "type": "string",
                    "description": "API key.\n",
                    "secret": true
                },
                "bookCategory": {
                    "type": "string",
                    "description": "Book category.\n"
                },
                "enable": {
                    "type": "boolean",
                    "description": "Enable flag.\n"
                },
                "host": {
                    "type": "string",
                    "description": "host.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Download Client name.\n"
                },
                "olderBookPriority": {
                    "type": "integer",
                    "description": "Older Music priority. `-100` Default, `-2` Paused, `-1` Low, `0` Normal, `1` High, `2` Force.\n"
                },
                "password": {
                    "type": "string",
                    "description": "Password.\n",
                    "secret": true
                },
                "port": {
                    "type": "integer",
                    "description": "Port.\n"
                },
                "priority": {
                    "type": "integer",
                    "description": "Priority.\n"
                },
                "recentBookPriority": {
                    "type": "integer",
                    "description": "Recent Music priority. `-100` Default, `-2` Paused, `-1` Low, `0` Normal, `1` High, `2` Force.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                },
                "urlBase": {
                    "type": "string",
                    "description": "Base URL.\n"
                },
                "useSsl": {
                    "type": "boolean",
                    "description": "Use SSL flag.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username.\n"
                }
            },
            "requiredInputs": [
                "name"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DownloadClientSabnzbd resources.\n",
                "properties": {
                    "apiKey": {
                        "type": "string",
                        "description": "API key.\n",
                        "secret": true
                    },
                    "bookCategory": {
                        "type": "string",
                        "description": "Book category.\n"
                    },
                    "enable": {
                        "type": "boolean",
                        "description": "Enable flag.\n"
                    },
                    "host": {
                        "type": "string",
                        "description": "host.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Download Client name.\n"
                    },
                    "olderBookPriority": {
                        "type": "integer",
                        "description": "Older Music priority. `-100` Default, `-2` Paused, `-1` Low, `0` Normal, `1` High, `2` Force.\n"
                    },
                    "password": {
                        "type": "string",
                        "description": "Password.\n",
                        "secret": true
                    },
                    "port": {
                        "type": "integer",
                        "description": "Port.\n"
                    },
                    "priority": {
                        "type": "integer",
                        "description": "Priority.\n"
                    },
                    "recentBookPriority": {
                        "type": "integer",
                        "description": "Recent Music priority. `-100` Default, `-2` Paused, `-1` Low, `0` Normal, `1` High, `2` Force.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "List of associated tags.\n"
                    },
                    "urlBase": {
                        "type": "string",
                        "description": "Base URL.\n"
                    },
                    "useSsl": {
                        "type": "boolean",
                        "description": "Use SSL flag.\n"
                    },
                    "username": {
                        "type": "string",
                        "description": "Username.\n"
                    }
                },
                "type": "object"
            }
        },
        "readarr:DownloadClients/downloadClientTorrentBlackhole:DownloadClientTorrentBlackhole": {
            "description": "\u003c!-- subcategory:Download Clients --\u003eDownload Client Torrent Blackhole resource.\nFor more information refer to [Download Client](https://wiki.servarr.com/readarr/settings#download-clients) and [TorrentBlackhole](https://wiki.servarr.com/readarr/supported#torrentblackhole).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as readarr from \"@maienm/pulumi-readarr\";\n\nconst example = new readarr.downloadclients.DownloadClientTorrentBlackhole(\"example\", {\n    enable: true,\n    magnetFileExtension: \".magnet\",\n    name: \"Example\",\n    priority: 1,\n    torrentFolder: \"/torrent/\",\n    watchFolder: \"/watch/\",\n});\n```\n```python\nimport pulumi\nimport pulumi_readarr as readarr\n\nexample = readarr.download_clients.DownloadClientTorrentBlackhole(\"example\",\n    enable=True,\n    magnet_file_extension=\".magnet\",\n    name=\"Example\",\n    priority=1,\n    torrent_folder=\"/torrent/\",\n    watch_folder=\"/watch/\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Readarr = MaienM.Readarr;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Readarr.DownloadClients.DownloadClientTorrentBlackhole(\"example\", new()\n    {\n        Enable = true,\n        MagnetFileExtension = \".magnet\",\n        Name = \"Example\",\n        Priority = 1,\n        TorrentFolder = \"/torrent/\",\n        WatchFolder = \"/watch/\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/MaienM/pulumi-readarr/sdk/v2/go/readarr/DownloadClients\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := DownloadClients.NewDownloadClientTorrentBlackhole(ctx, \"example\", \u0026DownloadClients.DownloadClientTorrentBlackholeArgs{\n\t\t\tEnable:              pulumi.Bool(true),\n\t\t\tMagnetFileExtension: pulumi.String(\".magnet\"),\n\t\t\tName:                pulumi.String(\"Example\"),\n\t\t\tPriority:            pulumi.Int(1),\n\t\t\tTorrentFolder:       pulumi.String(\"/torrent/\"),\n\t\t\tWatchFolder:         pulumi.String(\"/watch/\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.readarr.DownloadClients.DownloadClientTorrentBlackhole;\nimport com.pulumi.readarr.DownloadClients.DownloadClientTorrentBlackholeArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new DownloadClientTorrentBlackhole(\"example\", DownloadClientTorrentBlackholeArgs.builder()        \n            .enable(true)\n            .magnetFileExtension(\".magnet\")\n            .name(\"Example\")\n            .priority(1)\n            .torrentFolder(\"/torrent/\")\n            .watchFolder(\"/watch/\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: readarr:DownloadClients:DownloadClientTorrentBlackhole\n    properties:\n      enable: true\n      magnetFileExtension: .magnet\n      name: Example\n      priority: 1\n      torrentFolder: /torrent/\n      watchFolder: /watch/\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nimport using the API/UI ID\n\n```sh\n $ pulumi import readarr:DownloadClients/downloadClientTorrentBlackhole:DownloadClientTorrentBlackhole example 1\n```\n\n ",
            "properties": {
                "enable": {
                    "type": "boolean",
                    "description": "Enable flag.\n"
                },
                "magnetFileExtension": {
                    "type": "string",
                    "description": "Magnet file extension.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Download Client name.\n"
                },
                "priority": {
                    "type": "integer",
                    "description": "Priority.\n"
                },
                "readOnly": {
                    "type": "boolean",
                    "description": "Read only flag.\n"
                },
                "saveMagnetFiles": {
                    "type": "boolean",
                    "description": "Save magnet files flag.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                },
                "torrentFolder": {
                    "type": "string",
                    "description": "Torrent folder.\n"
                },
                "watchFolder": {
                    "type": "string",
                    "description": "Watch folder flag.\n"
                }
            },
            "required": [
                "enable",
                "magnetFileExtension",
                "name",
                "priority",
                "readOnly",
                "saveMagnetFiles",
                "tags",
                "torrentFolder",
                "watchFolder"
            ],
            "inputProperties": {
                "enable": {
                    "type": "boolean",
                    "description": "Enable flag.\n"
                },
                "magnetFileExtension": {
                    "type": "string",
                    "description": "Magnet file extension.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Download Client name.\n"
                },
                "priority": {
                    "type": "integer",
                    "description": "Priority.\n"
                },
                "readOnly": {
                    "type": "boolean",
                    "description": "Read only flag.\n"
                },
                "saveMagnetFiles": {
                    "type": "boolean",
                    "description": "Save magnet files flag.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                },
                "torrentFolder": {
                    "type": "string",
                    "description": "Torrent folder.\n"
                },
                "watchFolder": {
                    "type": "string",
                    "description": "Watch folder flag.\n"
                }
            },
            "requiredInputs": [
                "name",
                "torrentFolder",
                "watchFolder"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DownloadClientTorrentBlackhole resources.\n",
                "properties": {
                    "enable": {
                        "type": "boolean",
                        "description": "Enable flag.\n"
                    },
                    "magnetFileExtension": {
                        "type": "string",
                        "description": "Magnet file extension.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Download Client name.\n"
                    },
                    "priority": {
                        "type": "integer",
                        "description": "Priority.\n"
                    },
                    "readOnly": {
                        "type": "boolean",
                        "description": "Read only flag.\n"
                    },
                    "saveMagnetFiles": {
                        "type": "boolean",
                        "description": "Save magnet files flag.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "List of associated tags.\n"
                    },
                    "torrentFolder": {
                        "type": "string",
                        "description": "Torrent folder.\n"
                    },
                    "watchFolder": {
                        "type": "string",
                        "description": "Watch folder flag.\n"
                    }
                },
                "type": "object"
            }
        },
        "readarr:DownloadClients/downloadClientTorrentDownloadStation:DownloadClientTorrentDownloadStation": {
            "description": "\u003c!-- subcategory:Download Clients --\u003eDownload Client TorrentDownloadStation resource.\nFor more information refer to [Download Client](https://wiki.servarr.com/readarr/settings#download-clients) and [TorrentDownloadStation](https://wiki.servarr.com/readarr/supported#torrentdownloadstation).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as readarr from \"@maienm/pulumi-readarr\";\n\nconst example = new readarr.downloadclients.DownloadClientTorrentDownloadStation(\"example\", {\n    enable: true,\n    host: \"downloadstation\",\n    name: \"Example\",\n    port: 5000,\n    priority: 1,\n});\n```\n```python\nimport pulumi\nimport pulumi_readarr as readarr\n\nexample = readarr.download_clients.DownloadClientTorrentDownloadStation(\"example\",\n    enable=True,\n    host=\"downloadstation\",\n    name=\"Example\",\n    port=5000,\n    priority=1)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Readarr = MaienM.Readarr;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Readarr.DownloadClients.DownloadClientTorrentDownloadStation(\"example\", new()\n    {\n        Enable = true,\n        Host = \"downloadstation\",\n        Name = \"Example\",\n        Port = 5000,\n        Priority = 1,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/MaienM/pulumi-readarr/sdk/v2/go/readarr/DownloadClients\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := DownloadClients.NewDownloadClientTorrentDownloadStation(ctx, \"example\", \u0026DownloadClients.DownloadClientTorrentDownloadStationArgs{\n\t\t\tEnable:   pulumi.Bool(true),\n\t\t\tHost:     pulumi.String(\"downloadstation\"),\n\t\t\tName:     pulumi.String(\"Example\"),\n\t\t\tPort:     pulumi.Int(5000),\n\t\t\tPriority: pulumi.Int(1),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.readarr.DownloadClients.DownloadClientTorrentDownloadStation;\nimport com.pulumi.readarr.DownloadClients.DownloadClientTorrentDownloadStationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new DownloadClientTorrentDownloadStation(\"example\", DownloadClientTorrentDownloadStationArgs.builder()        \n            .enable(true)\n            .host(\"downloadstation\")\n            .name(\"Example\")\n            .port(5000)\n            .priority(1)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: readarr:DownloadClients:DownloadClientTorrentDownloadStation\n    properties:\n      enable: true\n      host: downloadstation\n      name: Example\n      port: 5000\n      priority: 1\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nimport using the API/UI ID\n\n```sh\n $ pulumi import readarr:DownloadClients/downloadClientTorrentDownloadStation:DownloadClientTorrentDownloadStation example 1\n```\n\n ",
            "properties": {
                "bookCategory": {
                    "type": "string",
                    "description": "Book category.\n"
                },
                "bookDirectory": {
                    "type": "string",
                    "description": "Book directory.\n"
                },
                "enable": {
                    "type": "boolean",
                    "description": "Enable flag.\n"
                },
                "host": {
                    "type": "string",
                    "description": "host.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Download Client name.\n"
                },
                "password": {
                    "type": "string",
                    "description": "Password.\n",
                    "secret": true
                },
                "port": {
                    "type": "integer",
                    "description": "Port.\n"
                },
                "priority": {
                    "type": "integer",
                    "description": "Priority.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                },
                "useSsl": {
                    "type": "boolean",
                    "description": "Use SSL flag.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username.\n"
                }
            },
            "required": [
                "bookCategory",
                "bookDirectory",
                "enable",
                "host",
                "name",
                "password",
                "port",
                "priority",
                "tags",
                "useSsl",
                "username"
            ],
            "inputProperties": {
                "bookCategory": {
                    "type": "string",
                    "description": "Book category.\n"
                },
                "bookDirectory": {
                    "type": "string",
                    "description": "Book directory.\n"
                },
                "enable": {
                    "type": "boolean",
                    "description": "Enable flag.\n"
                },
                "host": {
                    "type": "string",
                    "description": "host.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Download Client name.\n"
                },
                "password": {
                    "type": "string",
                    "description": "Password.\n",
                    "secret": true
                },
                "port": {
                    "type": "integer",
                    "description": "Port.\n"
                },
                "priority": {
                    "type": "integer",
                    "description": "Priority.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                },
                "useSsl": {
                    "type": "boolean",
                    "description": "Use SSL flag.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username.\n"
                }
            },
            "requiredInputs": [
                "name"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DownloadClientTorrentDownloadStation resources.\n",
                "properties": {
                    "bookCategory": {
                        "type": "string",
                        "description": "Book category.\n"
                    },
                    "bookDirectory": {
                        "type": "string",
                        "description": "Book directory.\n"
                    },
                    "enable": {
                        "type": "boolean",
                        "description": "Enable flag.\n"
                    },
                    "host": {
                        "type": "string",
                        "description": "host.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Download Client name.\n"
                    },
                    "password": {
                        "type": "string",
                        "description": "Password.\n",
                        "secret": true
                    },
                    "port": {
                        "type": "integer",
                        "description": "Port.\n"
                    },
                    "priority": {
                        "type": "integer",
                        "description": "Priority.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "List of associated tags.\n"
                    },
                    "useSsl": {
                        "type": "boolean",
                        "description": "Use SSL flag.\n"
                    },
                    "username": {
                        "type": "string",
                        "description": "Username.\n"
                    }
                },
                "type": "object"
            }
        },
        "readarr:DownloadClients/downloadClientTransmission:DownloadClientTransmission": {
            "description": "\u003c!-- subcategory:Download Clients --\u003eDownload Client Transmission resource.\nFor more information refer to [Download Client](https://wiki.servarr.com/readarr/settings#download-clients) and [Transmission](https://wiki.servarr.com/readarr/supported#transmission).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as readarr from \"@maienm/pulumi-readarr\";\n\nconst example = new readarr.downloadclients.DownloadClientTransmission(\"example\", {\n    enable: true,\n    host: \"transmission\",\n    name: \"Example\",\n    port: 9091,\n    priority: 1,\n    urlBase: \"/transmission/\",\n});\n```\n```python\nimport pulumi\nimport pulumi_readarr as readarr\n\nexample = readarr.download_clients.DownloadClientTransmission(\"example\",\n    enable=True,\n    host=\"transmission\",\n    name=\"Example\",\n    port=9091,\n    priority=1,\n    url_base=\"/transmission/\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Readarr = MaienM.Readarr;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Readarr.DownloadClients.DownloadClientTransmission(\"example\", new()\n    {\n        Enable = true,\n        Host = \"transmission\",\n        Name = \"Example\",\n        Port = 9091,\n        Priority = 1,\n        UrlBase = \"/transmission/\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/MaienM/pulumi-readarr/sdk/v2/go/readarr/DownloadClients\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := DownloadClients.NewDownloadClientTransmission(ctx, \"example\", \u0026DownloadClients.DownloadClientTransmissionArgs{\n\t\t\tEnable:   pulumi.Bool(true),\n\t\t\tHost:     pulumi.String(\"transmission\"),\n\t\t\tName:     pulumi.String(\"Example\"),\n\t\t\tPort:     pulumi.Int(9091),\n\t\t\tPriority: pulumi.Int(1),\n\t\t\tUrlBase:  pulumi.String(\"/transmission/\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.readarr.DownloadClients.DownloadClientTransmission;\nimport com.pulumi.readarr.DownloadClients.DownloadClientTransmissionArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new DownloadClientTransmission(\"example\", DownloadClientTransmissionArgs.builder()        \n            .enable(true)\n            .host(\"transmission\")\n            .name(\"Example\")\n            .port(9091)\n            .priority(1)\n            .urlBase(\"/transmission/\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: readarr:DownloadClients:DownloadClientTransmission\n    properties:\n      enable: true\n      host: transmission\n      name: Example\n      port: 9091\n      priority: 1\n      urlBase: /transmission/\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nimport using the API/UI ID\n\n```sh\n $ pulumi import readarr:DownloadClients/downloadClientTransmission:DownloadClientTransmission example 1\n```\n\n ",
            "properties": {
                "addPaused": {
                    "type": "boolean",
                    "description": "Add paused flag.\n"
                },
                "bookCategory": {
                    "type": "string",
                    "description": "Book category.\n"
                },
                "bookDirectory": {
                    "type": "string",
                    "description": "Book directory.\n"
                },
                "enable": {
                    "type": "boolean",
                    "description": "Enable flag.\n"
                },
                "host": {
                    "type": "string",
                    "description": "host.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Download Client name.\n"
                },
                "olderBookPriority": {
                    "type": "integer",
                    "description": "Older TV priority. `0` Last, `1` First.\n"
                },
                "password": {
                    "type": "string",
                    "description": "Password.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "Port.\n"
                },
                "priority": {
                    "type": "integer",
                    "description": "Priority.\n"
                },
                "recentBookPriority": {
                    "type": "integer",
                    "description": "Recent TV priority. `0` Last, `1` First.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                },
                "urlBase": {
                    "type": "string",
                    "description": "Base URL.\n"
                },
                "useSsl": {
                    "type": "boolean",
                    "description": "Use SSL flag.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username.\n"
                }
            },
            "required": [
                "addPaused",
                "bookCategory",
                "bookDirectory",
                "enable",
                "host",
                "name",
                "olderBookPriority",
                "password",
                "port",
                "priority",
                "recentBookPriority",
                "tags",
                "urlBase",
                "useSsl",
                "username"
            ],
            "inputProperties": {
                "addPaused": {
                    "type": "boolean",
                    "description": "Add paused flag.\n"
                },
                "bookCategory": {
                    "type": "string",
                    "description": "Book category.\n"
                },
                "bookDirectory": {
                    "type": "string",
                    "description": "Book directory.\n"
                },
                "enable": {
                    "type": "boolean",
                    "description": "Enable flag.\n"
                },
                "host": {
                    "type": "string",
                    "description": "host.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Download Client name.\n"
                },
                "olderBookPriority": {
                    "type": "integer",
                    "description": "Older TV priority. `0` Last, `1` First.\n"
                },
                "password": {
                    "type": "string",
                    "description": "Password.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "Port.\n"
                },
                "priority": {
                    "type": "integer",
                    "description": "Priority.\n"
                },
                "recentBookPriority": {
                    "type": "integer",
                    "description": "Recent TV priority. `0` Last, `1` First.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                },
                "urlBase": {
                    "type": "string",
                    "description": "Base URL.\n"
                },
                "useSsl": {
                    "type": "boolean",
                    "description": "Use SSL flag.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username.\n"
                }
            },
            "requiredInputs": [
                "name"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DownloadClientTransmission resources.\n",
                "properties": {
                    "addPaused": {
                        "type": "boolean",
                        "description": "Add paused flag.\n"
                    },
                    "bookCategory": {
                        "type": "string",
                        "description": "Book category.\n"
                    },
                    "bookDirectory": {
                        "type": "string",
                        "description": "Book directory.\n"
                    },
                    "enable": {
                        "type": "boolean",
                        "description": "Enable flag.\n"
                    },
                    "host": {
                        "type": "string",
                        "description": "host.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Download Client name.\n"
                    },
                    "olderBookPriority": {
                        "type": "integer",
                        "description": "Older TV priority. `0` Last, `1` First.\n"
                    },
                    "password": {
                        "type": "string",
                        "description": "Password.\n"
                    },
                    "port": {
                        "type": "integer",
                        "description": "Port.\n"
                    },
                    "priority": {
                        "type": "integer",
                        "description": "Priority.\n"
                    },
                    "recentBookPriority": {
                        "type": "integer",
                        "description": "Recent TV priority. `0` Last, `1` First.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "List of associated tags.\n"
                    },
                    "urlBase": {
                        "type": "string",
                        "description": "Base URL.\n"
                    },
                    "useSsl": {
                        "type": "boolean",
                        "description": "Use SSL flag.\n"
                    },
                    "username": {
                        "type": "string",
                        "description": "Username.\n"
                    }
                },
                "type": "object"
            }
        },
        "readarr:DownloadClients/downloadClientUsenetBlackhole:DownloadClientUsenetBlackhole": {
            "description": "\u003c!-- subcategory:Download Clients --\u003eDownload Client Usenet Blackhole resource.\nFor more information refer to [Download Client](https://wiki.servarr.com/readarr/settings#download-clients) and [UsenetBlackhole](https://wiki.servarr.com/readarr/supported#usenetblackhole).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as readarr from \"@maienm/pulumi-readarr\";\n\nconst example = new readarr.downloadclients.DownloadClientUsenetBlackhole(\"example\", {\n    enable: true,\n    name: \"Example\",\n    nzbFolder: \"/nzb/\",\n    priority: 1,\n    watchFolder: \"/watch/\",\n});\n```\n```python\nimport pulumi\nimport pulumi_readarr as readarr\n\nexample = readarr.download_clients.DownloadClientUsenetBlackhole(\"example\",\n    enable=True,\n    name=\"Example\",\n    nzb_folder=\"/nzb/\",\n    priority=1,\n    watch_folder=\"/watch/\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Readarr = MaienM.Readarr;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Readarr.DownloadClients.DownloadClientUsenetBlackhole(\"example\", new()\n    {\n        Enable = true,\n        Name = \"Example\",\n        NzbFolder = \"/nzb/\",\n        Priority = 1,\n        WatchFolder = \"/watch/\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/MaienM/pulumi-readarr/sdk/v2/go/readarr/DownloadClients\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := DownloadClients.NewDownloadClientUsenetBlackhole(ctx, \"example\", \u0026DownloadClients.DownloadClientUsenetBlackholeArgs{\n\t\t\tEnable:      pulumi.Bool(true),\n\t\t\tName:        pulumi.String(\"Example\"),\n\t\t\tNzbFolder:   pulumi.String(\"/nzb/\"),\n\t\t\tPriority:    pulumi.Int(1),\n\t\t\tWatchFolder: pulumi.String(\"/watch/\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.readarr.DownloadClients.DownloadClientUsenetBlackhole;\nimport com.pulumi.readarr.DownloadClients.DownloadClientUsenetBlackholeArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new DownloadClientUsenetBlackhole(\"example\", DownloadClientUsenetBlackholeArgs.builder()        \n            .enable(true)\n            .name(\"Example\")\n            .nzbFolder(\"/nzb/\")\n            .priority(1)\n            .watchFolder(\"/watch/\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: readarr:DownloadClients:DownloadClientUsenetBlackhole\n    properties:\n      enable: true\n      name: Example\n      nzbFolder: /nzb/\n      priority: 1\n      watchFolder: /watch/\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nimport using the API/UI ID\n\n```sh\n $ pulumi import readarr:DownloadClients/downloadClientUsenetBlackhole:DownloadClientUsenetBlackhole example 1\n```\n\n ",
            "properties": {
                "enable": {
                    "type": "boolean",
                    "description": "Enable flag.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Download Client name.\n"
                },
                "nzbFolder": {
                    "type": "string",
                    "description": "Usenet folder.\n"
                },
                "priority": {
                    "type": "integer",
                    "description": "Priority.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                },
                "watchFolder": {
                    "type": "string",
                    "description": "Watch folder flag.\n"
                }
            },
            "required": [
                "enable",
                "name",
                "nzbFolder",
                "priority",
                "tags",
                "watchFolder"
            ],
            "inputProperties": {
                "enable": {
                    "type": "boolean",
                    "description": "Enable flag.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Download Client name.\n"
                },
                "nzbFolder": {
                    "type": "string",
                    "description": "Usenet folder.\n"
                },
                "priority": {
                    "type": "integer",
                    "description": "Priority.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                },
                "watchFolder": {
                    "type": "string",
                    "description": "Watch folder flag.\n"
                }
            },
            "requiredInputs": [
                "name",
                "nzbFolder",
                "watchFolder"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DownloadClientUsenetBlackhole resources.\n",
                "properties": {
                    "enable": {
                        "type": "boolean",
                        "description": "Enable flag.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Download Client name.\n"
                    },
                    "nzbFolder": {
                        "type": "string",
                        "description": "Usenet folder.\n"
                    },
                    "priority": {
                        "type": "integer",
                        "description": "Priority.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "List of associated tags.\n"
                    },
                    "watchFolder": {
                        "type": "string",
                        "description": "Watch folder flag.\n"
                    }
                },
                "type": "object"
            }
        },
        "readarr:DownloadClients/downloadClientUsenetDownloadStation:DownloadClientUsenetDownloadStation": {
            "description": "\u003c!-- subcategory:Download Clients --\u003eDownload Client UsenetDownloadStation resource.\nFor more information refer to [Download Client](https://wiki.servarr.com/readarr/settings#download-clients) and [UsenetDownloadStation](https://wiki.servarr.com/readarr/supported#usenetdownloadstation).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as readarr from \"@maienm/pulumi-readarr\";\n\nconst example = new readarr.downloadclients.DownloadClientUsenetDownloadStation(\"example\", {\n    enable: true,\n    host: \"downloadstation\",\n    name: \"Example\",\n    port: 5000,\n    priority: 1,\n});\n```\n```python\nimport pulumi\nimport pulumi_readarr as readarr\n\nexample = readarr.download_clients.DownloadClientUsenetDownloadStation(\"example\",\n    enable=True,\n    host=\"downloadstation\",\n    name=\"Example\",\n    port=5000,\n    priority=1)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Readarr = MaienM.Readarr;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Readarr.DownloadClients.DownloadClientUsenetDownloadStation(\"example\", new()\n    {\n        Enable = true,\n        Host = \"downloadstation\",\n        Name = \"Example\",\n        Port = 5000,\n        Priority = 1,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/MaienM/pulumi-readarr/sdk/v2/go/readarr/DownloadClients\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := DownloadClients.NewDownloadClientUsenetDownloadStation(ctx, \"example\", \u0026DownloadClients.DownloadClientUsenetDownloadStationArgs{\n\t\t\tEnable:   pulumi.Bool(true),\n\t\t\tHost:     pulumi.String(\"downloadstation\"),\n\t\t\tName:     pulumi.String(\"Example\"),\n\t\t\tPort:     pulumi.Int(5000),\n\t\t\tPriority: pulumi.Int(1),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.readarr.DownloadClients.DownloadClientUsenetDownloadStation;\nimport com.pulumi.readarr.DownloadClients.DownloadClientUsenetDownloadStationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new DownloadClientUsenetDownloadStation(\"example\", DownloadClientUsenetDownloadStationArgs.builder()        \n            .enable(true)\n            .host(\"downloadstation\")\n            .name(\"Example\")\n            .port(5000)\n            .priority(1)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: readarr:DownloadClients:DownloadClientUsenetDownloadStation\n    properties:\n      enable: true\n      host: downloadstation\n      name: Example\n      port: 5000\n      priority: 1\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nimport using the API/UI ID\n\n```sh\n $ pulumi import readarr:DownloadClients/downloadClientUsenetDownloadStation:DownloadClientUsenetDownloadStation example 1\n```\n\n ",
            "properties": {
                "bookCategory": {
                    "type": "string",
                    "description": "Book category.\n"
                },
                "bookDirectory": {
                    "type": "string",
                    "description": "Book directory.\n"
                },
                "enable": {
                    "type": "boolean",
                    "description": "Enable flag.\n"
                },
                "host": {
                    "type": "string",
                    "description": "host.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Download Client name.\n"
                },
                "password": {
                    "type": "string",
                    "description": "Password.\n",
                    "secret": true
                },
                "port": {
                    "type": "integer",
                    "description": "Port.\n"
                },
                "priority": {
                    "type": "integer",
                    "description": "Priority.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                },
                "useSsl": {
                    "type": "boolean",
                    "description": "Use SSL flag.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username.\n"
                }
            },
            "required": [
                "bookCategory",
                "bookDirectory",
                "enable",
                "host",
                "name",
                "password",
                "port",
                "priority",
                "tags",
                "useSsl",
                "username"
            ],
            "inputProperties": {
                "bookCategory": {
                    "type": "string",
                    "description": "Book category.\n"
                },
                "bookDirectory": {
                    "type": "string",
                    "description": "Book directory.\n"
                },
                "enable": {
                    "type": "boolean",
                    "description": "Enable flag.\n"
                },
                "host": {
                    "type": "string",
                    "description": "host.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Download Client name.\n"
                },
                "password": {
                    "type": "string",
                    "description": "Password.\n",
                    "secret": true
                },
                "port": {
                    "type": "integer",
                    "description": "Port.\n"
                },
                "priority": {
                    "type": "integer",
                    "description": "Priority.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                },
                "useSsl": {
                    "type": "boolean",
                    "description": "Use SSL flag.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username.\n"
                }
            },
            "requiredInputs": [
                "name"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DownloadClientUsenetDownloadStation resources.\n",
                "properties": {
                    "bookCategory": {
                        "type": "string",
                        "description": "Book category.\n"
                    },
                    "bookDirectory": {
                        "type": "string",
                        "description": "Book directory.\n"
                    },
                    "enable": {
                        "type": "boolean",
                        "description": "Enable flag.\n"
                    },
                    "host": {
                        "type": "string",
                        "description": "host.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Download Client name.\n"
                    },
                    "password": {
                        "type": "string",
                        "description": "Password.\n",
                        "secret": true
                    },
                    "port": {
                        "type": "integer",
                        "description": "Port.\n"
                    },
                    "priority": {
                        "type": "integer",
                        "description": "Priority.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "List of associated tags.\n"
                    },
                    "useSsl": {
                        "type": "boolean",
                        "description": "Use SSL flag.\n"
                    },
                    "username": {
                        "type": "string",
                        "description": "Username.\n"
                    }
                },
                "type": "object"
            }
        },
        "readarr:DownloadClients/downloadClientUtorrent:DownloadClientUtorrent": {
            "description": "\u003c!-- subcategory:Download Clients --\u003eDownload Client uTorrent resource.\nFor more information refer to [Download Client](https://wiki.servarr.com/readarr/settings#download-clients) and [uTorrent](https://wiki.servarr.com/readarr/supported#utorrent).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as readarr from \"@maienm/pulumi-readarr\";\n\nconst example = new readarr.downloadclients.DownloadClientUtorrent(\"example\", {\n    bookCategory: \"tv-readarr\",\n    enable: true,\n    host: \"utorrent\",\n    name: \"Example\",\n    port: 9091,\n    priority: 1,\n    urlBase: \"/utorrent/\",\n});\n```\n```python\nimport pulumi\nimport pulumi_readarr as readarr\n\nexample = readarr.download_clients.DownloadClientUtorrent(\"example\",\n    book_category=\"tv-readarr\",\n    enable=True,\n    host=\"utorrent\",\n    name=\"Example\",\n    port=9091,\n    priority=1,\n    url_base=\"/utorrent/\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Readarr = MaienM.Readarr;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Readarr.DownloadClients.DownloadClientUtorrent(\"example\", new()\n    {\n        BookCategory = \"tv-readarr\",\n        Enable = true,\n        Host = \"utorrent\",\n        Name = \"Example\",\n        Port = 9091,\n        Priority = 1,\n        UrlBase = \"/utorrent/\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/MaienM/pulumi-readarr/sdk/v2/go/readarr/DownloadClients\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := DownloadClients.NewDownloadClientUtorrent(ctx, \"example\", \u0026DownloadClients.DownloadClientUtorrentArgs{\n\t\t\tBookCategory: pulumi.String(\"tv-readarr\"),\n\t\t\tEnable:       pulumi.Bool(true),\n\t\t\tHost:         pulumi.String(\"utorrent\"),\n\t\t\tName:         pulumi.String(\"Example\"),\n\t\t\tPort:         pulumi.Int(9091),\n\t\t\tPriority:     pulumi.Int(1),\n\t\t\tUrlBase:      pulumi.String(\"/utorrent/\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.readarr.DownloadClients.DownloadClientUtorrent;\nimport com.pulumi.readarr.DownloadClients.DownloadClientUtorrentArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new DownloadClientUtorrent(\"example\", DownloadClientUtorrentArgs.builder()        \n            .bookCategory(\"tv-readarr\")\n            .enable(true)\n            .host(\"utorrent\")\n            .name(\"Example\")\n            .port(9091)\n            .priority(1)\n            .urlBase(\"/utorrent/\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: readarr:DownloadClients:DownloadClientUtorrent\n    properties:\n      bookCategory: tv-readarr\n      enable: true\n      host: utorrent\n      name: Example\n      port: 9091\n      priority: 1\n      urlBase: /utorrent/\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nimport using the API/UI ID\n\n```sh\n $ pulumi import readarr:DownloadClients/downloadClientUtorrent:DownloadClientUtorrent example 1\n```\n\n ",
            "properties": {
                "bookCategory": {
                    "type": "string",
                    "description": "Book category.\n"
                },
                "bookImportedCategory": {
                    "type": "string",
                    "description": "Book imported category.\n"
                },
                "enable": {
                    "type": "boolean",
                    "description": "Enable flag.\n"
                },
                "host": {
                    "type": "string",
                    "description": "host.\n"
                },
                "intialState": {
                    "type": "integer",
                    "description": "Initial state, with Stop support. `0` Start, `1` ForceStart, `2` Pause, `3` Stop.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Download Client name.\n"
                },
                "olderBookPriority": {
                    "type": "integer",
                    "description": "Older Music priority. `0` Last, `1` First.\n"
                },
                "password": {
                    "type": "string",
                    "description": "Password.\n",
                    "secret": true
                },
                "port": {
                    "type": "integer",
                    "description": "Port.\n"
                },
                "priority": {
                    "type": "integer",
                    "description": "Priority.\n"
                },
                "recentBookPriority": {
                    "type": "integer",
                    "description": "Recent Music priority. `0` Last, `1` First.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                },
                "urlBase": {
                    "type": "string",
                    "description": "Base URL.\n"
                },
                "useSsl": {
                    "type": "boolean",
                    "description": "Use SSL flag.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username.\n"
                }
            },
            "required": [
                "bookCategory",
                "bookImportedCategory",
                "enable",
                "host",
                "intialState",
                "name",
                "olderBookPriority",
                "password",
                "port",
                "priority",
                "recentBookPriority",
                "tags",
                "urlBase",
                "useSsl",
                "username"
            ],
            "inputProperties": {
                "bookCategory": {
                    "type": "string",
                    "description": "Book category.\n"
                },
                "bookImportedCategory": {
                    "type": "string",
                    "description": "Book imported category.\n"
                },
                "enable": {
                    "type": "boolean",
                    "description": "Enable flag.\n"
                },
                "host": {
                    "type": "string",
                    "description": "host.\n"
                },
                "intialState": {
                    "type": "integer",
                    "description": "Initial state, with Stop support. `0` Start, `1` ForceStart, `2` Pause, `3` Stop.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Download Client name.\n"
                },
                "olderBookPriority": {
                    "type": "integer",
                    "description": "Older Music priority. `0` Last, `1` First.\n"
                },
                "password": {
                    "type": "string",
                    "description": "Password.\n",
                    "secret": true
                },
                "port": {
                    "type": "integer",
                    "description": "Port.\n"
                },
                "priority": {
                    "type": "integer",
                    "description": "Priority.\n"
                },
                "recentBookPriority": {
                    "type": "integer",
                    "description": "Recent Music priority. `0` Last, `1` First.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                },
                "urlBase": {
                    "type": "string",
                    "description": "Base URL.\n"
                },
                "useSsl": {
                    "type": "boolean",
                    "description": "Use SSL flag.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username.\n"
                }
            },
            "requiredInputs": [
                "name"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DownloadClientUtorrent resources.\n",
                "properties": {
                    "bookCategory": {
                        "type": "string",
                        "description": "Book category.\n"
                    },
                    "bookImportedCategory": {
                        "type": "string",
                        "description": "Book imported category.\n"
                    },
                    "enable": {
                        "type": "boolean",
                        "description": "Enable flag.\n"
                    },
                    "host": {
                        "type": "string",
                        "description": "host.\n"
                    },
                    "intialState": {
                        "type": "integer",
                        "description": "Initial state, with Stop support. `0` Start, `1` ForceStart, `2` Pause, `3` Stop.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Download Client name.\n"
                    },
                    "olderBookPriority": {
                        "type": "integer",
                        "description": "Older Music priority. `0` Last, `1` First.\n"
                    },
                    "password": {
                        "type": "string",
                        "description": "Password.\n",
                        "secret": true
                    },
                    "port": {
                        "type": "integer",
                        "description": "Port.\n"
                    },
                    "priority": {
                        "type": "integer",
                        "description": "Priority.\n"
                    },
                    "recentBookPriority": {
                        "type": "integer",
                        "description": "Recent Music priority. `0` Last, `1` First.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "List of associated tags.\n"
                    },
                    "urlBase": {
                        "type": "string",
                        "description": "Base URL.\n"
                    },
                    "useSsl": {
                        "type": "boolean",
                        "description": "Use SSL flag.\n"
                    },
                    "username": {
                        "type": "string",
                        "description": "Username.\n"
                    }
                },
                "type": "object"
            }
        },
        "readarr:DownloadClients/downloadClientVuze:DownloadClientVuze": {
            "description": "\u003c!-- subcategory:Download Clients --\u003eDownload Client Vuze resource.\nFor more information refer to [Download Client](https://wiki.servarr.com/readarr/settings#download-clients) and [Vuze](https://wiki.servarr.com/readarr/supported#vuze).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as readarr from \"@maienm/pulumi-readarr\";\n\nconst example = new readarr.downloadclients.DownloadClientVuze(\"example\", {\n    enable: true,\n    host: \"vuze\",\n    name: \"Example\",\n    port: 9091,\n    priority: 1,\n    urlBase: \"/vuze/\",\n});\n```\n```python\nimport pulumi\nimport pulumi_readarr as readarr\n\nexample = readarr.download_clients.DownloadClientVuze(\"example\",\n    enable=True,\n    host=\"vuze\",\n    name=\"Example\",\n    port=9091,\n    priority=1,\n    url_base=\"/vuze/\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Readarr = MaienM.Readarr;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Readarr.DownloadClients.DownloadClientVuze(\"example\", new()\n    {\n        Enable = true,\n        Host = \"vuze\",\n        Name = \"Example\",\n        Port = 9091,\n        Priority = 1,\n        UrlBase = \"/vuze/\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/MaienM/pulumi-readarr/sdk/v2/go/readarr/DownloadClients\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := DownloadClients.NewDownloadClientVuze(ctx, \"example\", \u0026DownloadClients.DownloadClientVuzeArgs{\n\t\t\tEnable:   pulumi.Bool(true),\n\t\t\tHost:     pulumi.String(\"vuze\"),\n\t\t\tName:     pulumi.String(\"Example\"),\n\t\t\tPort:     pulumi.Int(9091),\n\t\t\tPriority: pulumi.Int(1),\n\t\t\tUrlBase:  pulumi.String(\"/vuze/\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.readarr.DownloadClients.DownloadClientVuze;\nimport com.pulumi.readarr.DownloadClients.DownloadClientVuzeArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new DownloadClientVuze(\"example\", DownloadClientVuzeArgs.builder()        \n            .enable(true)\n            .host(\"vuze\")\n            .name(\"Example\")\n            .port(9091)\n            .priority(1)\n            .urlBase(\"/vuze/\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: readarr:DownloadClients:DownloadClientVuze\n    properties:\n      enable: true\n      host: vuze\n      name: Example\n      port: 9091\n      priority: 1\n      urlBase: /vuze/\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nimport using the API/UI ID\n\n```sh\n $ pulumi import readarr:DownloadClients/downloadClientVuze:DownloadClientVuze example 1\n```\n\n ",
            "properties": {
                "addPaused": {
                    "type": "boolean",
                    "description": "Add paused flag.\n"
                },
                "bookCategory": {
                    "type": "string",
                    "description": "Book category.\n"
                },
                "bookDirectory": {
                    "type": "string",
                    "description": "Book directory.\n"
                },
                "enable": {
                    "type": "boolean",
                    "description": "Enable flag.\n"
                },
                "host": {
                    "type": "string",
                    "description": "host.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Download Client name.\n"
                },
                "olderBookPriority": {
                    "type": "integer",
                    "description": "Older Music priority. `0` Last, `1` First.\n"
                },
                "password": {
                    "type": "string",
                    "description": "Password.\n",
                    "secret": true
                },
                "port": {
                    "type": "integer",
                    "description": "Port.\n"
                },
                "priority": {
                    "type": "integer",
                    "description": "Priority.\n"
                },
                "recentBookPriority": {
                    "type": "integer",
                    "description": "Recent Music priority. `0` Last, `1` First.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                },
                "urlBase": {
                    "type": "string",
                    "description": "Base URL.\n"
                },
                "useSsl": {
                    "type": "boolean",
                    "description": "Use SSL flag.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username.\n"
                }
            },
            "required": [
                "addPaused",
                "bookCategory",
                "bookDirectory",
                "enable",
                "host",
                "name",
                "olderBookPriority",
                "password",
                "port",
                "priority",
                "recentBookPriority",
                "tags",
                "urlBase",
                "useSsl",
                "username"
            ],
            "inputProperties": {
                "addPaused": {
                    "type": "boolean",
                    "description": "Add paused flag.\n"
                },
                "bookCategory": {
                    "type": "string",
                    "description": "Book category.\n"
                },
                "bookDirectory": {
                    "type": "string",
                    "description": "Book directory.\n"
                },
                "enable": {
                    "type": "boolean",
                    "description": "Enable flag.\n"
                },
                "host": {
                    "type": "string",
                    "description": "host.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Download Client name.\n"
                },
                "olderBookPriority": {
                    "type": "integer",
                    "description": "Older Music priority. `0` Last, `1` First.\n"
                },
                "password": {
                    "type": "string",
                    "description": "Password.\n",
                    "secret": true
                },
                "port": {
                    "type": "integer",
                    "description": "Port.\n"
                },
                "priority": {
                    "type": "integer",
                    "description": "Priority.\n"
                },
                "recentBookPriority": {
                    "type": "integer",
                    "description": "Recent Music priority. `0` Last, `1` First.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                },
                "urlBase": {
                    "type": "string",
                    "description": "Base URL.\n"
                },
                "useSsl": {
                    "type": "boolean",
                    "description": "Use SSL flag.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username.\n"
                }
            },
            "requiredInputs": [
                "name"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DownloadClientVuze resources.\n",
                "properties": {
                    "addPaused": {
                        "type": "boolean",
                        "description": "Add paused flag.\n"
                    },
                    "bookCategory": {
                        "type": "string",
                        "description": "Book category.\n"
                    },
                    "bookDirectory": {
                        "type": "string",
                        "description": "Book directory.\n"
                    },
                    "enable": {
                        "type": "boolean",
                        "description": "Enable flag.\n"
                    },
                    "host": {
                        "type": "string",
                        "description": "host.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Download Client name.\n"
                    },
                    "olderBookPriority": {
                        "type": "integer",
                        "description": "Older Music priority. `0` Last, `1` First.\n"
                    },
                    "password": {
                        "type": "string",
                        "description": "Password.\n",
                        "secret": true
                    },
                    "port": {
                        "type": "integer",
                        "description": "Port.\n"
                    },
                    "priority": {
                        "type": "integer",
                        "description": "Priority.\n"
                    },
                    "recentBookPriority": {
                        "type": "integer",
                        "description": "Recent Music priority. `0` Last, `1` First.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "List of associated tags.\n"
                    },
                    "urlBase": {
                        "type": "string",
                        "description": "Base URL.\n"
                    },
                    "useSsl": {
                        "type": "boolean",
                        "description": "Use SSL flag.\n"
                    },
                    "username": {
                        "type": "string",
                        "description": "Username.\n"
                    }
                },
                "type": "object"
            }
        },
        "readarr:DownloadClients/remotePathMapping:RemotePathMapping": {
            "description": "\u003c!-- subcategory:Download Clients --\u003eRemote Path Mapping resource.\nFor more information refer to [Remote Path Mapping](https://wiki.servarr.com/readarr/settings#remote-path-mappings) documentation.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as readarr from \"@maienm/pulumi-readarr\";\n\nconst example = new readarr.downloadclients.RemotePathMapping(\"example\", {\n    host: \"www.transmission.com\",\n    localPath: \"/transmission-download/\",\n    remotePath: \"/download/\",\n});\n```\n```python\nimport pulumi\nimport pulumi_readarr as readarr\n\nexample = readarr.download_clients.RemotePathMapping(\"example\",\n    host=\"www.transmission.com\",\n    local_path=\"/transmission-download/\",\n    remote_path=\"/download/\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Readarr = MaienM.Readarr;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Readarr.DownloadClients.RemotePathMapping(\"example\", new()\n    {\n        Host = \"www.transmission.com\",\n        LocalPath = \"/transmission-download/\",\n        RemotePath = \"/download/\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/MaienM/pulumi-readarr/sdk/v2/go/readarr/DownloadClients\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := DownloadClients.NewRemotePathMapping(ctx, \"example\", \u0026DownloadClients.RemotePathMappingArgs{\n\t\t\tHost:       pulumi.String(\"www.transmission.com\"),\n\t\t\tLocalPath:  pulumi.String(\"/transmission-download/\"),\n\t\t\tRemotePath: pulumi.String(\"/download/\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.readarr.DownloadClients.RemotePathMapping;\nimport com.pulumi.readarr.DownloadClients.RemotePathMappingArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new RemotePathMapping(\"example\", RemotePathMappingArgs.builder()        \n            .host(\"www.transmission.com\")\n            .localPath(\"/transmission-download/\")\n            .remotePath(\"/download/\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: readarr:DownloadClients:RemotePathMapping\n    properties:\n      host: www.transmission.com\n      localPath: /transmission-download/\n      remotePath: /download/\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nimport using the API/UI ID\n\n```sh\n $ pulumi import readarr:DownloadClients/remotePathMapping:RemotePathMapping example 10\n```\n\n ",
            "properties": {
                "host": {
                    "type": "string",
                    "description": "Download Client host.\n"
                },
                "localPath": {
                    "type": "string",
                    "description": "Local path.\n"
                },
                "remotePath": {
                    "type": "string",
                    "description": "Download Client remote path.\n"
                }
            },
            "required": [
                "host",
                "localPath",
                "remotePath"
            ],
            "inputProperties": {
                "host": {
                    "type": "string",
                    "description": "Download Client host.\n"
                },
                "localPath": {
                    "type": "string",
                    "description": "Local path.\n"
                },
                "remotePath": {
                    "type": "string",
                    "description": "Download Client remote path.\n"
                }
            },
            "requiredInputs": [
                "host",
                "localPath",
                "remotePath"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering RemotePathMapping resources.\n",
                "properties": {
                    "host": {
                        "type": "string",
                        "description": "Download Client host.\n"
                    },
                    "localPath": {
                        "type": "string",
                        "description": "Local path.\n"
                    },
                    "remotePath": {
                        "type": "string",
                        "description": "Download Client remote path.\n"
                    }
                },
                "type": "object"
            }
        },
        "readarr:ImportLists/importList:ImportList": {
            "description": "\u003c!-- subcategory:Import Lists --\u003eGeneric Import List resource. When possible use a specific resource instead.\nFor more information refer to [Import List](https://wiki.servarr.com/readarr/settings#import-lists).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.readarr.ImportLists.ImportList;\nimport com.pulumi.readarr.ImportLists.ImportListArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new ImportList(\"example\", ImportListArgs.builder()        \n            .enableAutomaticAdd(false)\n            .shouldMonitor(\"entireAuthor\")\n            .shouldSearch(false)\n            .listType(\"program\")\n            .monitorNewItems(\"all\")\n            .rootFolderPath(readarr_root_folder.example().path())\n            .qualityProfileId(readarr_quality_profile.example().id())\n            .metadataProfileId(readarr_metadata_profile.example().id())\n            .name(\"Example\")\n            .implementation(\"ReadarrImport\")\n            .configContract(\"ReadarrSettings\")\n            .tags(            \n                1,\n                2)\n            .tagIds(            \n                1,\n                2)\n            .profileIds(1)\n            .baseUrl(\"http://127.0.0.1:8686\")\n            .apiKey(\"APIKey\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: readarr:ImportLists:ImportList\n    properties:\n      enableAutomaticAdd: false\n      shouldMonitor: entireAuthor\n      shouldSearch: false\n      listType: program\n      monitorNewItems: all\n      rootFolderPath: ${readarr_root_folder.example.path}\n      qualityProfileId: ${readarr_quality_profile.example.id}\n      metadataProfileId: ${readarr_metadata_profile.example.id}\n      name: Example\n      implementation: ReadarrImport\n      configContract: ReadarrSettings\n      tags:\n        - 1\n        - 2\n      tagIds:\n        - 1\n        - 2\n      profileIds:\n        - 1\n      baseUrl: http://127.0.0.1:8686\n      apiKey: APIKey\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nimport using the API/UI ID\n\n```sh\n $ pulumi import readarr:ImportLists/importList:ImportList example 1\n```\n\n ",
            "properties": {
                "accessToken": {
                    "type": "string",
                    "description": "Access token.\n",
                    "secret": true
                },
                "accessTokenSecret": {
                    "type": "string",
                    "description": "Access token secret.\n",
                    "secret": true
                },
                "apiKey": {
                    "type": "string",
                    "description": "API key.\n",
                    "secret": true
                },
                "baseUrl": {
                    "type": "string",
                    "description": "Base URL.\n"
                },
                "bookshelfIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Bookshelf IDs.\n"
                },
                "configContract": {
                    "type": "string",
                    "description": "ImportList configuration template.\n"
                },
                "enableAutomaticAdd": {
                    "type": "boolean",
                    "description": "Enable automatic add flag.\n"
                },
                "implementation": {
                    "type": "string",
                    "description": "ImportList implementation name.\n"
                },
                "listId": {
                    "type": "integer",
                    "description": "List ID.\n"
                },
                "listOrder": {
                    "type": "integer",
                    "description": "List order.\n"
                },
                "listType": {
                    "type": "string",
                    "description": "List type.\n"
                },
                "metadataProfileId": {
                    "type": "integer",
                    "description": "Metadata profile ID.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Import List name.\n"
                },
                "profileIds": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "Profile IDs.\n"
                },
                "qualityProfileId": {
                    "type": "integer",
                    "description": "Quality profile ID.\n"
                },
                "requestTokenSecret": {
                    "type": "string",
                    "description": "Request token secret.\n",
                    "secret": true
                },
                "rootFolderPath": {
                    "type": "string",
                    "description": "Root folder path.\n"
                },
                "seriesId": {
                    "type": "integer",
                    "description": "Series ID.\n"
                },
                "shouldMonitor": {
                    "type": "string",
                    "description": "Should monitor.\n"
                },
                "shouldSearch": {
                    "type": "boolean",
                    "description": "Should search flag.\n"
                },
                "tagIds": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "Tag IDs.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                },
                "userId": {
                    "type": "string",
                    "description": "User ID.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username.\n"
                }
            },
            "required": [
                "accessToken",
                "accessTokenSecret",
                "apiKey",
                "baseUrl",
                "bookshelfIds",
                "configContract",
                "enableAutomaticAdd",
                "implementation",
                "listId",
                "listOrder",
                "listType",
                "metadataProfileId",
                "name",
                "profileIds",
                "qualityProfileId",
                "requestTokenSecret",
                "rootFolderPath",
                "seriesId",
                "shouldMonitor",
                "shouldSearch",
                "tagIds",
                "tags",
                "userId",
                "username"
            ],
            "inputProperties": {
                "accessToken": {
                    "type": "string",
                    "description": "Access token.\n",
                    "secret": true
                },
                "accessTokenSecret": {
                    "type": "string",
                    "description": "Access token secret.\n",
                    "secret": true
                },
                "apiKey": {
                    "type": "string",
                    "description": "API key.\n",
                    "secret": true
                },
                "baseUrl": {
                    "type": "string",
                    "description": "Base URL.\n"
                },
                "bookshelfIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Bookshelf IDs.\n"
                },
                "configContract": {
                    "type": "string",
                    "description": "ImportList configuration template.\n"
                },
                "enableAutomaticAdd": {
                    "type": "boolean",
                    "description": "Enable automatic add flag.\n"
                },
                "implementation": {
                    "type": "string",
                    "description": "ImportList implementation name.\n"
                },
                "listId": {
                    "type": "integer",
                    "description": "List ID.\n"
                },
                "listOrder": {
                    "type": "integer",
                    "description": "List order.\n"
                },
                "listType": {
                    "type": "string",
                    "description": "List type.\n"
                },
                "metadataProfileId": {
                    "type": "integer",
                    "description": "Metadata profile ID.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Import List name.\n"
                },
                "profileIds": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "Profile IDs.\n"
                },
                "qualityProfileId": {
                    "type": "integer",
                    "description": "Quality profile ID.\n"
                },
                "requestTokenSecret": {
                    "type": "string",
                    "description": "Request token secret.\n",
                    "secret": true
                },
                "rootFolderPath": {
                    "type": "string",
                    "description": "Root folder path.\n"
                },
                "seriesId": {
                    "type": "integer",
                    "description": "Series ID.\n"
                },
                "shouldMonitor": {
                    "type": "string",
                    "description": "Should monitor.\n"
                },
                "shouldSearch": {
                    "type": "boolean",
                    "description": "Should search flag.\n"
                },
                "tagIds": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "Tag IDs.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                },
                "userId": {
                    "type": "string",
                    "description": "User ID.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username.\n"
                }
            },
            "requiredInputs": [
                "configContract",
                "listType",
                "name"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ImportList resources.\n",
                "properties": {
                    "accessToken": {
                        "type": "string",
                        "description": "Access token.\n",
                        "secret": true
                    },
                    "accessTokenSecret": {
                        "type": "string",
                        "description": "Access token secret.\n",
                        "secret": true
                    },
                    "apiKey": {
                        "type": "string",
                        "description": "API key.\n",
                        "secret": true
                    },
                    "baseUrl": {
                        "type": "string",
                        "description": "Base URL.\n"
                    },
                    "bookshelfIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Bookshelf IDs.\n"
                    },
                    "configContract": {
                        "type": "string",
                        "description": "ImportList configuration template.\n"
                    },
                    "enableAutomaticAdd": {
                        "type": "boolean",
                        "description": "Enable automatic add flag.\n"
                    },
                    "implementation": {
                        "type": "string",
                        "description": "ImportList implementation name.\n"
                    },
                    "listId": {
                        "type": "integer",
                        "description": "List ID.\n"
                    },
                    "listOrder": {
                        "type": "integer",
                        "description": "List order.\n"
                    },
                    "listType": {
                        "type": "string",
                        "description": "List type.\n"
                    },
                    "metadataProfileId": {
                        "type": "integer",
                        "description": "Metadata profile ID.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Import List name.\n"
                    },
                    "profileIds": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "Profile IDs.\n"
                    },
                    "qualityProfileId": {
                        "type": "integer",
                        "description": "Quality profile ID.\n"
                    },
                    "requestTokenSecret": {
                        "type": "string",
                        "description": "Request token secret.\n",
                        "secret": true
                    },
                    "rootFolderPath": {
                        "type": "string",
                        "description": "Root folder path.\n"
                    },
                    "seriesId": {
                        "type": "integer",
                        "description": "Series ID.\n"
                    },
                    "shouldMonitor": {
                        "type": "string",
                        "description": "Should monitor.\n"
                    },
                    "shouldSearch": {
                        "type": "boolean",
                        "description": "Should search flag.\n"
                    },
                    "tagIds": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "Tag IDs.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "List of associated tags.\n"
                    },
                    "userId": {
                        "type": "string",
                        "description": "User ID.\n"
                    },
                    "username": {
                        "type": "string",
                        "description": "Username.\n"
                    }
                },
                "type": "object"
            }
        },
        "readarr:ImportLists/importListExclusion:ImportListExclusion": {
            "description": "\u003c!-- subcategory:Import Lists --\u003eImport List Exclusion resource.\nFor more information refer to [ImportListExclusions](https://wiki.servarr.com/readarr/settings#list-exclusions) documentation.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as readarr from \"@maienm/pulumi-readarr\";\n\nconst example = new readarr.importlists.ImportListExclusion(\"example\", {\n    authorName: \"Agatha Christie\",\n    foreignId: \"46a098f3-272d-4bec-9746-67e8ab48ed40\",\n});\n```\n```python\nimport pulumi\nimport pulumi_readarr as readarr\n\nexample = readarr.import_lists.ImportListExclusion(\"example\",\n    author_name=\"Agatha Christie\",\n    foreign_id=\"46a098f3-272d-4bec-9746-67e8ab48ed40\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Readarr = MaienM.Readarr;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Readarr.ImportLists.ImportListExclusion(\"example\", new()\n    {\n        AuthorName = \"Agatha Christie\",\n        ForeignId = \"46a098f3-272d-4bec-9746-67e8ab48ed40\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/MaienM/pulumi-readarr/sdk/v2/go/readarr/ImportLists\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := ImportLists.NewImportListExclusion(ctx, \"example\", \u0026ImportLists.ImportListExclusionArgs{\n\t\t\tAuthorName: pulumi.String(\"Agatha Christie\"),\n\t\t\tForeignId:  pulumi.String(\"46a098f3-272d-4bec-9746-67e8ab48ed40\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.readarr.ImportLists.ImportListExclusion;\nimport com.pulumi.readarr.ImportLists.ImportListExclusionArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new ImportListExclusion(\"example\", ImportListExclusionArgs.builder()        \n            .authorName(\"Agatha Christie\")\n            .foreignId(\"46a098f3-272d-4bec-9746-67e8ab48ed40\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: readarr:ImportLists:ImportListExclusion\n    properties:\n      authorName: Agatha Christie\n      foreignId: 46a098f3-272d-4bec-9746-67e8ab48ed40\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nimport using the API/UI ID\n\n```sh\n $ pulumi import readarr:ImportLists/importListExclusion:ImportListExclusion example 10\n```\n\n ",
            "properties": {
                "authorName": {
                    "type": "string",
                    "description": "Author to be excluded.\n"
                },
                "foreignId": {
                    "type": "string",
                    "description": "Musicbrainz ID.\n"
                }
            },
            "required": [
                "authorName",
                "foreignId"
            ],
            "inputProperties": {
                "authorName": {
                    "type": "string",
                    "description": "Author to be excluded.\n"
                },
                "foreignId": {
                    "type": "string",
                    "description": "Musicbrainz ID.\n"
                }
            },
            "requiredInputs": [
                "authorName",
                "foreignId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ImportListExclusion resources.\n",
                "properties": {
                    "authorName": {
                        "type": "string",
                        "description": "Author to be excluded.\n"
                    },
                    "foreignId": {
                        "type": "string",
                        "description": "Musicbrainz ID.\n"
                    }
                },
                "type": "object"
            }
        },
        "readarr:ImportLists/importListGoodreadsBookshelf:ImportListGoodreadsBookshelf": {
            "description": "\u003c!-- subcategory:Import Lists --\u003eImport List Goodreads Bookshelf resource.\nFor more information refer to [Import List](https://wiki.servarr.com/readarr/settings#import-lists) and [Goodreads Bookshelf](https://wiki.servarr.com/readarr/supported#goodreadsbookshelf).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as readarr from \"@maienm/pulumi-readarr\";\n\nconst example = new readarr.importlists.ImportListGoodreadsBookshelf(\"example\", {\n    accessToken: \"ExampleAccessToken\",\n    accessTokenSecret: \"ExampleAccessTokenSecret\",\n    bookshelfIds: [\n        \"currently-reading\",\n        \"read\",\n        \"to-read\",\n    ],\n    enableAutomaticAdd: false,\n    metadataProfileId: 1,\n    name: \"Example\",\n    qualityProfileId: 1,\n    rootFolderPath: \"/books\",\n    shouldMonitor: \"specificBook\",\n    shouldSearch: false,\n    tags: [\n        1,\n        2,\n        3,\n    ],\n    userId: \"163730408\",\n    username: \"Test User\",\n});\n```\n```python\nimport pulumi\nimport pulumi_readarr as readarr\n\nexample = readarr.import_lists.ImportListGoodreadsBookshelf(\"example\",\n    access_token=\"ExampleAccessToken\",\n    access_token_secret=\"ExampleAccessTokenSecret\",\n    bookshelf_ids=[\n        \"currently-reading\",\n        \"read\",\n        \"to-read\",\n    ],\n    enable_automatic_add=False,\n    metadata_profile_id=1,\n    name=\"Example\",\n    quality_profile_id=1,\n    root_folder_path=\"/books\",\n    should_monitor=\"specificBook\",\n    should_search=False,\n    tags=[\n        1,\n        2,\n        3,\n    ],\n    user_id=\"163730408\",\n    username=\"Test User\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Readarr = MaienM.Readarr;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Readarr.ImportLists.ImportListGoodreadsBookshelf(\"example\", new()\n    {\n        AccessToken = \"ExampleAccessToken\",\n        AccessTokenSecret = \"ExampleAccessTokenSecret\",\n        BookshelfIds = new[]\n        {\n            \"currently-reading\",\n            \"read\",\n            \"to-read\",\n        },\n        EnableAutomaticAdd = false,\n        MetadataProfileId = 1,\n        Name = \"Example\",\n        QualityProfileId = 1,\n        RootFolderPath = \"/books\",\n        ShouldMonitor = \"specificBook\",\n        ShouldSearch = false,\n        Tags = new[]\n        {\n            1,\n            2,\n            3,\n        },\n        UserId = \"163730408\",\n        Username = \"Test User\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/MaienM/pulumi-readarr/sdk/v2/go/readarr/ImportLists\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := ImportLists.NewImportListGoodreadsBookshelf(ctx, \"example\", \u0026ImportLists.ImportListGoodreadsBookshelfArgs{\n\t\t\tAccessToken:       pulumi.String(\"ExampleAccessToken\"),\n\t\t\tAccessTokenSecret: pulumi.String(\"ExampleAccessTokenSecret\"),\n\t\t\tBookshelfIds: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"currently-reading\"),\n\t\t\t\tpulumi.String(\"read\"),\n\t\t\t\tpulumi.String(\"to-read\"),\n\t\t\t},\n\t\t\tEnableAutomaticAdd: pulumi.Bool(false),\n\t\t\tMetadataProfileId:  pulumi.Int(1),\n\t\t\tName:               pulumi.String(\"Example\"),\n\t\t\tQualityProfileId:   pulumi.Int(1),\n\t\t\tRootFolderPath:     pulumi.String(\"/books\"),\n\t\t\tShouldMonitor:      pulumi.String(\"specificBook\"),\n\t\t\tShouldSearch:       pulumi.Bool(false),\n\t\t\tTags: pulumi.IntArray{\n\t\t\t\tpulumi.Int(1),\n\t\t\t\tpulumi.Int(2),\n\t\t\t\tpulumi.Int(3),\n\t\t\t},\n\t\t\tUserId:   pulumi.String(\"163730408\"),\n\t\t\tUsername: pulumi.String(\"Test User\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.readarr.ImportLists.ImportListGoodreadsBookshelf;\nimport com.pulumi.readarr.ImportLists.ImportListGoodreadsBookshelfArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new ImportListGoodreadsBookshelf(\"example\", ImportListGoodreadsBookshelfArgs.builder()        \n            .accessToken(\"ExampleAccessToken\")\n            .accessTokenSecret(\"ExampleAccessTokenSecret\")\n            .bookshelfIds(            \n                \"currently-reading\",\n                \"read\",\n                \"to-read\")\n            .enableAutomaticAdd(false)\n            .metadataProfileId(1)\n            .name(\"Example\")\n            .qualityProfileId(1)\n            .rootFolderPath(\"/books\")\n            .shouldMonitor(\"specificBook\")\n            .shouldSearch(false)\n            .tags(            \n                1,\n                2,\n                3)\n            .userId(\"163730408\")\n            .username(\"Test User\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: readarr:ImportLists:ImportListGoodreadsBookshelf\n    properties:\n      accessToken: ExampleAccessToken\n      accessTokenSecret: ExampleAccessTokenSecret\n      bookshelfIds:\n        - currently-reading\n        - read\n        - to-read\n      enableAutomaticAdd: false\n      metadataProfileId: 1\n      name: Example\n      qualityProfileId: 1\n      rootFolderPath: /books\n      shouldMonitor: specificBook\n      shouldSearch: false\n      tags:\n        - 1\n        - 2\n        - 3\n      userId: '163730408'\n      username: Test User\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nimport using the API/UI ID\n\n```sh\n $ pulumi import readarr:ImportLists/importListGoodreadsBookshelf:ImportListGoodreadsBookshelf example 1\n```\n\n ",
            "properties": {
                "accessToken": {
                    "type": "string",
                    "description": "Access token.\n",
                    "secret": true
                },
                "accessTokenSecret": {
                    "type": "string",
                    "description": "Access token secret.\n",
                    "secret": true
                },
                "bookshelfIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Bookshelf IDs.\n"
                },
                "enableAutomaticAdd": {
                    "type": "boolean",
                    "description": "Enable automatic add flag.\n"
                },
                "listOrder": {
                    "type": "integer",
                    "description": "List order.\n"
                },
                "metadataProfileId": {
                    "type": "integer",
                    "description": "Metadata profile ID.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Import List name.\n"
                },
                "qualityProfileId": {
                    "type": "integer",
                    "description": "Quality profile ID.\n"
                },
                "requestTokenSecret": {
                    "type": "string",
                    "description": "Request token secret.\n",
                    "secret": true
                },
                "rootFolderPath": {
                    "type": "string",
                    "description": "Root folder path.\n"
                },
                "shouldMonitor": {
                    "type": "string",
                    "description": "Should monitor.\n"
                },
                "shouldSearch": {
                    "type": "boolean",
                    "description": "Should search flag.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                },
                "userId": {
                    "type": "string",
                    "description": "User ID.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username.\n"
                }
            },
            "required": [
                "accessToken",
                "accessTokenSecret",
                "bookshelfIds",
                "enableAutomaticAdd",
                "listOrder",
                "metadataProfileId",
                "name",
                "qualityProfileId",
                "requestTokenSecret",
                "rootFolderPath",
                "shouldMonitor",
                "shouldSearch",
                "tags",
                "userId",
                "username"
            ],
            "inputProperties": {
                "accessToken": {
                    "type": "string",
                    "description": "Access token.\n",
                    "secret": true
                },
                "accessTokenSecret": {
                    "type": "string",
                    "description": "Access token secret.\n",
                    "secret": true
                },
                "bookshelfIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Bookshelf IDs.\n"
                },
                "enableAutomaticAdd": {
                    "type": "boolean",
                    "description": "Enable automatic add flag.\n"
                },
                "listOrder": {
                    "type": "integer",
                    "description": "List order.\n"
                },
                "metadataProfileId": {
                    "type": "integer",
                    "description": "Metadata profile ID.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Import List name.\n"
                },
                "qualityProfileId": {
                    "type": "integer",
                    "description": "Quality profile ID.\n"
                },
                "requestTokenSecret": {
                    "type": "string",
                    "description": "Request token secret.\n",
                    "secret": true
                },
                "rootFolderPath": {
                    "type": "string",
                    "description": "Root folder path.\n"
                },
                "shouldMonitor": {
                    "type": "string",
                    "description": "Should monitor.\n"
                },
                "shouldSearch": {
                    "type": "boolean",
                    "description": "Should search flag.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                },
                "userId": {
                    "type": "string",
                    "description": "User ID.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username.\n"
                }
            },
            "requiredInputs": [
                "accessToken",
                "accessTokenSecret",
                "name",
                "username"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ImportListGoodreadsBookshelf resources.\n",
                "properties": {
                    "accessToken": {
                        "type": "string",
                        "description": "Access token.\n",
                        "secret": true
                    },
                    "accessTokenSecret": {
                        "type": "string",
                        "description": "Access token secret.\n",
                        "secret": true
                    },
                    "bookshelfIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Bookshelf IDs.\n"
                    },
                    "enableAutomaticAdd": {
                        "type": "boolean",
                        "description": "Enable automatic add flag.\n"
                    },
                    "listOrder": {
                        "type": "integer",
                        "description": "List order.\n"
                    },
                    "metadataProfileId": {
                        "type": "integer",
                        "description": "Metadata profile ID.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Import List name.\n"
                    },
                    "qualityProfileId": {
                        "type": "integer",
                        "description": "Quality profile ID.\n"
                    },
                    "requestTokenSecret": {
                        "type": "string",
                        "description": "Request token secret.\n",
                        "secret": true
                    },
                    "rootFolderPath": {
                        "type": "string",
                        "description": "Root folder path.\n"
                    },
                    "shouldMonitor": {
                        "type": "string",
                        "description": "Should monitor.\n"
                    },
                    "shouldSearch": {
                        "type": "boolean",
                        "description": "Should search flag.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "List of associated tags.\n"
                    },
                    "userId": {
                        "type": "string",
                        "description": "User ID.\n"
                    },
                    "username": {
                        "type": "string",
                        "description": "Username.\n"
                    }
                },
                "type": "object"
            }
        },
        "readarr:ImportLists/importListGoodreadsList:ImportListGoodreadsList": {
            "description": "\u003c!-- subcategory:Import Lists --\u003eImport List Goodreads List resource.\nFor more information refer to [Import List](https://wiki.servarr.com/readarr/settings#import-lists) and [Goodreads List](https://wiki.servarr.com/readarr/supported#goodreadslist).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as readarr from \"@maienm/pulumi-readarr\";\n\nconst example = new readarr.importlists.ImportListGoodreadsList(\"example\", {\n    enableAutomaticAdd: false,\n    listId: 8544254,\n    metadataProfileId: 1,\n    qualityProfileId: 1,\n    rootFolderPath: \"/books\",\n    shouldMonitor: \"specificBook\",\n    shouldSearch: false,\n    tags: [\n        1,\n        2,\n        3,\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_readarr as readarr\n\nexample = readarr.import_lists.ImportListGoodreadsList(\"example\",\n    enable_automatic_add=False,\n    list_id=8544254,\n    metadata_profile_id=1,\n    quality_profile_id=1,\n    root_folder_path=\"/books\",\n    should_monitor=\"specificBook\",\n    should_search=False,\n    tags=[\n        1,\n        2,\n        3,\n    ])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Readarr = MaienM.Readarr;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Readarr.ImportLists.ImportListGoodreadsList(\"example\", new()\n    {\n        EnableAutomaticAdd = false,\n        ListId = 8544254,\n        MetadataProfileId = 1,\n        QualityProfileId = 1,\n        RootFolderPath = \"/books\",\n        ShouldMonitor = \"specificBook\",\n        ShouldSearch = false,\n        Tags = new[]\n        {\n            1,\n            2,\n            3,\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/MaienM/pulumi-readarr/sdk/v2/go/readarr/ImportLists\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := ImportLists.NewImportListGoodreadsList(ctx, \"example\", \u0026ImportLists.ImportListGoodreadsListArgs{\n\t\t\tEnableAutomaticAdd: pulumi.Bool(false),\n\t\t\tListId:             pulumi.Int(8544254),\n\t\t\tMetadataProfileId:  pulumi.Int(1),\n\t\t\tQualityProfileId:   pulumi.Int(1),\n\t\t\tRootFolderPath:     pulumi.String(\"/books\"),\n\t\t\tShouldMonitor:      pulumi.String(\"specificBook\"),\n\t\t\tShouldSearch:       pulumi.Bool(false),\n\t\t\tTags: pulumi.IntArray{\n\t\t\t\tpulumi.Int(1),\n\t\t\t\tpulumi.Int(2),\n\t\t\t\tpulumi.Int(3),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.readarr.ImportLists.ImportListGoodreadsList;\nimport com.pulumi.readarr.ImportLists.ImportListGoodreadsListArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new ImportListGoodreadsList(\"example\", ImportListGoodreadsListArgs.builder()        \n            .enableAutomaticAdd(false)\n            .listId(8544254)\n            .metadataProfileId(1)\n            .qualityProfileId(1)\n            .rootFolderPath(\"/books\")\n            .shouldMonitor(\"specificBook\")\n            .shouldSearch(false)\n            .tags(            \n                1,\n                2,\n                3)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: readarr:ImportLists:ImportListGoodreadsList\n    properties:\n      enableAutomaticAdd: false\n      listId: 8.544254e+06\n      metadataProfileId: 1\n      qualityProfileId: 1\n      rootFolderPath: /books\n      shouldMonitor: specificBook\n      shouldSearch: false\n      tags:\n        - 1\n        - 2\n        - 3\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nimport using the API/UI ID\n\n```sh\n $ pulumi import readarr:ImportLists/importListGoodreadsList:ImportListGoodreadsList example 1\n```\n\n ",
            "properties": {
                "enableAutomaticAdd": {
                    "type": "boolean",
                    "description": "Enable automatic add flag.\n"
                },
                "listId": {
                    "type": "integer",
                    "description": "List ID.\n"
                },
                "listOrder": {
                    "type": "integer",
                    "description": "List order.\n"
                },
                "metadataProfileId": {
                    "type": "integer",
                    "description": "Metadata profile ID.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Import List name.\n"
                },
                "qualityProfileId": {
                    "type": "integer",
                    "description": "Quality profile ID.\n"
                },
                "rootFolderPath": {
                    "type": "string",
                    "description": "Root folder path.\n"
                },
                "shouldMonitor": {
                    "type": "string",
                    "description": "Should monitor.\n"
                },
                "shouldSearch": {
                    "type": "boolean",
                    "description": "Should search flag.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                }
            },
            "required": [
                "enableAutomaticAdd",
                "listId",
                "listOrder",
                "metadataProfileId",
                "name",
                "qualityProfileId",
                "rootFolderPath",
                "shouldMonitor",
                "shouldSearch",
                "tags"
            ],
            "inputProperties": {
                "enableAutomaticAdd": {
                    "type": "boolean",
                    "description": "Enable automatic add flag.\n"
                },
                "listId": {
                    "type": "integer",
                    "description": "List ID.\n"
                },
                "listOrder": {
                    "type": "integer",
                    "description": "List order.\n"
                },
                "metadataProfileId": {
                    "type": "integer",
                    "description": "Metadata profile ID.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Import List name.\n"
                },
                "qualityProfileId": {
                    "type": "integer",
                    "description": "Quality profile ID.\n"
                },
                "rootFolderPath": {
                    "type": "string",
                    "description": "Root folder path.\n"
                },
                "shouldMonitor": {
                    "type": "string",
                    "description": "Should monitor.\n"
                },
                "shouldSearch": {
                    "type": "boolean",
                    "description": "Should search flag.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                }
            },
            "requiredInputs": [
                "listId",
                "name"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ImportListGoodreadsList resources.\n",
                "properties": {
                    "enableAutomaticAdd": {
                        "type": "boolean",
                        "description": "Enable automatic add flag.\n"
                    },
                    "listId": {
                        "type": "integer",
                        "description": "List ID.\n"
                    },
                    "listOrder": {
                        "type": "integer",
                        "description": "List order.\n"
                    },
                    "metadataProfileId": {
                        "type": "integer",
                        "description": "Metadata profile ID.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Import List name.\n"
                    },
                    "qualityProfileId": {
                        "type": "integer",
                        "description": "Quality profile ID.\n"
                    },
                    "rootFolderPath": {
                        "type": "string",
                        "description": "Root folder path.\n"
                    },
                    "shouldMonitor": {
                        "type": "string",
                        "description": "Should monitor.\n"
                    },
                    "shouldSearch": {
                        "type": "boolean",
                        "description": "Should search flag.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "List of associated tags.\n"
                    }
                },
                "type": "object"
            }
        },
        "readarr:ImportLists/importListGoodreadsOwnedBooks:ImportListGoodreadsOwnedBooks": {
            "description": "\u003c!-- subcategory:Import Lists --\u003eImport List Goodreads OwnedBooks resource.\nFor more information refer to [Import List](https://wiki.servarr.com/readarr/settings#import-lists) and [Goodreads OwnedBooks](https://wiki.servarr.com/readarr/supported#goodreadsownedbooks).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as readarr from \"@maienm/pulumi-readarr\";\n\nconst example = new readarr.importlists.ImportListGoodreadsOwnedBooks(\"example\", {\n    accessToken: \"ExampleAccessToken\",\n    accessTokenSecret: \"ExampleAccessTokenSecret\",\n    enableAutomaticAdd: false,\n    metadataProfileId: 1,\n    name: \"Example\",\n    qualityProfileId: 1,\n    rootFolderPath: \"/books\",\n    shouldMonitor: \"specificBook\",\n    shouldSearch: false,\n    tags: [\n        1,\n        2,\n        3,\n    ],\n    userId: \"163730408\",\n    username: \"Test User\",\n});\n```\n```python\nimport pulumi\nimport pulumi_readarr as readarr\n\nexample = readarr.import_lists.ImportListGoodreadsOwnedBooks(\"example\",\n    access_token=\"ExampleAccessToken\",\n    access_token_secret=\"ExampleAccessTokenSecret\",\n    enable_automatic_add=False,\n    metadata_profile_id=1,\n    name=\"Example\",\n    quality_profile_id=1,\n    root_folder_path=\"/books\",\n    should_monitor=\"specificBook\",\n    should_search=False,\n    tags=[\n        1,\n        2,\n        3,\n    ],\n    user_id=\"163730408\",\n    username=\"Test User\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Readarr = MaienM.Readarr;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Readarr.ImportLists.ImportListGoodreadsOwnedBooks(\"example\", new()\n    {\n        AccessToken = \"ExampleAccessToken\",\n        AccessTokenSecret = \"ExampleAccessTokenSecret\",\n        EnableAutomaticAdd = false,\n        MetadataProfileId = 1,\n        Name = \"Example\",\n        QualityProfileId = 1,\n        RootFolderPath = \"/books\",\n        ShouldMonitor = \"specificBook\",\n        ShouldSearch = false,\n        Tags = new[]\n        {\n            1,\n            2,\n            3,\n        },\n        UserId = \"163730408\",\n        Username = \"Test User\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/MaienM/pulumi-readarr/sdk/v2/go/readarr/ImportLists\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := ImportLists.NewImportListGoodreadsOwnedBooks(ctx, \"example\", \u0026ImportLists.ImportListGoodreadsOwnedBooksArgs{\n\t\t\tAccessToken:        pulumi.String(\"ExampleAccessToken\"),\n\t\t\tAccessTokenSecret:  pulumi.String(\"ExampleAccessTokenSecret\"),\n\t\t\tEnableAutomaticAdd: pulumi.Bool(false),\n\t\t\tMetadataProfileId:  pulumi.Int(1),\n\t\t\tName:               pulumi.String(\"Example\"),\n\t\t\tQualityProfileId:   pulumi.Int(1),\n\t\t\tRootFolderPath:     pulumi.String(\"/books\"),\n\t\t\tShouldMonitor:      pulumi.String(\"specificBook\"),\n\t\t\tShouldSearch:       pulumi.Bool(false),\n\t\t\tTags: pulumi.IntArray{\n\t\t\t\tpulumi.Int(1),\n\t\t\t\tpulumi.Int(2),\n\t\t\t\tpulumi.Int(3),\n\t\t\t},\n\t\t\tUserId:   pulumi.String(\"163730408\"),\n\t\t\tUsername: pulumi.String(\"Test User\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.readarr.ImportLists.ImportListGoodreadsOwnedBooks;\nimport com.pulumi.readarr.ImportLists.ImportListGoodreadsOwnedBooksArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new ImportListGoodreadsOwnedBooks(\"example\", ImportListGoodreadsOwnedBooksArgs.builder()        \n            .accessToken(\"ExampleAccessToken\")\n            .accessTokenSecret(\"ExampleAccessTokenSecret\")\n            .enableAutomaticAdd(false)\n            .metadataProfileId(1)\n            .name(\"Example\")\n            .qualityProfileId(1)\n            .rootFolderPath(\"/books\")\n            .shouldMonitor(\"specificBook\")\n            .shouldSearch(false)\n            .tags(            \n                1,\n                2,\n                3)\n            .userId(\"163730408\")\n            .username(\"Test User\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: readarr:ImportLists:ImportListGoodreadsOwnedBooks\n    properties:\n      accessToken: ExampleAccessToken\n      accessTokenSecret: ExampleAccessTokenSecret\n      enableAutomaticAdd: false\n      metadataProfileId: 1\n      name: Example\n      qualityProfileId: 1\n      rootFolderPath: /books\n      shouldMonitor: specificBook\n      shouldSearch: false\n      tags:\n        - 1\n        - 2\n        - 3\n      userId: '163730408'\n      username: Test User\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nimport using the API/UI ID\n\n```sh\n $ pulumi import readarr:ImportLists/importListGoodreadsOwnedBooks:ImportListGoodreadsOwnedBooks example 1\n```\n\n ",
            "properties": {
                "accessToken": {
                    "type": "string",
                    "description": "Access token.\n",
                    "secret": true
                },
                "accessTokenSecret": {
                    "type": "string",
                    "description": "Access token secret.\n",
                    "secret": true
                },
                "enableAutomaticAdd": {
                    "type": "boolean",
                    "description": "Enable automatic add flag.\n"
                },
                "listOrder": {
                    "type": "integer",
                    "description": "List order.\n"
                },
                "metadataProfileId": {
                    "type": "integer",
                    "description": "Metadata profile ID.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Import List name.\n"
                },
                "qualityProfileId": {
                    "type": "integer",
                    "description": "Quality profile ID.\n"
                },
                "requestTokenSecret": {
                    "type": "string",
                    "description": "Request token secret.\n",
                    "secret": true
                },
                "rootFolderPath": {
                    "type": "string",
                    "description": "Root folder path.\n"
                },
                "shouldMonitor": {
                    "type": "string",
                    "description": "Should monitor.\n"
                },
                "shouldSearch": {
                    "type": "boolean",
                    "description": "Should search flag.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                },
                "userId": {
                    "type": "string",
                    "description": "User ID.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username.\n"
                }
            },
            "required": [
                "accessToken",
                "accessTokenSecret",
                "enableAutomaticAdd",
                "listOrder",
                "metadataProfileId",
                "name",
                "qualityProfileId",
                "requestTokenSecret",
                "rootFolderPath",
                "shouldMonitor",
                "shouldSearch",
                "tags",
                "userId",
                "username"
            ],
            "inputProperties": {
                "accessToken": {
                    "type": "string",
                    "description": "Access token.\n",
                    "secret": true
                },
                "accessTokenSecret": {
                    "type": "string",
                    "description": "Access token secret.\n",
                    "secret": true
                },
                "enableAutomaticAdd": {
                    "type": "boolean",
                    "description": "Enable automatic add flag.\n"
                },
                "listOrder": {
                    "type": "integer",
                    "description": "List order.\n"
                },
                "metadataProfileId": {
                    "type": "integer",
                    "description": "Metadata profile ID.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Import List name.\n"
                },
                "qualityProfileId": {
                    "type": "integer",
                    "description": "Quality profile ID.\n"
                },
                "requestTokenSecret": {
                    "type": "string",
                    "description": "Request token secret.\n",
                    "secret": true
                },
                "rootFolderPath": {
                    "type": "string",
                    "description": "Root folder path.\n"
                },
                "shouldMonitor": {
                    "type": "string",
                    "description": "Should monitor.\n"
                },
                "shouldSearch": {
                    "type": "boolean",
                    "description": "Should search flag.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                },
                "userId": {
                    "type": "string",
                    "description": "User ID.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username.\n"
                }
            },
            "requiredInputs": [
                "accessToken",
                "accessTokenSecret",
                "name",
                "username"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ImportListGoodreadsOwnedBooks resources.\n",
                "properties": {
                    "accessToken": {
                        "type": "string",
                        "description": "Access token.\n",
                        "secret": true
                    },
                    "accessTokenSecret": {
                        "type": "string",
                        "description": "Access token secret.\n",
                        "secret": true
                    },
                    "enableAutomaticAdd": {
                        "type": "boolean",
                        "description": "Enable automatic add flag.\n"
                    },
                    "listOrder": {
                        "type": "integer",
                        "description": "List order.\n"
                    },
                    "metadataProfileId": {
                        "type": "integer",
                        "description": "Metadata profile ID.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Import List name.\n"
                    },
                    "qualityProfileId": {
                        "type": "integer",
                        "description": "Quality profile ID.\n"
                    },
                    "requestTokenSecret": {
                        "type": "string",
                        "description": "Request token secret.\n",
                        "secret": true
                    },
                    "rootFolderPath": {
                        "type": "string",
                        "description": "Root folder path.\n"
                    },
                    "shouldMonitor": {
                        "type": "string",
                        "description": "Should monitor.\n"
                    },
                    "shouldSearch": {
                        "type": "boolean",
                        "description": "Should search flag.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "List of associated tags.\n"
                    },
                    "userId": {
                        "type": "string",
                        "description": "User ID.\n"
                    },
                    "username": {
                        "type": "string",
                        "description": "Username.\n"
                    }
                },
                "type": "object"
            }
        },
        "readarr:ImportLists/importListGoodreadsSeries:ImportListGoodreadsSeries": {
            "description": "\u003c!-- subcategory:Import Lists --\u003eImport List Goodreads Series resource.\nFor more information refer to [Import List](https://wiki.servarr.com/readarr/settings#import-lists) and [Goodreads Series](https://wiki.servarr.com/readarr/supported#goodreadsseries).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as readarr from \"@maienm/pulumi-readarr\";\n\nconst example = new readarr.importlists.ImportListGoodreadsSeries(\"example\", {\n    enableAutomaticAdd: false,\n    metadataProfileId: 1,\n    qualityProfileId: 1,\n    rootFolderPath: \"/books\",\n    seriesId: 45175,\n    shouldMonitor: \"specificBook\",\n    shouldSearch: false,\n    tags: [\n        1,\n        2,\n        3,\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_readarr as readarr\n\nexample = readarr.import_lists.ImportListGoodreadsSeries(\"example\",\n    enable_automatic_add=False,\n    metadata_profile_id=1,\n    quality_profile_id=1,\n    root_folder_path=\"/books\",\n    series_id=45175,\n    should_monitor=\"specificBook\",\n    should_search=False,\n    tags=[\n        1,\n        2,\n        3,\n    ])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Readarr = MaienM.Readarr;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Readarr.ImportLists.ImportListGoodreadsSeries(\"example\", new()\n    {\n        EnableAutomaticAdd = false,\n        MetadataProfileId = 1,\n        QualityProfileId = 1,\n        RootFolderPath = \"/books\",\n        SeriesId = 45175,\n        ShouldMonitor = \"specificBook\",\n        ShouldSearch = false,\n        Tags = new[]\n        {\n            1,\n            2,\n            3,\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/MaienM/pulumi-readarr/sdk/v2/go/readarr/ImportLists\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := ImportLists.NewImportListGoodreadsSeries(ctx, \"example\", \u0026ImportLists.ImportListGoodreadsSeriesArgs{\n\t\t\tEnableAutomaticAdd: pulumi.Bool(false),\n\t\t\tMetadataProfileId:  pulumi.Int(1),\n\t\t\tQualityProfileId:   pulumi.Int(1),\n\t\t\tRootFolderPath:     pulumi.String(\"/books\"),\n\t\t\tSeriesId:           pulumi.Int(45175),\n\t\t\tShouldMonitor:      pulumi.String(\"specificBook\"),\n\t\t\tShouldSearch:       pulumi.Bool(false),\n\t\t\tTags: pulumi.IntArray{\n\t\t\t\tpulumi.Int(1),\n\t\t\t\tpulumi.Int(2),\n\t\t\t\tpulumi.Int(3),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.readarr.ImportLists.ImportListGoodreadsSeries;\nimport com.pulumi.readarr.ImportLists.ImportListGoodreadsSeriesArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new ImportListGoodreadsSeries(\"example\", ImportListGoodreadsSeriesArgs.builder()        \n            .enableAutomaticAdd(false)\n            .metadataProfileId(1)\n            .qualityProfileId(1)\n            .rootFolderPath(\"/books\")\n            .seriesId(45175)\n            .shouldMonitor(\"specificBook\")\n            .shouldSearch(false)\n            .tags(            \n                1,\n                2,\n                3)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: readarr:ImportLists:ImportListGoodreadsSeries\n    properties:\n      enableAutomaticAdd: false\n      metadataProfileId: 1\n      qualityProfileId: 1\n      rootFolderPath: /books\n      seriesId: 45175\n      shouldMonitor: specificBook\n      shouldSearch: false\n      tags:\n        - 1\n        - 2\n        - 3\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nimport using the API/UI ID\n\n```sh\n $ pulumi import readarr:ImportLists/importListGoodreadsSeries:ImportListGoodreadsSeries example 1\n```\n\n ",
            "properties": {
                "enableAutomaticAdd": {
                    "type": "boolean",
                    "description": "Enable automatic add flag.\n"
                },
                "listOrder": {
                    "type": "integer",
                    "description": "List order.\n"
                },
                "metadataProfileId": {
                    "type": "integer",
                    "description": "Metadata profile ID.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Import List name.\n"
                },
                "qualityProfileId": {
                    "type": "integer",
                    "description": "Quality profile ID.\n"
                },
                "rootFolderPath": {
                    "type": "string",
                    "description": "Root folder path.\n"
                },
                "seriesId": {
                    "type": "integer",
                    "description": "Series ID.\n"
                },
                "shouldMonitor": {
                    "type": "string",
                    "description": "Should monitor.\n"
                },
                "shouldSearch": {
                    "type": "boolean",
                    "description": "Should search flag.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                }
            },
            "required": [
                "enableAutomaticAdd",
                "listOrder",
                "metadataProfileId",
                "name",
                "qualityProfileId",
                "rootFolderPath",
                "seriesId",
                "shouldMonitor",
                "shouldSearch",
                "tags"
            ],
            "inputProperties": {
                "enableAutomaticAdd": {
                    "type": "boolean",
                    "description": "Enable automatic add flag.\n"
                },
                "listOrder": {
                    "type": "integer",
                    "description": "List order.\n"
                },
                "metadataProfileId": {
                    "type": "integer",
                    "description": "Metadata profile ID.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Import List name.\n"
                },
                "qualityProfileId": {
                    "type": "integer",
                    "description": "Quality profile ID.\n"
                },
                "rootFolderPath": {
                    "type": "string",
                    "description": "Root folder path.\n"
                },
                "seriesId": {
                    "type": "integer",
                    "description": "Series ID.\n"
                },
                "shouldMonitor": {
                    "type": "string",
                    "description": "Should monitor.\n"
                },
                "shouldSearch": {
                    "type": "boolean",
                    "description": "Should search flag.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                }
            },
            "requiredInputs": [
                "name",
                "seriesId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ImportListGoodreadsSeries resources.\n",
                "properties": {
                    "enableAutomaticAdd": {
                        "type": "boolean",
                        "description": "Enable automatic add flag.\n"
                    },
                    "listOrder": {
                        "type": "integer",
                        "description": "List order.\n"
                    },
                    "metadataProfileId": {
                        "type": "integer",
                        "description": "Metadata profile ID.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Import List name.\n"
                    },
                    "qualityProfileId": {
                        "type": "integer",
                        "description": "Quality profile ID.\n"
                    },
                    "rootFolderPath": {
                        "type": "string",
                        "description": "Root folder path.\n"
                    },
                    "seriesId": {
                        "type": "integer",
                        "description": "Series ID.\n"
                    },
                    "shouldMonitor": {
                        "type": "string",
                        "description": "Should monitor.\n"
                    },
                    "shouldSearch": {
                        "type": "boolean",
                        "description": "Should search flag.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "List of associated tags.\n"
                    }
                },
                "type": "object"
            }
        },
        "readarr:ImportLists/importListLazyLibrarian:ImportListLazyLibrarian": {
            "description": "\u003c!-- subcategory:Import Lists --\u003eImport List Lazy Librarian resource.\nFor more information refer to [Import List](https://wiki.servarr.com/readarr/settings#import-lists) and [Lazy Librarian](https://wiki.servarr.com/readarr/supported#lazylibrarianimport).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as readarr from \"@maienm/pulumi-readarr\";\n\nconst example = new readarr.importlists.ImportListLazyLibrarian(\"example\", {\n    apiKey: \"APIKey\",\n    baseUrl: \"http://127.0.0.1:5299\",\n    enableAutomaticAdd: false,\n    metadataProfileId: 1,\n    name: \"Example\",\n    qualityProfileId: 1,\n    rootFolderPath: \"/books\",\n    shouldMonitor: \"specificBook\",\n    shouldSearch: false,\n    tags: [\n        1,\n        2,\n        3,\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_readarr as readarr\n\nexample = readarr.import_lists.ImportListLazyLibrarian(\"example\",\n    api_key=\"APIKey\",\n    base_url=\"http://127.0.0.1:5299\",\n    enable_automatic_add=False,\n    metadata_profile_id=1,\n    name=\"Example\",\n    quality_profile_id=1,\n    root_folder_path=\"/books\",\n    should_monitor=\"specificBook\",\n    should_search=False,\n    tags=[\n        1,\n        2,\n        3,\n    ])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Readarr = MaienM.Readarr;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Readarr.ImportLists.ImportListLazyLibrarian(\"example\", new()\n    {\n        ApiKey = \"APIKey\",\n        BaseUrl = \"http://127.0.0.1:5299\",\n        EnableAutomaticAdd = false,\n        MetadataProfileId = 1,\n        Name = \"Example\",\n        QualityProfileId = 1,\n        RootFolderPath = \"/books\",\n        ShouldMonitor = \"specificBook\",\n        ShouldSearch = false,\n        Tags = new[]\n        {\n            1,\n            2,\n            3,\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/MaienM/pulumi-readarr/sdk/v2/go/readarr/ImportLists\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := ImportLists.NewImportListLazyLibrarian(ctx, \"example\", \u0026ImportLists.ImportListLazyLibrarianArgs{\n\t\t\tApiKey:             pulumi.String(\"APIKey\"),\n\t\t\tBaseUrl:            pulumi.String(\"http://127.0.0.1:5299\"),\n\t\t\tEnableAutomaticAdd: pulumi.Bool(false),\n\t\t\tMetadataProfileId:  pulumi.Int(1),\n\t\t\tName:               pulumi.String(\"Example\"),\n\t\t\tQualityProfileId:   pulumi.Int(1),\n\t\t\tRootFolderPath:     pulumi.String(\"/books\"),\n\t\t\tShouldMonitor:      pulumi.String(\"specificBook\"),\n\t\t\tShouldSearch:       pulumi.Bool(false),\n\t\t\tTags: pulumi.IntArray{\n\t\t\t\tpulumi.Int(1),\n\t\t\t\tpulumi.Int(2),\n\t\t\t\tpulumi.Int(3),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.readarr.ImportLists.ImportListLazyLibrarian;\nimport com.pulumi.readarr.ImportLists.ImportListLazyLibrarianArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new ImportListLazyLibrarian(\"example\", ImportListLazyLibrarianArgs.builder()        \n            .apiKey(\"APIKey\")\n            .baseUrl(\"http://127.0.0.1:5299\")\n            .enableAutomaticAdd(false)\n            .metadataProfileId(1)\n            .name(\"Example\")\n            .qualityProfileId(1)\n            .rootFolderPath(\"/books\")\n            .shouldMonitor(\"specificBook\")\n            .shouldSearch(false)\n            .tags(            \n                1,\n                2,\n                3)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: readarr:ImportLists:ImportListLazyLibrarian\n    properties:\n      apiKey: APIKey\n      baseUrl: http://127.0.0.1:5299\n      enableAutomaticAdd: false\n      metadataProfileId: 1\n      name: Example\n      qualityProfileId: 1\n      rootFolderPath: /books\n      shouldMonitor: specificBook\n      shouldSearch: false\n      tags:\n        - 1\n        - 2\n        - 3\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nimport using the API/UI ID\n\n```sh\n $ pulumi import readarr:ImportLists/importListLazyLibrarian:ImportListLazyLibrarian example 1\n```\n\n ",
            "properties": {
                "apiKey": {
                    "type": "string",
                    "description": "API key.\n",
                    "secret": true
                },
                "baseUrl": {
                    "type": "string",
                    "description": "Base URL.\n"
                },
                "enableAutomaticAdd": {
                    "type": "boolean",
                    "description": "Enable automatic add flag.\n"
                },
                "listOrder": {
                    "type": "integer",
                    "description": "List order.\n"
                },
                "metadataProfileId": {
                    "type": "integer",
                    "description": "Metadata profile ID.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Import List name.\n"
                },
                "qualityProfileId": {
                    "type": "integer",
                    "description": "Quality profile ID.\n"
                },
                "rootFolderPath": {
                    "type": "string",
                    "description": "Root folder path.\n"
                },
                "shouldMonitor": {
                    "type": "string",
                    "description": "Should monitor.\n"
                },
                "shouldSearch": {
                    "type": "boolean",
                    "description": "Should search flag.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                }
            },
            "required": [
                "apiKey",
                "baseUrl",
                "enableAutomaticAdd",
                "listOrder",
                "metadataProfileId",
                "name",
                "qualityProfileId",
                "rootFolderPath",
                "shouldMonitor",
                "shouldSearch",
                "tags"
            ],
            "inputProperties": {
                "apiKey": {
                    "type": "string",
                    "description": "API key.\n",
                    "secret": true
                },
                "baseUrl": {
                    "type": "string",
                    "description": "Base URL.\n"
                },
                "enableAutomaticAdd": {
                    "type": "boolean",
                    "description": "Enable automatic add flag.\n"
                },
                "listOrder": {
                    "type": "integer",
                    "description": "List order.\n"
                },
                "metadataProfileId": {
                    "type": "integer",
                    "description": "Metadata profile ID.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Import List name.\n"
                },
                "qualityProfileId": {
                    "type": "integer",
                    "description": "Quality profile ID.\n"
                },
                "rootFolderPath": {
                    "type": "string",
                    "description": "Root folder path.\n"
                },
                "shouldMonitor": {
                    "type": "string",
                    "description": "Should monitor.\n"
                },
                "shouldSearch": {
                    "type": "boolean",
                    "description": "Should search flag.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                }
            },
            "requiredInputs": [
                "apiKey",
                "baseUrl",
                "name"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ImportListLazyLibrarian resources.\n",
                "properties": {
                    "apiKey": {
                        "type": "string",
                        "description": "API key.\n",
                        "secret": true
                    },
                    "baseUrl": {
                        "type": "string",
                        "description": "Base URL.\n"
                    },
                    "enableAutomaticAdd": {
                        "type": "boolean",
                        "description": "Enable automatic add flag.\n"
                    },
                    "listOrder": {
                        "type": "integer",
                        "description": "List order.\n"
                    },
                    "metadataProfileId": {
                        "type": "integer",
                        "description": "Metadata profile ID.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Import List name.\n"
                    },
                    "qualityProfileId": {
                        "type": "integer",
                        "description": "Quality profile ID.\n"
                    },
                    "rootFolderPath": {
                        "type": "string",
                        "description": "Root folder path.\n"
                    },
                    "shouldMonitor": {
                        "type": "string",
                        "description": "Should monitor.\n"
                    },
                    "shouldSearch": {
                        "type": "boolean",
                        "description": "Should search flag.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "List of associated tags.\n"
                    }
                },
                "type": "object"
            }
        },
        "readarr:ImportLists/importListReadarr:ImportListReadarr": {
            "description": "\u003c!-- subcategory:Import Lists --\u003eImport List Readarr resource.\nFor more information refer to [Import List](https://wiki.servarr.com/readarr/settings#import-lists) and [Readarr](https://wiki.servarr.com/readarr/supported#readarrimport).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as readarr from \"@maienm/pulumi-readarr\";\n\nconst example = new readarr.importlists.ImportListReadarr(\"example\", {\n    apiKey: \"APIKey\",\n    baseUrl: \"http://127.0.0.1:8787\",\n    enableAutomaticAdd: false,\n    metadataProfileId: 1,\n    name: \"Example\",\n    profileIds: [\n        1,\n        2,\n    ],\n    qualityProfileId: 1,\n    rootFolderPath: \"/books\",\n    shouldMonitor: \"specificBook\",\n    shouldSearch: false,\n    tagIds: [\n        1,\n        2,\n        3,\n    ],\n    tags: [\n        1,\n        2,\n        3,\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_readarr as readarr\n\nexample = readarr.import_lists.ImportListReadarr(\"example\",\n    api_key=\"APIKey\",\n    base_url=\"http://127.0.0.1:8787\",\n    enable_automatic_add=False,\n    metadata_profile_id=1,\n    name=\"Example\",\n    profile_ids=[\n        1,\n        2,\n    ],\n    quality_profile_id=1,\n    root_folder_path=\"/books\",\n    should_monitor=\"specificBook\",\n    should_search=False,\n    tag_ids=[\n        1,\n        2,\n        3,\n    ],\n    tags=[\n        1,\n        2,\n        3,\n    ])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Readarr = MaienM.Readarr;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Readarr.ImportLists.ImportListReadarr(\"example\", new()\n    {\n        ApiKey = \"APIKey\",\n        BaseUrl = \"http://127.0.0.1:8787\",\n        EnableAutomaticAdd = false,\n        MetadataProfileId = 1,\n        Name = \"Example\",\n        ProfileIds = new[]\n        {\n            1,\n            2,\n        },\n        QualityProfileId = 1,\n        RootFolderPath = \"/books\",\n        ShouldMonitor = \"specificBook\",\n        ShouldSearch = false,\n        TagIds = new[]\n        {\n            1,\n            2,\n            3,\n        },\n        Tags = new[]\n        {\n            1,\n            2,\n            3,\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/MaienM/pulumi-readarr/sdk/v2/go/readarr/ImportLists\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := ImportLists.NewImportListReadarr(ctx, \"example\", \u0026ImportLists.ImportListReadarrArgs{\n\t\t\tApiKey:             pulumi.String(\"APIKey\"),\n\t\t\tBaseUrl:            pulumi.String(\"http://127.0.0.1:8787\"),\n\t\t\tEnableAutomaticAdd: pulumi.Bool(false),\n\t\t\tMetadataProfileId:  pulumi.Int(1),\n\t\t\tName:               pulumi.String(\"Example\"),\n\t\t\tProfileIds: pulumi.IntArray{\n\t\t\t\tpulumi.Int(1),\n\t\t\t\tpulumi.Int(2),\n\t\t\t},\n\t\t\tQualityProfileId: pulumi.Int(1),\n\t\t\tRootFolderPath:   pulumi.String(\"/books\"),\n\t\t\tShouldMonitor:    pulumi.String(\"specificBook\"),\n\t\t\tShouldSearch:     pulumi.Bool(false),\n\t\t\tTagIds: pulumi.IntArray{\n\t\t\t\tpulumi.Int(1),\n\t\t\t\tpulumi.Int(2),\n\t\t\t\tpulumi.Int(3),\n\t\t\t},\n\t\t\tTags: pulumi.IntArray{\n\t\t\t\tpulumi.Int(1),\n\t\t\t\tpulumi.Int(2),\n\t\t\t\tpulumi.Int(3),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.readarr.ImportLists.ImportListReadarr;\nimport com.pulumi.readarr.ImportLists.ImportListReadarrArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new ImportListReadarr(\"example\", ImportListReadarrArgs.builder()        \n            .apiKey(\"APIKey\")\n            .baseUrl(\"http://127.0.0.1:8787\")\n            .enableAutomaticAdd(false)\n            .metadataProfileId(1)\n            .name(\"Example\")\n            .profileIds(            \n                1,\n                2)\n            .qualityProfileId(1)\n            .rootFolderPath(\"/books\")\n            .shouldMonitor(\"specificBook\")\n            .shouldSearch(false)\n            .tagIds(            \n                1,\n                2,\n                3)\n            .tags(            \n                1,\n                2,\n                3)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: readarr:ImportLists:ImportListReadarr\n    properties:\n      apiKey: APIKey\n      baseUrl: http://127.0.0.1:8787\n      enableAutomaticAdd: false\n      metadataProfileId: 1\n      name: Example\n      profileIds:\n        - 1\n        - 2\n      qualityProfileId: 1\n      rootFolderPath: /books\n      shouldMonitor: specificBook\n      shouldSearch: false\n      tagIds:\n        - 1\n        - 2\n        - 3\n      tags:\n        - 1\n        - 2\n        - 3\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nimport using the API/UI ID\n\n```sh\n $ pulumi import readarr:ImportLists/importListReadarr:ImportListReadarr example 1\n```\n\n ",
            "properties": {
                "apiKey": {
                    "type": "string",
                    "description": "API key.\n",
                    "secret": true
                },
                "baseUrl": {
                    "type": "string",
                    "description": "Base URL.\n"
                },
                "enableAutomaticAdd": {
                    "type": "boolean",
                    "description": "Enable automatic add flag.\n"
                },
                "listOrder": {
                    "type": "integer",
                    "description": "List order.\n"
                },
                "metadataProfileId": {
                    "type": "integer",
                    "description": "Metadata profile ID.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Import List name.\n"
                },
                "profileIds": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "Profile IDs.\n"
                },
                "qualityProfileId": {
                    "type": "integer",
                    "description": "Quality profile ID.\n"
                },
                "rootFolderPath": {
                    "type": "string",
                    "description": "Root folder path.\n"
                },
                "shouldMonitor": {
                    "type": "string",
                    "description": "Should monitor.\n"
                },
                "shouldSearch": {
                    "type": "boolean",
                    "description": "Should search flag.\n"
                },
                "tagIds": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "Tag IDs.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                }
            },
            "required": [
                "apiKey",
                "baseUrl",
                "enableAutomaticAdd",
                "listOrder",
                "metadataProfileId",
                "name",
                "profileIds",
                "qualityProfileId",
                "rootFolderPath",
                "shouldMonitor",
                "shouldSearch",
                "tagIds",
                "tags"
            ],
            "inputProperties": {
                "apiKey": {
                    "type": "string",
                    "description": "API key.\n",
                    "secret": true
                },
                "baseUrl": {
                    "type": "string",
                    "description": "Base URL.\n"
                },
                "enableAutomaticAdd": {
                    "type": "boolean",
                    "description": "Enable automatic add flag.\n"
                },
                "listOrder": {
                    "type": "integer",
                    "description": "List order.\n"
                },
                "metadataProfileId": {
                    "type": "integer",
                    "description": "Metadata profile ID.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Import List name.\n"
                },
                "profileIds": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "Profile IDs.\n"
                },
                "qualityProfileId": {
                    "type": "integer",
                    "description": "Quality profile ID.\n"
                },
                "rootFolderPath": {
                    "type": "string",
                    "description": "Root folder path.\n"
                },
                "shouldMonitor": {
                    "type": "string",
                    "description": "Should monitor.\n"
                },
                "shouldSearch": {
                    "type": "boolean",
                    "description": "Should search flag.\n"
                },
                "tagIds": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "Tag IDs.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                }
            },
            "requiredInputs": [
                "apiKey",
                "baseUrl",
                "name"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ImportListReadarr resources.\n",
                "properties": {
                    "apiKey": {
                        "type": "string",
                        "description": "API key.\n",
                        "secret": true
                    },
                    "baseUrl": {
                        "type": "string",
                        "description": "Base URL.\n"
                    },
                    "enableAutomaticAdd": {
                        "type": "boolean",
                        "description": "Enable automatic add flag.\n"
                    },
                    "listOrder": {
                        "type": "integer",
                        "description": "List order.\n"
                    },
                    "metadataProfileId": {
                        "type": "integer",
                        "description": "Metadata profile ID.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Import List name.\n"
                    },
                    "profileIds": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "Profile IDs.\n"
                    },
                    "qualityProfileId": {
                        "type": "integer",
                        "description": "Quality profile ID.\n"
                    },
                    "rootFolderPath": {
                        "type": "string",
                        "description": "Root folder path.\n"
                    },
                    "shouldMonitor": {
                        "type": "string",
                        "description": "Should monitor.\n"
                    },
                    "shouldSearch": {
                        "type": "boolean",
                        "description": "Should search flag.\n"
                    },
                    "tagIds": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "Tag IDs.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "List of associated tags.\n"
                    }
                },
                "type": "object"
            }
        },
        "readarr:Indexers/indexer:Indexer": {
            "description": "\u003c!-- subcategory:Indexers --\u003eGeneric Indexer resource. When possible use a specific resource instead.\nFor more information refer to [Indexer](https://wiki.servarr.com/readarr/settings#indexers) documentation.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as readarr from \"@maienm/pulumi-readarr\";\n\nconst example = new readarr.indexers.Indexer(\"example\", {\n    apiPath: \"/api\",\n    baseUrl: \"https://lolo.sickbeard.com\",\n    categories: [\n        8000,\n        5000,\n    ],\n    configContract: \"NewznabSettings\",\n    enableAutomaticSearch: true,\n    implementation: \"Newznab\",\n    name: \"Example\",\n    protocol: \"usenet\",\n    tags: [\n        1,\n        2,\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_readarr as readarr\n\nexample = readarr.indexers.Indexer(\"example\",\n    api_path=\"/api\",\n    base_url=\"https://lolo.sickbeard.com\",\n    categories=[\n        8000,\n        5000,\n    ],\n    config_contract=\"NewznabSettings\",\n    enable_automatic_search=True,\n    implementation=\"Newznab\",\n    name=\"Example\",\n    protocol=\"usenet\",\n    tags=[\n        1,\n        2,\n    ])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Readarr = MaienM.Readarr;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Readarr.Indexers.Indexer(\"example\", new()\n    {\n        ApiPath = \"/api\",\n        BaseUrl = \"https://lolo.sickbeard.com\",\n        Categories = new[]\n        {\n            8000,\n            5000,\n        },\n        ConfigContract = \"NewznabSettings\",\n        EnableAutomaticSearch = true,\n        Implementation = \"Newznab\",\n        Name = \"Example\",\n        Protocol = \"usenet\",\n        Tags = new[]\n        {\n            1,\n            2,\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/MaienM/pulumi-readarr/sdk/v2/go/readarr/Indexers\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := Indexers.NewIndexer(ctx, \"example\", \u0026Indexers.IndexerArgs{\n\t\t\tApiPath: pulumi.String(\"/api\"),\n\t\t\tBaseUrl: pulumi.String(\"https://lolo.sickbeard.com\"),\n\t\t\tCategories: pulumi.IntArray{\n\t\t\t\tpulumi.Int(8000),\n\t\t\t\tpulumi.Int(5000),\n\t\t\t},\n\t\t\tConfigContract:        pulumi.String(\"NewznabSettings\"),\n\t\t\tEnableAutomaticSearch: pulumi.Bool(true),\n\t\t\tImplementation:        pulumi.String(\"Newznab\"),\n\t\t\tName:                  pulumi.String(\"Example\"),\n\t\t\tProtocol:              pulumi.String(\"usenet\"),\n\t\t\tTags: pulumi.IntArray{\n\t\t\t\tpulumi.Int(1),\n\t\t\t\tpulumi.Int(2),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.readarr.Indexers.Indexer;\nimport com.pulumi.readarr.Indexers.IndexerArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new Indexer(\"example\", IndexerArgs.builder()        \n            .apiPath(\"/api\")\n            .baseUrl(\"https://lolo.sickbeard.com\")\n            .categories(            \n                8000,\n                5000)\n            .configContract(\"NewznabSettings\")\n            .enableAutomaticSearch(true)\n            .implementation(\"Newznab\")\n            .name(\"Example\")\n            .protocol(\"usenet\")\n            .tags(            \n                1,\n                2)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: readarr:Indexers:Indexer\n    properties:\n      apiPath: /api\n      baseUrl: https://lolo.sickbeard.com\n      categories:\n        - 8000\n        - 5000\n      configContract: NewznabSettings\n      enableAutomaticSearch: true\n      implementation: Newznab\n      name: Example\n      protocol: usenet\n      tags:\n        - 1\n        - 2\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nimport using the API/UI ID\n\n```sh\n $ pulumi import readarr:Indexers/indexer:Indexer example 1\n```\n\n ",
            "properties": {
                "additionalParameters": {
                    "type": "string",
                    "description": "Additional parameters.\n"
                },
                "allowZeroSize": {
                    "type": "boolean",
                    "description": "Allow zero size files.\n"
                },
                "apiKey": {
                    "type": "string",
                    "description": "API key.\n"
                },
                "apiPath": {
                    "type": "string",
                    "description": "API path.\n"
                },
                "apiUser": {
                    "type": "string",
                    "description": "API User.\n"
                },
                "authorSeedTime": {
                    "type": "integer",
                    "description": "Author seed time.\n"
                },
                "baseUrl": {
                    "type": "string",
                    "description": "Base URL.\n"
                },
                "captchaToken": {
                    "type": "string",
                    "description": "Captcha token.\n"
                },
                "categories": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "Series list.\n"
                },
                "configContract": {
                    "type": "string",
                    "description": "Indexer configuration template.\n"
                },
                "cookie": {
                    "type": "string",
                    "description": "Cookie.\n"
                },
                "delay": {
                    "type": "integer",
                    "description": "Delay before grabbing.\n"
                },
                "earlyReleaseLimit": {
                    "type": "integer",
                    "description": "Early release limit.\n"
                },
                "enableAutomaticSearch": {
                    "type": "boolean",
                    "description": "Enable automatic search flag.\n"
                },
                "enableInteractiveSearch": {
                    "type": "boolean",
                    "description": "Enable interactive search flag.\n"
                },
                "enableRss": {
                    "type": "boolean",
                    "description": "Enable RSS flag.\n"
                },
                "implementation": {
                    "type": "string",
                    "description": "Indexer implementation name.\n"
                },
                "minimumSeeders": {
                    "type": "integer",
                    "description": "Minimum seeders.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Indexer name.\n"
                },
                "passkey": {
                    "type": "string",
                    "description": "Passkey.\n",
                    "secret": true
                },
                "password": {
                    "type": "string",
                    "description": "Password.\n",
                    "secret": true
                },
                "priority": {
                    "type": "integer",
                    "description": "Priority.\n"
                },
                "protocol": {
                    "type": "string",
                    "description": "Protocol. Valid values are 'usenet' and 'torrent'.\n"
                },
                "rankedOnly": {
                    "type": "boolean",
                    "description": "Allow ranked only.\n"
                },
                "seedRatio": {
                    "type": "number",
                    "description": "Seed ratio.\n"
                },
                "seedTime": {
                    "type": "integer",
                    "description": "Seed time.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username.\n"
                }
            },
            "required": [
                "additionalParameters",
                "allowZeroSize",
                "apiKey",
                "apiPath",
                "apiUser",
                "authorSeedTime",
                "baseUrl",
                "captchaToken",
                "categories",
                "configContract",
                "cookie",
                "delay",
                "earlyReleaseLimit",
                "enableAutomaticSearch",
                "enableInteractiveSearch",
                "enableRss",
                "implementation",
                "minimumSeeders",
                "name",
                "passkey",
                "password",
                "priority",
                "protocol",
                "rankedOnly",
                "seedRatio",
                "seedTime",
                "tags",
                "username"
            ],
            "inputProperties": {
                "additionalParameters": {
                    "type": "string",
                    "description": "Additional parameters.\n"
                },
                "allowZeroSize": {
                    "type": "boolean",
                    "description": "Allow zero size files.\n"
                },
                "apiKey": {
                    "type": "string",
                    "description": "API key.\n"
                },
                "apiPath": {
                    "type": "string",
                    "description": "API path.\n"
                },
                "apiUser": {
                    "type": "string",
                    "description": "API User.\n"
                },
                "authorSeedTime": {
                    "type": "integer",
                    "description": "Author seed time.\n"
                },
                "baseUrl": {
                    "type": "string",
                    "description": "Base URL.\n"
                },
                "captchaToken": {
                    "type": "string",
                    "description": "Captcha token.\n"
                },
                "categories": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "Series list.\n"
                },
                "configContract": {
                    "type": "string",
                    "description": "Indexer configuration template.\n"
                },
                "cookie": {
                    "type": "string",
                    "description": "Cookie.\n"
                },
                "delay": {
                    "type": "integer",
                    "description": "Delay before grabbing.\n"
                },
                "earlyReleaseLimit": {
                    "type": "integer",
                    "description": "Early release limit.\n"
                },
                "enableAutomaticSearch": {
                    "type": "boolean",
                    "description": "Enable automatic search flag.\n"
                },
                "enableInteractiveSearch": {
                    "type": "boolean",
                    "description": "Enable interactive search flag.\n"
                },
                "enableRss": {
                    "type": "boolean",
                    "description": "Enable RSS flag.\n"
                },
                "implementation": {
                    "type": "string",
                    "description": "Indexer implementation name.\n"
                },
                "minimumSeeders": {
                    "type": "integer",
                    "description": "Minimum seeders.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Indexer name.\n"
                },
                "passkey": {
                    "type": "string",
                    "description": "Passkey.\n",
                    "secret": true
                },
                "password": {
                    "type": "string",
                    "description": "Password.\n",
                    "secret": true
                },
                "priority": {
                    "type": "integer",
                    "description": "Priority.\n"
                },
                "protocol": {
                    "type": "string",
                    "description": "Protocol. Valid values are 'usenet' and 'torrent'.\n"
                },
                "rankedOnly": {
                    "type": "boolean",
                    "description": "Allow ranked only.\n"
                },
                "seedRatio": {
                    "type": "number",
                    "description": "Seed ratio.\n"
                },
                "seedTime": {
                    "type": "integer",
                    "description": "Seed time.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username.\n"
                }
            },
            "requiredInputs": [
                "configContract",
                "implementation",
                "name",
                "protocol"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Indexer resources.\n",
                "properties": {
                    "additionalParameters": {
                        "type": "string",
                        "description": "Additional parameters.\n"
                    },
                    "allowZeroSize": {
                        "type": "boolean",
                        "description": "Allow zero size files.\n"
                    },
                    "apiKey": {
                        "type": "string",
                        "description": "API key.\n"
                    },
                    "apiPath": {
                        "type": "string",
                        "description": "API path.\n"
                    },
                    "apiUser": {
                        "type": "string",
                        "description": "API User.\n"
                    },
                    "authorSeedTime": {
                        "type": "integer",
                        "description": "Author seed time.\n"
                    },
                    "baseUrl": {
                        "type": "string",
                        "description": "Base URL.\n"
                    },
                    "captchaToken": {
                        "type": "string",
                        "description": "Captcha token.\n"
                    },
                    "categories": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "Series list.\n"
                    },
                    "configContract": {
                        "type": "string",
                        "description": "Indexer configuration template.\n"
                    },
                    "cookie": {
                        "type": "string",
                        "description": "Cookie.\n"
                    },
                    "delay": {
                        "type": "integer",
                        "description": "Delay before grabbing.\n"
                    },
                    "earlyReleaseLimit": {
                        "type": "integer",
                        "description": "Early release limit.\n"
                    },
                    "enableAutomaticSearch": {
                        "type": "boolean",
                        "description": "Enable automatic search flag.\n"
                    },
                    "enableInteractiveSearch": {
                        "type": "boolean",
                        "description": "Enable interactive search flag.\n"
                    },
                    "enableRss": {
                        "type": "boolean",
                        "description": "Enable RSS flag.\n"
                    },
                    "implementation": {
                        "type": "string",
                        "description": "Indexer implementation name.\n"
                    },
                    "minimumSeeders": {
                        "type": "integer",
                        "description": "Minimum seeders.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Indexer name.\n"
                    },
                    "passkey": {
                        "type": "string",
                        "description": "Passkey.\n",
                        "secret": true
                    },
                    "password": {
                        "type": "string",
                        "description": "Password.\n",
                        "secret": true
                    },
                    "priority": {
                        "type": "integer",
                        "description": "Priority.\n"
                    },
                    "protocol": {
                        "type": "string",
                        "description": "Protocol. Valid values are 'usenet' and 'torrent'.\n"
                    },
                    "rankedOnly": {
                        "type": "boolean",
                        "description": "Allow ranked only.\n"
                    },
                    "seedRatio": {
                        "type": "number",
                        "description": "Seed ratio.\n"
                    },
                    "seedTime": {
                        "type": "integer",
                        "description": "Seed time.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "List of associated tags.\n"
                    },
                    "username": {
                        "type": "string",
                        "description": "Username.\n"
                    }
                },
                "type": "object"
            }
        },
        "readarr:Indexers/indexerConfig:IndexerConfig": {
            "description": "\u003c!-- subcategory:Indexers --\u003eIndexer Config resource.\nFor more information refer to [Indexer](https://wiki.servarr.com/readarr/settings#options) documentation.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as readarr from \"@maienm/pulumi-readarr\";\n\nconst example = new readarr.indexers.IndexerConfig(\"example\", {\n    maximumSize: 0,\n    minimumAge: 0,\n    retention: 0,\n    rssSyncInterval: 25,\n});\n```\n```python\nimport pulumi\nimport pulumi_readarr as readarr\n\nexample = readarr.indexers.IndexerConfig(\"example\",\n    maximum_size=0,\n    minimum_age=0,\n    retention=0,\n    rss_sync_interval=25)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Readarr = MaienM.Readarr;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Readarr.Indexers.IndexerConfig(\"example\", new()\n    {\n        MaximumSize = 0,\n        MinimumAge = 0,\n        Retention = 0,\n        RssSyncInterval = 25,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/MaienM/pulumi-readarr/sdk/v2/go/readarr/Indexers\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := Indexers.NewIndexerConfig(ctx, \"example\", \u0026Indexers.IndexerConfigArgs{\n\t\t\tMaximumSize:     pulumi.Int(0),\n\t\t\tMinimumAge:      pulumi.Int(0),\n\t\t\tRetention:       pulumi.Int(0),\n\t\t\tRssSyncInterval: pulumi.Int(25),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.readarr.Indexers.IndexerConfig;\nimport com.pulumi.readarr.Indexers.IndexerConfigArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new IndexerConfig(\"example\", IndexerConfigArgs.builder()        \n            .maximumSize(0)\n            .minimumAge(0)\n            .retention(0)\n            .rssSyncInterval(25)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: readarr:Indexers:IndexerConfig\n    properties:\n      maximumSize: 0\n      minimumAge: 0\n      retention: 0\n      rssSyncInterval: 25\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nimport does not need parameters\n\n```sh\n $ pulumi import readarr:Indexers/indexerConfig:IndexerConfig example\n```\n\n ",
            "properties": {
                "maximumSize": {
                    "type": "integer",
                    "description": "Maximum size.\n"
                },
                "minimumAge": {
                    "type": "integer",
                    "description": "Minimum age.\n"
                },
                "retention": {
                    "type": "integer",
                    "description": "Retention.\n"
                },
                "rssSyncInterval": {
                    "type": "integer",
                    "description": "RSS sync interval.\n"
                }
            },
            "required": [
                "maximumSize",
                "minimumAge",
                "retention",
                "rssSyncInterval"
            ],
            "inputProperties": {
                "maximumSize": {
                    "type": "integer",
                    "description": "Maximum size.\n"
                },
                "minimumAge": {
                    "type": "integer",
                    "description": "Minimum age.\n"
                },
                "retention": {
                    "type": "integer",
                    "description": "Retention.\n"
                },
                "rssSyncInterval": {
                    "type": "integer",
                    "description": "RSS sync interval.\n"
                }
            },
            "requiredInputs": [
                "maximumSize",
                "minimumAge",
                "retention",
                "rssSyncInterval"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering IndexerConfig resources.\n",
                "properties": {
                    "maximumSize": {
                        "type": "integer",
                        "description": "Maximum size.\n"
                    },
                    "minimumAge": {
                        "type": "integer",
                        "description": "Minimum age.\n"
                    },
                    "retention": {
                        "type": "integer",
                        "description": "Retention.\n"
                    },
                    "rssSyncInterval": {
                        "type": "integer",
                        "description": "RSS sync interval.\n"
                    }
                },
                "type": "object"
            }
        },
        "readarr:Indexers/indexerFilelist:IndexerFilelist": {
            "description": "\u003c!-- subcategory:Indexers --\u003eIndexer FileList resource.\nFor more information refer to [Indexer](https://wiki.servarr.com/readarr/settings#indexers) and [FileList](https://wiki.servarr.com/readarr/supported#filelist).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.readarr.Indexers.IndexerFilelist;\nimport com.pulumi.readarr.Indexers.IndexerFilelistArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new IndexerFilelist(\"example\", IndexerFilelistArgs.builder()        \n            .baseUrl(\"https://filelist.io\")\n            .categories(            \n                4,\n                6,\n                1)\n            .enableAutomaticSearch(true)\n            .minimumSeeders(1)\n            .name(\"Example\")\n            .passkey(\"PassKey\")\n            .requiredFlags(            \n                1,\n                4)\n            .username(\"User\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: readarr:Indexers:IndexerFilelist\n    properties:\n      baseUrl: https://filelist.io\n      categories:\n        - 4\n        - 6\n        - 1\n      enableAutomaticSearch: true\n      minimumSeeders: 1\n      name: Example\n      passkey: PassKey\n      requiredFlags:\n        - 1\n        - 4\n      username: User\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nimport using the API/UI ID\n\n```sh\n $ pulumi import readarr:Indexers/indexerFilelist:IndexerFilelist example 1\n```\n\n ",
            "properties": {
                "authorSeedTime": {
                    "type": "integer",
                    "description": "Author seed time.\n"
                },
                "baseUrl": {
                    "type": "string",
                    "description": "Base URL.\n"
                },
                "categories": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "Categories list.\n"
                },
                "earlyReleaseLimit": {
                    "type": "integer",
                    "description": "Early release limit.\n"
                },
                "enableAutomaticSearch": {
                    "type": "boolean",
                    "description": "Enable automatic search flag.\n"
                },
                "enableInteractiveSearch": {
                    "type": "boolean",
                    "description": "Enable interactive search flag.\n"
                },
                "enableRss": {
                    "type": "boolean",
                    "description": "Enable RSS flag.\n"
                },
                "minimumSeeders": {
                    "type": "integer",
                    "description": "Minimum seeders.\n"
                },
                "name": {
                    "type": "string",
                    "description": "IndexerFilelist name.\n"
                },
                "passkey": {
                    "type": "string",
                    "description": "Passkey.\n",
                    "secret": true
                },
                "priority": {
                    "type": "integer",
                    "description": "Priority.\n"
                },
                "seedRatio": {
                    "type": "number",
                    "description": "Seed ratio.\n"
                },
                "seedTime": {
                    "type": "integer",
                    "description": "Seed time.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username.\n"
                }
            },
            "required": [
                "authorSeedTime",
                "baseUrl",
                "categories",
                "earlyReleaseLimit",
                "enableAutomaticSearch",
                "enableInteractiveSearch",
                "enableRss",
                "minimumSeeders",
                "name",
                "passkey",
                "priority",
                "seedRatio",
                "seedTime",
                "tags",
                "username"
            ],
            "inputProperties": {
                "authorSeedTime": {
                    "type": "integer",
                    "description": "Author seed time.\n"
                },
                "baseUrl": {
                    "type": "string",
                    "description": "Base URL.\n"
                },
                "categories": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "Categories list.\n"
                },
                "earlyReleaseLimit": {
                    "type": "integer",
                    "description": "Early release limit.\n"
                },
                "enableAutomaticSearch": {
                    "type": "boolean",
                    "description": "Enable automatic search flag.\n"
                },
                "enableInteractiveSearch": {
                    "type": "boolean",
                    "description": "Enable interactive search flag.\n"
                },
                "enableRss": {
                    "type": "boolean",
                    "description": "Enable RSS flag.\n"
                },
                "minimumSeeders": {
                    "type": "integer",
                    "description": "Minimum seeders.\n"
                },
                "name": {
                    "type": "string",
                    "description": "IndexerFilelist name.\n"
                },
                "passkey": {
                    "type": "string",
                    "description": "Passkey.\n",
                    "secret": true
                },
                "priority": {
                    "type": "integer",
                    "description": "Priority.\n"
                },
                "seedRatio": {
                    "type": "number",
                    "description": "Seed ratio.\n"
                },
                "seedTime": {
                    "type": "integer",
                    "description": "Seed time.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username.\n"
                }
            },
            "requiredInputs": [
                "name",
                "passkey",
                "username"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering IndexerFilelist resources.\n",
                "properties": {
                    "authorSeedTime": {
                        "type": "integer",
                        "description": "Author seed time.\n"
                    },
                    "baseUrl": {
                        "type": "string",
                        "description": "Base URL.\n"
                    },
                    "categories": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "Categories list.\n"
                    },
                    "earlyReleaseLimit": {
                        "type": "integer",
                        "description": "Early release limit.\n"
                    },
                    "enableAutomaticSearch": {
                        "type": "boolean",
                        "description": "Enable automatic search flag.\n"
                    },
                    "enableInteractiveSearch": {
                        "type": "boolean",
                        "description": "Enable interactive search flag.\n"
                    },
                    "enableRss": {
                        "type": "boolean",
                        "description": "Enable RSS flag.\n"
                    },
                    "minimumSeeders": {
                        "type": "integer",
                        "description": "Minimum seeders.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "IndexerFilelist name.\n"
                    },
                    "passkey": {
                        "type": "string",
                        "description": "Passkey.\n",
                        "secret": true
                    },
                    "priority": {
                        "type": "integer",
                        "description": "Priority.\n"
                    },
                    "seedRatio": {
                        "type": "number",
                        "description": "Seed ratio.\n"
                    },
                    "seedTime": {
                        "type": "integer",
                        "description": "Seed time.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "List of associated tags.\n"
                    },
                    "username": {
                        "type": "string",
                        "description": "Username.\n"
                    }
                },
                "type": "object"
            }
        },
        "readarr:Indexers/indexerGazelle:IndexerGazelle": {
            "description": "\u003c!-- subcategory:Indexers --\u003eIndexer Gazelle resource.\nFor more information refer to [Indexer](https://wiki.servarr.com/readarr/settings#indexers) and [Gazelle](https://wiki.servarr.com/readarr/supported#gazelle).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as readarr from \"@maienm/pulumi-readarr\";\n\nconst example = new readarr.indexers.IndexerGazelle(\"example\", {\n    baseUrl: \"https://orpheus.network\",\n    enableAutomaticSearch: true,\n    minimumSeeders: 1,\n    name: \"Example\",\n    password: \"Pass\",\n    username: \"User\",\n});\n```\n```python\nimport pulumi\nimport pulumi_readarr as readarr\n\nexample = readarr.indexers.IndexerGazelle(\"example\",\n    base_url=\"https://orpheus.network\",\n    enable_automatic_search=True,\n    minimum_seeders=1,\n    name=\"Example\",\n    password=\"Pass\",\n    username=\"User\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Readarr = MaienM.Readarr;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Readarr.Indexers.IndexerGazelle(\"example\", new()\n    {\n        BaseUrl = \"https://orpheus.network\",\n        EnableAutomaticSearch = true,\n        MinimumSeeders = 1,\n        Name = \"Example\",\n        Password = \"Pass\",\n        Username = \"User\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/MaienM/pulumi-readarr/sdk/v2/go/readarr/Indexers\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := Indexers.NewIndexerGazelle(ctx, \"example\", \u0026Indexers.IndexerGazelleArgs{\n\t\t\tBaseUrl:               pulumi.String(\"https://orpheus.network\"),\n\t\t\tEnableAutomaticSearch: pulumi.Bool(true),\n\t\t\tMinimumSeeders:        pulumi.Int(1),\n\t\t\tName:                  pulumi.String(\"Example\"),\n\t\t\tPassword:              pulumi.String(\"Pass\"),\n\t\t\tUsername:              pulumi.String(\"User\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.readarr.Indexers.IndexerGazelle;\nimport com.pulumi.readarr.Indexers.IndexerGazelleArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new IndexerGazelle(\"example\", IndexerGazelleArgs.builder()        \n            .baseUrl(\"https://orpheus.network\")\n            .enableAutomaticSearch(true)\n            .minimumSeeders(1)\n            .name(\"Example\")\n            .password(\"Pass\")\n            .username(\"User\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: readarr:Indexers:IndexerGazelle\n    properties:\n      baseUrl: https://orpheus.network\n      enableAutomaticSearch: true\n      minimumSeeders: 1\n      name: Example\n      password: Pass\n      username: User\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nimport using the API/UI ID\n\n```sh\n $ pulumi import readarr:Indexers/indexerGazelle:IndexerGazelle example 1\n```\n\n ",
            "properties": {
                "authorSeedTime": {
                    "type": "integer",
                    "description": "Author seed time.\n"
                },
                "baseUrl": {
                    "type": "string",
                    "description": "Base URL.\n"
                },
                "earlyReleaseLimit": {
                    "type": "integer",
                    "description": "Early release limit.\n"
                },
                "enableAutomaticSearch": {
                    "type": "boolean",
                    "description": "Enable automatic search flag.\n"
                },
                "enableInteractiveSearch": {
                    "type": "boolean",
                    "description": "Enable interactive search flag.\n"
                },
                "enableRss": {
                    "type": "boolean",
                    "description": "Enable RSS flag.\n"
                },
                "minimumSeeders": {
                    "type": "integer",
                    "description": "Minimum seeders.\n"
                },
                "name": {
                    "type": "string",
                    "description": "IndexerGazelle name.\n"
                },
                "password": {
                    "type": "string",
                    "description": "Password.\n",
                    "secret": true
                },
                "priority": {
                    "type": "integer",
                    "description": "Priority.\n"
                },
                "seedRatio": {
                    "type": "number",
                    "description": "Seed ratio.\n"
                },
                "seedTime": {
                    "type": "integer",
                    "description": "Seed time.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username.\n"
                }
            },
            "required": [
                "authorSeedTime",
                "baseUrl",
                "earlyReleaseLimit",
                "enableAutomaticSearch",
                "enableInteractiveSearch",
                "enableRss",
                "minimumSeeders",
                "name",
                "password",
                "priority",
                "seedRatio",
                "seedTime",
                "tags",
                "username"
            ],
            "inputProperties": {
                "authorSeedTime": {
                    "type": "integer",
                    "description": "Author seed time.\n"
                },
                "baseUrl": {
                    "type": "string",
                    "description": "Base URL.\n"
                },
                "earlyReleaseLimit": {
                    "type": "integer",
                    "description": "Early release limit.\n"
                },
                "enableAutomaticSearch": {
                    "type": "boolean",
                    "description": "Enable automatic search flag.\n"
                },
                "enableInteractiveSearch": {
                    "type": "boolean",
                    "description": "Enable interactive search flag.\n"
                },
                "enableRss": {
                    "type": "boolean",
                    "description": "Enable RSS flag.\n"
                },
                "minimumSeeders": {
                    "type": "integer",
                    "description": "Minimum seeders.\n"
                },
                "name": {
                    "type": "string",
                    "description": "IndexerGazelle name.\n"
                },
                "password": {
                    "type": "string",
                    "description": "Password.\n",
                    "secret": true
                },
                "priority": {
                    "type": "integer",
                    "description": "Priority.\n"
                },
                "seedRatio": {
                    "type": "number",
                    "description": "Seed ratio.\n"
                },
                "seedTime": {
                    "type": "integer",
                    "description": "Seed time.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username.\n"
                }
            },
            "requiredInputs": [
                "name",
                "password",
                "username"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering IndexerGazelle resources.\n",
                "properties": {
                    "authorSeedTime": {
                        "type": "integer",
                        "description": "Author seed time.\n"
                    },
                    "baseUrl": {
                        "type": "string",
                        "description": "Base URL.\n"
                    },
                    "earlyReleaseLimit": {
                        "type": "integer",
                        "description": "Early release limit.\n"
                    },
                    "enableAutomaticSearch": {
                        "type": "boolean",
                        "description": "Enable automatic search flag.\n"
                    },
                    "enableInteractiveSearch": {
                        "type": "boolean",
                        "description": "Enable interactive search flag.\n"
                    },
                    "enableRss": {
                        "type": "boolean",
                        "description": "Enable RSS flag.\n"
                    },
                    "minimumSeeders": {
                        "type": "integer",
                        "description": "Minimum seeders.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "IndexerGazelle name.\n"
                    },
                    "password": {
                        "type": "string",
                        "description": "Password.\n",
                        "secret": true
                    },
                    "priority": {
                        "type": "integer",
                        "description": "Priority.\n"
                    },
                    "seedRatio": {
                        "type": "number",
                        "description": "Seed ratio.\n"
                    },
                    "seedTime": {
                        "type": "integer",
                        "description": "Seed time.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "List of associated tags.\n"
                    },
                    "username": {
                        "type": "string",
                        "description": "Username.\n"
                    }
                },
                "type": "object"
            }
        },
        "readarr:Indexers/indexerIptorrents:IndexerIptorrents": {
            "description": "\u003c!-- subcategory:Indexers --\u003eIndexer IP Torrents resource.\nFor more information refer to [Indexer](https://wiki.servarr.com/readarr/settings#indexers) and [IP Torrents](https://wiki.servarr.com/readarr/supported#iptorrents).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as readarr from \"@maienm/pulumi-readarr\";\n\nconst example = new readarr.indexers.IndexerIptorrents(\"example\", {\n    baseUrl: \"https://iptorrent.io\",\n    enableRss: true,\n    minimumSeeders: 1,\n    name: \"Example\",\n});\n```\n```python\nimport pulumi\nimport pulumi_readarr as readarr\n\nexample = readarr.indexers.IndexerIptorrents(\"example\",\n    base_url=\"https://iptorrent.io\",\n    enable_rss=True,\n    minimum_seeders=1,\n    name=\"Example\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Readarr = MaienM.Readarr;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Readarr.Indexers.IndexerIptorrents(\"example\", new()\n    {\n        BaseUrl = \"https://iptorrent.io\",\n        EnableRss = true,\n        MinimumSeeders = 1,\n        Name = \"Example\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/MaienM/pulumi-readarr/sdk/v2/go/readarr/Indexers\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := Indexers.NewIndexerIptorrents(ctx, \"example\", \u0026Indexers.IndexerIptorrentsArgs{\n\t\t\tBaseUrl:        pulumi.String(\"https://iptorrent.io\"),\n\t\t\tEnableRss:      pulumi.Bool(true),\n\t\t\tMinimumSeeders: pulumi.Int(1),\n\t\t\tName:           pulumi.String(\"Example\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.readarr.Indexers.IndexerIptorrents;\nimport com.pulumi.readarr.Indexers.IndexerIptorrentsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new IndexerIptorrents(\"example\", IndexerIptorrentsArgs.builder()        \n            .baseUrl(\"https://iptorrent.io\")\n            .enableRss(true)\n            .minimumSeeders(1)\n            .name(\"Example\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: readarr:Indexers:IndexerIptorrents\n    properties:\n      baseUrl: https://iptorrent.io\n      enableRss: true\n      minimumSeeders: 1\n      name: Example\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nimport using the API/UI ID\n\n```sh\n $ pulumi import readarr:Indexers/indexerIptorrents:IndexerIptorrents example 1\n```\n\n ",
            "properties": {
                "authorSeedTime": {
                    "type": "integer",
                    "description": "Author seed time.\n"
                },
                "baseUrl": {
                    "type": "string",
                    "description": "Base URL.\n"
                },
                "earlyReleaseLimit": {
                    "type": "integer",
                    "description": "Early release limit.\n"
                },
                "enableRss": {
                    "type": "boolean",
                    "description": "Enable RSS flag.\n"
                },
                "minimumSeeders": {
                    "type": "integer",
                    "description": "Minimum seeders.\n"
                },
                "name": {
                    "type": "string",
                    "description": "IndexerIptorrents name.\n"
                },
                "priority": {
                    "type": "integer",
                    "description": "Priority.\n"
                },
                "seedRatio": {
                    "type": "number",
                    "description": "Seed ratio.\n"
                },
                "seedTime": {
                    "type": "integer",
                    "description": "Seed time.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                }
            },
            "required": [
                "authorSeedTime",
                "baseUrl",
                "earlyReleaseLimit",
                "enableRss",
                "minimumSeeders",
                "name",
                "priority",
                "seedRatio",
                "seedTime",
                "tags"
            ],
            "inputProperties": {
                "authorSeedTime": {
                    "type": "integer",
                    "description": "Author seed time.\n"
                },
                "baseUrl": {
                    "type": "string",
                    "description": "Base URL.\n"
                },
                "earlyReleaseLimit": {
                    "type": "integer",
                    "description": "Early release limit.\n"
                },
                "enableRss": {
                    "type": "boolean",
                    "description": "Enable RSS flag.\n"
                },
                "minimumSeeders": {
                    "type": "integer",
                    "description": "Minimum seeders.\n"
                },
                "name": {
                    "type": "string",
                    "description": "IndexerIptorrents name.\n"
                },
                "priority": {
                    "type": "integer",
                    "description": "Priority.\n"
                },
                "seedRatio": {
                    "type": "number",
                    "description": "Seed ratio.\n"
                },
                "seedTime": {
                    "type": "integer",
                    "description": "Seed time.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                }
            },
            "requiredInputs": [
                "baseUrl",
                "name"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering IndexerIptorrents resources.\n",
                "properties": {
                    "authorSeedTime": {
                        "type": "integer",
                        "description": "Author seed time.\n"
                    },
                    "baseUrl": {
                        "type": "string",
                        "description": "Base URL.\n"
                    },
                    "earlyReleaseLimit": {
                        "type": "integer",
                        "description": "Early release limit.\n"
                    },
                    "enableRss": {
                        "type": "boolean",
                        "description": "Enable RSS flag.\n"
                    },
                    "minimumSeeders": {
                        "type": "integer",
                        "description": "Minimum seeders.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "IndexerIptorrents name.\n"
                    },
                    "priority": {
                        "type": "integer",
                        "description": "Priority.\n"
                    },
                    "seedRatio": {
                        "type": "number",
                        "description": "Seed ratio.\n"
                    },
                    "seedTime": {
                        "type": "integer",
                        "description": "Seed time.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "List of associated tags.\n"
                    }
                },
                "type": "object"
            }
        },
        "readarr:Indexers/indexerNewznab:IndexerNewznab": {
            "description": "\u003c!-- subcategory:Indexers --\u003eIndexer Newznab resource.\nFor more information refer to [Indexer](https://wiki.servarr.com/readarr/settings#indexers) and [Newznab](https://wiki.servarr.com/readarr/supported#newznab).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as readarr from \"@maienm/pulumi-readarr\";\n\nconst example = new readarr.indexers.IndexerNewznab(\"example\", {\n    apiPath: \"/api\",\n    baseUrl: \"https://lolo.sickbeard.com\",\n    categories: [\n        8000,\n        5000,\n    ],\n    enableAutomaticSearch: true,\n    name: \"Example\",\n    tags: [\n        1,\n        2,\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_readarr as readarr\n\nexample = readarr.indexers.IndexerNewznab(\"example\",\n    api_path=\"/api\",\n    base_url=\"https://lolo.sickbeard.com\",\n    categories=[\n        8000,\n        5000,\n    ],\n    enable_automatic_search=True,\n    name=\"Example\",\n    tags=[\n        1,\n        2,\n    ])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Readarr = MaienM.Readarr;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Readarr.Indexers.IndexerNewznab(\"example\", new()\n    {\n        ApiPath = \"/api\",\n        BaseUrl = \"https://lolo.sickbeard.com\",\n        Categories = new[]\n        {\n            8000,\n            5000,\n        },\n        EnableAutomaticSearch = true,\n        Name = \"Example\",\n        Tags = new[]\n        {\n            1,\n            2,\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/MaienM/pulumi-readarr/sdk/v2/go/readarr/Indexers\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := Indexers.NewIndexerNewznab(ctx, \"example\", \u0026Indexers.IndexerNewznabArgs{\n\t\t\tApiPath: pulumi.String(\"/api\"),\n\t\t\tBaseUrl: pulumi.String(\"https://lolo.sickbeard.com\"),\n\t\t\tCategories: pulumi.IntArray{\n\t\t\t\tpulumi.Int(8000),\n\t\t\t\tpulumi.Int(5000),\n\t\t\t},\n\t\t\tEnableAutomaticSearch: pulumi.Bool(true),\n\t\t\tName:                  pulumi.String(\"Example\"),\n\t\t\tTags: pulumi.IntArray{\n\t\t\t\tpulumi.Int(1),\n\t\t\t\tpulumi.Int(2),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.readarr.Indexers.IndexerNewznab;\nimport com.pulumi.readarr.Indexers.IndexerNewznabArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new IndexerNewznab(\"example\", IndexerNewznabArgs.builder()        \n            .apiPath(\"/api\")\n            .baseUrl(\"https://lolo.sickbeard.com\")\n            .categories(            \n                8000,\n                5000)\n            .enableAutomaticSearch(true)\n            .name(\"Example\")\n            .tags(            \n                1,\n                2)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: readarr:Indexers:IndexerNewznab\n    properties:\n      apiPath: /api\n      baseUrl: https://lolo.sickbeard.com\n      categories:\n        - 8000\n        - 5000\n      enableAutomaticSearch: true\n      name: Example\n      tags:\n        - 1\n        - 2\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nimport using the API/UI ID\n\n```sh\n $ pulumi import readarr:Indexers/indexerNewznab:IndexerNewznab example 1\n```\n\n ",
            "properties": {
                "additionalParameters": {
                    "type": "string",
                    "description": "Additional parameters.\n"
                },
                "apiKey": {
                    "type": "string",
                    "description": "API key.\n"
                },
                "apiPath": {
                    "type": "string",
                    "description": "API path.\n"
                },
                "baseUrl": {
                    "type": "string",
                    "description": "Base URL.\n"
                },
                "categories": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "Series list.\n"
                },
                "earlyReleaseLimit": {
                    "type": "integer",
                    "description": "Early release limit.\n"
                },
                "enableAutomaticSearch": {
                    "type": "boolean",
                    "description": "Enable automatic search flag.\n"
                },
                "enableInteractiveSearch": {
                    "type": "boolean",
                    "description": "Enable interactive search flag.\n"
                },
                "enableRss": {
                    "type": "boolean",
                    "description": "Enable RSS flag.\n"
                },
                "name": {
                    "type": "string",
                    "description": "IndexerNewznab name.\n"
                },
                "priority": {
                    "type": "integer",
                    "description": "Priority.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                }
            },
            "required": [
                "additionalParameters",
                "apiKey",
                "apiPath",
                "baseUrl",
                "categories",
                "earlyReleaseLimit",
                "enableAutomaticSearch",
                "enableInteractiveSearch",
                "enableRss",
                "name",
                "priority",
                "tags"
            ],
            "inputProperties": {
                "additionalParameters": {
                    "type": "string",
                    "description": "Additional parameters.\n"
                },
                "apiKey": {
                    "type": "string",
                    "description": "API key.\n"
                },
                "apiPath": {
                    "type": "string",
                    "description": "API path.\n"
                },
                "baseUrl": {
                    "type": "string",
                    "description": "Base URL.\n"
                },
                "categories": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "Series list.\n"
                },
                "earlyReleaseLimit": {
                    "type": "integer",
                    "description": "Early release limit.\n"
                },
                "enableAutomaticSearch": {
                    "type": "boolean",
                    "description": "Enable automatic search flag.\n"
                },
                "enableInteractiveSearch": {
                    "type": "boolean",
                    "description": "Enable interactive search flag.\n"
                },
                "enableRss": {
                    "type": "boolean",
                    "description": "Enable RSS flag.\n"
                },
                "name": {
                    "type": "string",
                    "description": "IndexerNewznab name.\n"
                },
                "priority": {
                    "type": "integer",
                    "description": "Priority.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                }
            },
            "requiredInputs": [
                "name"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering IndexerNewznab resources.\n",
                "properties": {
                    "additionalParameters": {
                        "type": "string",
                        "description": "Additional parameters.\n"
                    },
                    "apiKey": {
                        "type": "string",
                        "description": "API key.\n"
                    },
                    "apiPath": {
                        "type": "string",
                        "description": "API path.\n"
                    },
                    "baseUrl": {
                        "type": "string",
                        "description": "Base URL.\n"
                    },
                    "categories": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "Series list.\n"
                    },
                    "earlyReleaseLimit": {
                        "type": "integer",
                        "description": "Early release limit.\n"
                    },
                    "enableAutomaticSearch": {
                        "type": "boolean",
                        "description": "Enable automatic search flag.\n"
                    },
                    "enableInteractiveSearch": {
                        "type": "boolean",
                        "description": "Enable interactive search flag.\n"
                    },
                    "enableRss": {
                        "type": "boolean",
                        "description": "Enable RSS flag.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "IndexerNewznab name.\n"
                    },
                    "priority": {
                        "type": "integer",
                        "description": "Priority.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "List of associated tags.\n"
                    }
                },
                "type": "object"
            }
        },
        "readarr:Indexers/indexerNyaa:IndexerNyaa": {
            "description": "\u003c!-- subcategory:Indexers --\u003eIndexer Nyaa resource.\nFor more information refer to [Indexer](https://wiki.servarr.com/readarr/settings#indexers) and [Nyaa](https://wiki.servarr.com/readarr/supported#nyaa).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as readarr from \"@maienm/pulumi-readarr\";\n\nconst example = new readarr.indexers.IndexerNyaa(\"example\", {\n    additionalParameters: \"\u0026cats=1_0\u0026filter=1\",\n    baseUrl: \"https://nyaa.io\",\n    enableAutomaticSearch: true,\n    minimumSeeders: 1,\n    name: \"Example\",\n});\n```\n```python\nimport pulumi\nimport pulumi_readarr as readarr\n\nexample = readarr.indexers.IndexerNyaa(\"example\",\n    additional_parameters=\"\u0026cats=1_0\u0026filter=1\",\n    base_url=\"https://nyaa.io\",\n    enable_automatic_search=True,\n    minimum_seeders=1,\n    name=\"Example\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Readarr = MaienM.Readarr;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Readarr.Indexers.IndexerNyaa(\"example\", new()\n    {\n        AdditionalParameters = \"\u0026cats=1_0\u0026filter=1\",\n        BaseUrl = \"https://nyaa.io\",\n        EnableAutomaticSearch = true,\n        MinimumSeeders = 1,\n        Name = \"Example\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/MaienM/pulumi-readarr/sdk/v2/go/readarr/Indexers\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := Indexers.NewIndexerNyaa(ctx, \"example\", \u0026Indexers.IndexerNyaaArgs{\n\t\t\tAdditionalParameters:  pulumi.String(\"\u0026cats=1_0\u0026filter=1\"),\n\t\t\tBaseUrl:               pulumi.String(\"https://nyaa.io\"),\n\t\t\tEnableAutomaticSearch: pulumi.Bool(true),\n\t\t\tMinimumSeeders:        pulumi.Int(1),\n\t\t\tName:                  pulumi.String(\"Example\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.readarr.Indexers.IndexerNyaa;\nimport com.pulumi.readarr.Indexers.IndexerNyaaArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new IndexerNyaa(\"example\", IndexerNyaaArgs.builder()        \n            .additionalParameters(\"\u0026cats=1_0\u0026filter=1\")\n            .baseUrl(\"https://nyaa.io\")\n            .enableAutomaticSearch(true)\n            .minimumSeeders(1)\n            .name(\"Example\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: readarr:Indexers:IndexerNyaa\n    properties:\n      additionalParameters: '\u0026cats=1_0\u0026filter=1'\n      baseUrl: https://nyaa.io\n      enableAutomaticSearch: true\n      minimumSeeders: 1\n      name: Example\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nimport using the API/UI ID\n\n```sh\n $ pulumi import readarr:Indexers/indexerNyaa:IndexerNyaa example 1\n```\n\n ",
            "properties": {
                "additionalParameters": {
                    "type": "string",
                    "description": "Additional parameters.\n"
                },
                "authorSeedTime": {
                    "type": "integer",
                    "description": "Author seed time.\n"
                },
                "baseUrl": {
                    "type": "string",
                    "description": "Base URL.\n"
                },
                "earlyReleaseLimit": {
                    "type": "integer",
                    "description": "Early release limit.\n"
                },
                "enableAutomaticSearch": {
                    "type": "boolean",
                    "description": "Enable automatic search flag.\n"
                },
                "enableInteractiveSearch": {
                    "type": "boolean",
                    "description": "Enable interactive search flag.\n"
                },
                "enableRss": {
                    "type": "boolean",
                    "description": "Enable RSS flag.\n"
                },
                "minimumSeeders": {
                    "type": "integer",
                    "description": "Minimum seeders.\n"
                },
                "name": {
                    "type": "string",
                    "description": "IndexerNyaa name.\n"
                },
                "priority": {
                    "type": "integer",
                    "description": "Priority.\n"
                },
                "seedRatio": {
                    "type": "number",
                    "description": "Seed ratio.\n"
                },
                "seedTime": {
                    "type": "integer",
                    "description": "Seed time.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                }
            },
            "required": [
                "additionalParameters",
                "authorSeedTime",
                "baseUrl",
                "earlyReleaseLimit",
                "enableAutomaticSearch",
                "enableInteractiveSearch",
                "enableRss",
                "minimumSeeders",
                "name",
                "priority",
                "seedRatio",
                "seedTime",
                "tags"
            ],
            "inputProperties": {
                "additionalParameters": {
                    "type": "string",
                    "description": "Additional parameters.\n"
                },
                "authorSeedTime": {
                    "type": "integer",
                    "description": "Author seed time.\n"
                },
                "baseUrl": {
                    "type": "string",
                    "description": "Base URL.\n"
                },
                "earlyReleaseLimit": {
                    "type": "integer",
                    "description": "Early release limit.\n"
                },
                "enableAutomaticSearch": {
                    "type": "boolean",
                    "description": "Enable automatic search flag.\n"
                },
                "enableInteractiveSearch": {
                    "type": "boolean",
                    "description": "Enable interactive search flag.\n"
                },
                "enableRss": {
                    "type": "boolean",
                    "description": "Enable RSS flag.\n"
                },
                "minimumSeeders": {
                    "type": "integer",
                    "description": "Minimum seeders.\n"
                },
                "name": {
                    "type": "string",
                    "description": "IndexerNyaa name.\n"
                },
                "priority": {
                    "type": "integer",
                    "description": "Priority.\n"
                },
                "seedRatio": {
                    "type": "number",
                    "description": "Seed ratio.\n"
                },
                "seedTime": {
                    "type": "integer",
                    "description": "Seed time.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                }
            },
            "requiredInputs": [
                "baseUrl",
                "name"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering IndexerNyaa resources.\n",
                "properties": {
                    "additionalParameters": {
                        "type": "string",
                        "description": "Additional parameters.\n"
                    },
                    "authorSeedTime": {
                        "type": "integer",
                        "description": "Author seed time.\n"
                    },
                    "baseUrl": {
                        "type": "string",
                        "description": "Base URL.\n"
                    },
                    "earlyReleaseLimit": {
                        "type": "integer",
                        "description": "Early release limit.\n"
                    },
                    "enableAutomaticSearch": {
                        "type": "boolean",
                        "description": "Enable automatic search flag.\n"
                    },
                    "enableInteractiveSearch": {
                        "type": "boolean",
                        "description": "Enable interactive search flag.\n"
                    },
                    "enableRss": {
                        "type": "boolean",
                        "description": "Enable RSS flag.\n"
                    },
                    "minimumSeeders": {
                        "type": "integer",
                        "description": "Minimum seeders.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "IndexerNyaa name.\n"
                    },
                    "priority": {
                        "type": "integer",
                        "description": "Priority.\n"
                    },
                    "seedRatio": {
                        "type": "number",
                        "description": "Seed ratio.\n"
                    },
                    "seedTime": {
                        "type": "integer",
                        "description": "Seed time.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "List of associated tags.\n"
                    }
                },
                "type": "object"
            }
        },
        "readarr:Indexers/indexerTorrentRss:IndexerTorrentRss": {
            "description": "\u003c!-- subcategory:Indexers --\u003eIndexer Torrent RSS resource.\nFor more information refer to [Indexer](https://wiki.servarr.com/readarr/settings#indexers) and [Torrent RSS](https://wiki.servarr.com/readarr/supported#torrentrssindexer).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.readarr.Indexers.IndexerTorrentRss;\nimport com.pulumi.readarr.Indexers.IndexerTorrentRssArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new IndexerTorrentRss(\"example\", IndexerTorrentRssArgs.builder()        \n            .allowZeroSize(true)\n            .baseUrl(\"https://rss.io\")\n            .enableAutomaticSearch(true)\n            .minimumSeeders(1)\n            .name(\"Example\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: readarr:Indexers:IndexerTorrentRss\n    properties:\n      allowZeroSize: true\n      baseUrl: https://rss.io\n      enableAutomaticSearch: true\n      minimumSeeders: 1\n      name: Example\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nimport using the API/UI ID\n\n```sh\n $ pulumi import readarr:Indexers/indexerTorrentRss:IndexerTorrentRss example 1\n```\n\n ",
            "properties": {
                "allowZeroSize": {
                    "type": "boolean",
                    "description": "Allow zero size files.\n"
                },
                "authorSeedTime": {
                    "type": "integer",
                    "description": "Author seed time.\n"
                },
                "baseUrl": {
                    "type": "string",
                    "description": "Base URL.\n"
                },
                "cookie": {
                    "type": "string",
                    "description": "Cookie.\n"
                },
                "earlyReleaseLimit": {
                    "type": "integer",
                    "description": "Early release limit.\n"
                },
                "enableRss": {
                    "type": "boolean",
                    "description": "Enable RSS flag.\n"
                },
                "minimumSeeders": {
                    "type": "integer",
                    "description": "Minimum seeders.\n"
                },
                "name": {
                    "type": "string",
                    "description": "IndexerTorrentRss name.\n"
                },
                "priority": {
                    "type": "integer",
                    "description": "Priority.\n"
                },
                "seedRatio": {
                    "type": "number",
                    "description": "Seed ratio.\n"
                },
                "seedTime": {
                    "type": "integer",
                    "description": "Seed time.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                }
            },
            "required": [
                "allowZeroSize",
                "authorSeedTime",
                "baseUrl",
                "cookie",
                "earlyReleaseLimit",
                "enableRss",
                "minimumSeeders",
                "name",
                "priority",
                "seedRatio",
                "seedTime",
                "tags"
            ],
            "inputProperties": {
                "allowZeroSize": {
                    "type": "boolean",
                    "description": "Allow zero size files.\n"
                },
                "authorSeedTime": {
                    "type": "integer",
                    "description": "Author seed time.\n"
                },
                "baseUrl": {
                    "type": "string",
                    "description": "Base URL.\n"
                },
                "cookie": {
                    "type": "string",
                    "description": "Cookie.\n"
                },
                "earlyReleaseLimit": {
                    "type": "integer",
                    "description": "Early release limit.\n"
                },
                "enableRss": {
                    "type": "boolean",
                    "description": "Enable RSS flag.\n"
                },
                "minimumSeeders": {
                    "type": "integer",
                    "description": "Minimum seeders.\n"
                },
                "name": {
                    "type": "string",
                    "description": "IndexerTorrentRss name.\n"
                },
                "priority": {
                    "type": "integer",
                    "description": "Priority.\n"
                },
                "seedRatio": {
                    "type": "number",
                    "description": "Seed ratio.\n"
                },
                "seedTime": {
                    "type": "integer",
                    "description": "Seed time.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                }
            },
            "requiredInputs": [
                "baseUrl",
                "name"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering IndexerTorrentRss resources.\n",
                "properties": {
                    "allowZeroSize": {
                        "type": "boolean",
                        "description": "Allow zero size files.\n"
                    },
                    "authorSeedTime": {
                        "type": "integer",
                        "description": "Author seed time.\n"
                    },
                    "baseUrl": {
                        "type": "string",
                        "description": "Base URL.\n"
                    },
                    "cookie": {
                        "type": "string",
                        "description": "Cookie.\n"
                    },
                    "earlyReleaseLimit": {
                        "type": "integer",
                        "description": "Early release limit.\n"
                    },
                    "enableRss": {
                        "type": "boolean",
                        "description": "Enable RSS flag.\n"
                    },
                    "minimumSeeders": {
                        "type": "integer",
                        "description": "Minimum seeders.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "IndexerTorrentRss name.\n"
                    },
                    "priority": {
                        "type": "integer",
                        "description": "Priority.\n"
                    },
                    "seedRatio": {
                        "type": "number",
                        "description": "Seed ratio.\n"
                    },
                    "seedTime": {
                        "type": "integer",
                        "description": "Seed time.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "List of associated tags.\n"
                    }
                },
                "type": "object"
            }
        },
        "readarr:Indexers/indexerTorrentleech:IndexerTorrentleech": {
            "description": "\u003c!-- subcategory:Indexers --\u003eIndexer Torrentleech resource.\nFor more information refer to [Indexer](https://wiki.servarr.com/readarr/settings#indexers) and [Torrentleech](https://wiki.servarr.com/readarr/supported#torrentleech).\n\n\n## Import\n\nimport using the API/UI ID\n\n```sh\n $ pulumi import readarr:Indexers/indexerTorrentleech:IndexerTorrentleech example 1\n```\n\n ",
            "properties": {
                "apiKey": {
                    "type": "string",
                    "description": "API key.\n",
                    "secret": true
                },
                "authorSeedTime": {
                    "type": "integer",
                    "description": "Author seed time.\n"
                },
                "baseUrl": {
                    "type": "string",
                    "description": "Base URL.\n"
                },
                "earlyReleaseLimit": {
                    "type": "integer",
                    "description": "Early release limit.\n"
                },
                "enableAutomaticSearch": {
                    "type": "boolean",
                    "description": "Enable automatic search flag.\n"
                },
                "enableInteractiveSearch": {
                    "type": "boolean",
                    "description": "Enable interactive search flag.\n"
                },
                "enableRss": {
                    "type": "boolean",
                    "description": "Enable RSS flag.\n"
                },
                "minimumSeeders": {
                    "type": "integer",
                    "description": "Minimum seeders.\n"
                },
                "name": {
                    "type": "string",
                    "description": "IndexerTorrentleech name.\n"
                },
                "priority": {
                    "type": "integer",
                    "description": "Priority.\n"
                },
                "seedRatio": {
                    "type": "number",
                    "description": "Seed ratio.\n"
                },
                "seedTime": {
                    "type": "integer",
                    "description": "Seed time.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                }
            },
            "required": [
                "apiKey",
                "authorSeedTime",
                "baseUrl",
                "earlyReleaseLimit",
                "enableAutomaticSearch",
                "enableInteractiveSearch",
                "enableRss",
                "minimumSeeders",
                "name",
                "priority",
                "seedRatio",
                "seedTime",
                "tags"
            ],
            "inputProperties": {
                "apiKey": {
                    "type": "string",
                    "description": "API key.\n",
                    "secret": true
                },
                "authorSeedTime": {
                    "type": "integer",
                    "description": "Author seed time.\n"
                },
                "baseUrl": {
                    "type": "string",
                    "description": "Base URL.\n"
                },
                "earlyReleaseLimit": {
                    "type": "integer",
                    "description": "Early release limit.\n"
                },
                "enableAutomaticSearch": {
                    "type": "boolean",
                    "description": "Enable automatic search flag.\n"
                },
                "enableInteractiveSearch": {
                    "type": "boolean",
                    "description": "Enable interactive search flag.\n"
                },
                "enableRss": {
                    "type": "boolean",
                    "description": "Enable RSS flag.\n"
                },
                "minimumSeeders": {
                    "type": "integer",
                    "description": "Minimum seeders.\n"
                },
                "name": {
                    "type": "string",
                    "description": "IndexerTorrentleech name.\n"
                },
                "priority": {
                    "type": "integer",
                    "description": "Priority.\n"
                },
                "seedRatio": {
                    "type": "number",
                    "description": "Seed ratio.\n"
                },
                "seedTime": {
                    "type": "integer",
                    "description": "Seed time.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                }
            },
            "requiredInputs": [
                "apiKey",
                "name"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering IndexerTorrentleech resources.\n",
                "properties": {
                    "apiKey": {
                        "type": "string",
                        "description": "API key.\n",
                        "secret": true
                    },
                    "authorSeedTime": {
                        "type": "integer",
                        "description": "Author seed time.\n"
                    },
                    "baseUrl": {
                        "type": "string",
                        "description": "Base URL.\n"
                    },
                    "earlyReleaseLimit": {
                        "type": "integer",
                        "description": "Early release limit.\n"
                    },
                    "enableAutomaticSearch": {
                        "type": "boolean",
                        "description": "Enable automatic search flag.\n"
                    },
                    "enableInteractiveSearch": {
                        "type": "boolean",
                        "description": "Enable interactive search flag.\n"
                    },
                    "enableRss": {
                        "type": "boolean",
                        "description": "Enable RSS flag.\n"
                    },
                    "minimumSeeders": {
                        "type": "integer",
                        "description": "Minimum seeders.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "IndexerTorrentleech name.\n"
                    },
                    "priority": {
                        "type": "integer",
                        "description": "Priority.\n"
                    },
                    "seedRatio": {
                        "type": "number",
                        "description": "Seed ratio.\n"
                    },
                    "seedTime": {
                        "type": "integer",
                        "description": "Seed time.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "List of associated tags.\n"
                    }
                },
                "type": "object"
            }
        },
        "readarr:Indexers/indexerTorznab:IndexerTorznab": {
            "description": "\u003c!-- subcategory:Indexers --\u003eIndexer Torznab resource.\nFor more information refer to [Indexer](https://wiki.servarr.com/readarr/settings#indexers) and [Torznab](https://wiki.servarr.com/readarr/supported#torznab).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.readarr.Indexers.IndexerTorznab;\nimport com.pulumi.readarr.Indexers.IndexerTorznabArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new IndexerTorznab(\"example\", IndexerTorznabArgs.builder()        \n            .apiPath(\"/nabapi\")\n            .baseUrl(\"https://feed.animetosho.org\")\n            .categories(            \n                2000,\n                2010)\n            .enableAutomaticSearch(true)\n            .minimumSeeders(1)\n            .name(\"Example\")\n            .removeYear(true)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: readarr:Indexers:IndexerTorznab\n    properties:\n      apiPath: /nabapi\n      baseUrl: https://feed.animetosho.org\n      categories:\n        - 2000\n        - 2010\n      enableAutomaticSearch: true\n      minimumSeeders: 1\n      name: Example\n      removeYear: true\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nimport using the API/UI ID\n\n```sh\n $ pulumi import readarr:Indexers/indexerTorznab:IndexerTorznab example 1\n```\n\n ",
            "properties": {
                "additionalParameters": {
                    "type": "string",
                    "description": "Additional parameters.\n"
                },
                "apiKey": {
                    "type": "string",
                    "description": "API key.\n",
                    "secret": true
                },
                "apiPath": {
                    "type": "string",
                    "description": "API path.\n"
                },
                "authorSeedTime": {
                    "type": "integer",
                    "description": "Author seed time.\n"
                },
                "baseUrl": {
                    "type": "string",
                    "description": "Base URL.\n"
                },
                "categories": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "Categories list.\n"
                },
                "earlyReleaseLimit": {
                    "type": "integer",
                    "description": "Early release limit.\n"
                },
                "enableAutomaticSearch": {
                    "type": "boolean",
                    "description": "Enable automatic search flag.\n"
                },
                "enableInteractiveSearch": {
                    "type": "boolean",
                    "description": "Enable interactive search flag.\n"
                },
                "enableRss": {
                    "type": "boolean",
                    "description": "Enable RSS flag.\n"
                },
                "minimumSeeders": {
                    "type": "integer",
                    "description": "Minimum seeders.\n"
                },
                "name": {
                    "type": "string",
                    "description": "IndexerTorznab name.\n"
                },
                "priority": {
                    "type": "integer",
                    "description": "Priority.\n"
                },
                "seedRatio": {
                    "type": "number",
                    "description": "Seed ratio.\n"
                },
                "seedTime": {
                    "type": "integer",
                    "description": "Seed time.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                }
            },
            "required": [
                "additionalParameters",
                "apiKey",
                "apiPath",
                "authorSeedTime",
                "baseUrl",
                "categories",
                "earlyReleaseLimit",
                "enableAutomaticSearch",
                "enableInteractiveSearch",
                "enableRss",
                "minimumSeeders",
                "name",
                "priority",
                "seedRatio",
                "seedTime",
                "tags"
            ],
            "inputProperties": {
                "additionalParameters": {
                    "type": "string",
                    "description": "Additional parameters.\n"
                },
                "apiKey": {
                    "type": "string",
                    "description": "API key.\n",
                    "secret": true
                },
                "apiPath": {
                    "type": "string",
                    "description": "API path.\n"
                },
                "authorSeedTime": {
                    "type": "integer",
                    "description": "Author seed time.\n"
                },
                "baseUrl": {
                    "type": "string",
                    "description": "Base URL.\n"
                },
                "categories": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "Categories list.\n"
                },
                "earlyReleaseLimit": {
                    "type": "integer",
                    "description": "Early release limit.\n"
                },
                "enableAutomaticSearch": {
                    "type": "boolean",
                    "description": "Enable automatic search flag.\n"
                },
                "enableInteractiveSearch": {
                    "type": "boolean",
                    "description": "Enable interactive search flag.\n"
                },
                "enableRss": {
                    "type": "boolean",
                    "description": "Enable RSS flag.\n"
                },
                "minimumSeeders": {
                    "type": "integer",
                    "description": "Minimum seeders.\n"
                },
                "name": {
                    "type": "string",
                    "description": "IndexerTorznab name.\n"
                },
                "priority": {
                    "type": "integer",
                    "description": "Priority.\n"
                },
                "seedRatio": {
                    "type": "number",
                    "description": "Seed ratio.\n"
                },
                "seedTime": {
                    "type": "integer",
                    "description": "Seed time.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                }
            },
            "requiredInputs": [
                "baseUrl",
                "name"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering IndexerTorznab resources.\n",
                "properties": {
                    "additionalParameters": {
                        "type": "string",
                        "description": "Additional parameters.\n"
                    },
                    "apiKey": {
                        "type": "string",
                        "description": "API key.\n",
                        "secret": true
                    },
                    "apiPath": {
                        "type": "string",
                        "description": "API path.\n"
                    },
                    "authorSeedTime": {
                        "type": "integer",
                        "description": "Author seed time.\n"
                    },
                    "baseUrl": {
                        "type": "string",
                        "description": "Base URL.\n"
                    },
                    "categories": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "Categories list.\n"
                    },
                    "earlyReleaseLimit": {
                        "type": "integer",
                        "description": "Early release limit.\n"
                    },
                    "enableAutomaticSearch": {
                        "type": "boolean",
                        "description": "Enable automatic search flag.\n"
                    },
                    "enableInteractiveSearch": {
                        "type": "boolean",
                        "description": "Enable interactive search flag.\n"
                    },
                    "enableRss": {
                        "type": "boolean",
                        "description": "Enable RSS flag.\n"
                    },
                    "minimumSeeders": {
                        "type": "integer",
                        "description": "Minimum seeders.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "IndexerTorznab name.\n"
                    },
                    "priority": {
                        "type": "integer",
                        "description": "Priority.\n"
                    },
                    "seedRatio": {
                        "type": "number",
                        "description": "Seed ratio.\n"
                    },
                    "seedTime": {
                        "type": "integer",
                        "description": "Seed time.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "List of associated tags.\n"
                    }
                },
                "type": "object"
            }
        },
        "readarr:MediaManagement/mediaManagement:MediaManagement": {
            "description": "\u003c!-- subcategory:Media Management --\u003eMedia Management resource.\nFor more information refer to [Naming](https://wiki.servarr.com/readarr/settings#file-management) documentation.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as readarr from \"@maienm/pulumi-readarr\";\n\nconst example = new readarr.mediamanagement.MediaManagement(\"example\", {\n    allowFingerprinting: \"never\",\n    chmodFolder: \"755\",\n    chownGroup: \"arrs\",\n    createEmptyAuthorFolders: true,\n    deleteEmptyFolders: true,\n    downloadPropersRepacks: \"preferAndUpgrade\",\n    extraFileExtensions: \"info\",\n    fileDate: \"bookReleaseDate\",\n    hardlinksCopy: true,\n    importExtraFiles: true,\n    minimumFreeSpace: 100,\n    recycleBinDays: 7,\n    recycleBinPath: \"/bin\",\n    rescanAfterRefresh: \"always\",\n    setPermissions: true,\n    skipFreeSpaceCheck: true,\n    unmonitorPreviousBooks: false,\n    watchIbraryForChanges: true,\n});\n```\n```python\nimport pulumi\nimport pulumi_readarr as readarr\n\nexample = readarr.media_management.MediaManagement(\"example\",\n    allow_fingerprinting=\"never\",\n    chmod_folder=\"755\",\n    chown_group=\"arrs\",\n    create_empty_author_folders=True,\n    delete_empty_folders=True,\n    download_propers_repacks=\"preferAndUpgrade\",\n    extra_file_extensions=\"info\",\n    file_date=\"bookReleaseDate\",\n    hardlinks_copy=True,\n    import_extra_files=True,\n    minimum_free_space=100,\n    recycle_bin_days=7,\n    recycle_bin_path=\"/bin\",\n    rescan_after_refresh=\"always\",\n    set_permissions=True,\n    skip_free_space_check=True,\n    unmonitor_previous_books=False,\n    watch_ibrary_for_changes=True)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Readarr = MaienM.Readarr;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Readarr.MediaManagement.MediaManagement(\"example\", new()\n    {\n        AllowFingerprinting = \"never\",\n        ChmodFolder = \"755\",\n        ChownGroup = \"arrs\",\n        CreateEmptyAuthorFolders = true,\n        DeleteEmptyFolders = true,\n        DownloadPropersRepacks = \"preferAndUpgrade\",\n        ExtraFileExtensions = \"info\",\n        FileDate = \"bookReleaseDate\",\n        HardlinksCopy = true,\n        ImportExtraFiles = true,\n        MinimumFreeSpace = 100,\n        RecycleBinDays = 7,\n        RecycleBinPath = \"/bin\",\n        RescanAfterRefresh = \"always\",\n        SetPermissions = true,\n        SkipFreeSpaceCheck = true,\n        UnmonitorPreviousBooks = false,\n        WatchIbraryForChanges = true,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/MaienM/pulumi-readarr/sdk/v2/go/readarr/MediaManagement\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := MediaManagement.NewMediaManagement(ctx, \"example\", \u0026MediaManagement.MediaManagementArgs{\n\t\t\tAllowFingerprinting:      pulumi.String(\"never\"),\n\t\t\tChmodFolder:              pulumi.String(\"755\"),\n\t\t\tChownGroup:               pulumi.String(\"arrs\"),\n\t\t\tCreateEmptyAuthorFolders: pulumi.Bool(true),\n\t\t\tDeleteEmptyFolders:       pulumi.Bool(true),\n\t\t\tDownloadPropersRepacks:   pulumi.String(\"preferAndUpgrade\"),\n\t\t\tExtraFileExtensions:      pulumi.String(\"info\"),\n\t\t\tFileDate:                 pulumi.String(\"bookReleaseDate\"),\n\t\t\tHardlinksCopy:            pulumi.Bool(true),\n\t\t\tImportExtraFiles:         pulumi.Bool(true),\n\t\t\tMinimumFreeSpace:         pulumi.Int(100),\n\t\t\tRecycleBinDays:           pulumi.Int(7),\n\t\t\tRecycleBinPath:           pulumi.String(\"/bin\"),\n\t\t\tRescanAfterRefresh:       pulumi.String(\"always\"),\n\t\t\tSetPermissions:           pulumi.Bool(true),\n\t\t\tSkipFreeSpaceCheck:       pulumi.Bool(true),\n\t\t\tUnmonitorPreviousBooks:   pulumi.Bool(false),\n\t\t\tWatchIbraryForChanges:    pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.readarr.MediaManagement.MediaManagement;\nimport com.pulumi.readarr.MediaManagement.MediaManagementArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new MediaManagement(\"example\", MediaManagementArgs.builder()        \n            .allowFingerprinting(\"never\")\n            .chmodFolder(\"755\")\n            .chownGroup(\"arrs\")\n            .createEmptyAuthorFolders(true)\n            .deleteEmptyFolders(true)\n            .downloadPropersRepacks(\"preferAndUpgrade\")\n            .extraFileExtensions(\"info\")\n            .fileDate(\"bookReleaseDate\")\n            .hardlinksCopy(true)\n            .importExtraFiles(true)\n            .minimumFreeSpace(100)\n            .recycleBinDays(7)\n            .recycleBinPath(\"/bin\")\n            .rescanAfterRefresh(\"always\")\n            .setPermissions(true)\n            .skipFreeSpaceCheck(true)\n            .unmonitorPreviousBooks(false)\n            .watchIbraryForChanges(true)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: readarr:MediaManagement:MediaManagement\n    properties:\n      allowFingerprinting: never\n      chmodFolder: '755'\n      chownGroup: arrs\n      createEmptyAuthorFolders: true\n      deleteEmptyFolders: true\n      downloadPropersRepacks: preferAndUpgrade\n      extraFileExtensions: info\n      fileDate: bookReleaseDate\n      hardlinksCopy: true\n      importExtraFiles: true\n      minimumFreeSpace: 100\n      recycleBinDays: 7\n      recycleBinPath: /bin\n      rescanAfterRefresh: always\n      setPermissions: true\n      skipFreeSpaceCheck: true\n      unmonitorPreviousBooks: false\n      watchIbraryForChanges: true\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nimport does not need parameters\n\n```sh\n $ pulumi import readarr:MediaManagement/mediaManagement:MediaManagement example\n```\n\n ",
            "properties": {
                "allowFingerprinting": {
                    "type": "string",
                    "description": "Allow fingerprinting. valid inputs are: 'newFiles', 'allFiles' and 'never'.\n"
                },
                "chmodFolder": {
                    "type": "string",
                    "description": "Permission in linux format.\n"
                },
                "chownGroup": {
                    "type": "string",
                    "description": "Group used for permission.\n"
                },
                "createEmptyAuthorFolders": {
                    "type": "boolean",
                    "description": "Create empty author directories.\n"
                },
                "deleteEmptyFolders": {
                    "type": "boolean",
                    "description": "Delete empty directories.\n"
                },
                "downloadPropersRepacks": {
                    "type": "string",
                    "description": "Download proper and repack policy. valid inputs are: 'preferAndUpgrade', 'doNotUpgrade', and 'doNotPrefer'.\n"
                },
                "extraFileExtensions": {
                    "type": "string",
                    "description": "Comma separated list of extra files to import (.nfo will be imported as .nfo-orig).\n"
                },
                "fileDate": {
                    "type": "string",
                    "description": "Define the file date modification. valid inputs are: 'none', and 'bookReleaseDate'.\n"
                },
                "hardlinksCopy": {
                    "type": "boolean",
                    "description": "Use hardlinks instead of copy.\n"
                },
                "importExtraFiles": {
                    "type": "boolean",
                    "description": "Import extra files. If enabled it will leverage 'extra*file*extensions'.\n"
                },
                "minimumFreeSpace": {
                    "type": "integer",
                    "description": "Minimum free space in MB to allow import.\n"
                },
                "recycleBinDays": {
                    "type": "integer",
                    "description": "Recyle bin days of retention.\n"
                },
                "recycleBinPath": {
                    "type": "string",
                    "description": "Recycle bin absolute path.\n"
                },
                "rescanAfterRefresh": {
                    "type": "string",
                    "description": "Rescan after refresh policy. valid inputs are: 'always', 'afterManual' and 'never'.\n"
                },
                "setPermissions": {
                    "type": "boolean",
                    "description": "Set permission for imported files.\n"
                },
                "skipFreeSpaceCheck": {
                    "type": "boolean",
                    "description": "Skip free space check before importing.\n"
                },
                "unmonitorPreviousBooks": {
                    "type": "boolean",
                    "description": "Unmonitor deleted files.\n"
                },
                "watchIbraryForChanges": {
                    "type": "boolean",
                    "description": "Watch library for changes.\n"
                }
            },
            "required": [
                "allowFingerprinting",
                "chmodFolder",
                "chownGroup",
                "createEmptyAuthorFolders",
                "deleteEmptyFolders",
                "downloadPropersRepacks",
                "extraFileExtensions",
                "fileDate",
                "hardlinksCopy",
                "importExtraFiles",
                "minimumFreeSpace",
                "recycleBinDays",
                "recycleBinPath",
                "rescanAfterRefresh",
                "setPermissions",
                "skipFreeSpaceCheck",
                "unmonitorPreviousBooks",
                "watchIbraryForChanges"
            ],
            "inputProperties": {
                "allowFingerprinting": {
                    "type": "string",
                    "description": "Allow fingerprinting. valid inputs are: 'newFiles', 'allFiles' and 'never'.\n"
                },
                "chmodFolder": {
                    "type": "string",
                    "description": "Permission in linux format.\n"
                },
                "chownGroup": {
                    "type": "string",
                    "description": "Group used for permission.\n"
                },
                "createEmptyAuthorFolders": {
                    "type": "boolean",
                    "description": "Create empty author directories.\n"
                },
                "deleteEmptyFolders": {
                    "type": "boolean",
                    "description": "Delete empty directories.\n"
                },
                "downloadPropersRepacks": {
                    "type": "string",
                    "description": "Download proper and repack policy. valid inputs are: 'preferAndUpgrade', 'doNotUpgrade', and 'doNotPrefer'.\n"
                },
                "extraFileExtensions": {
                    "type": "string",
                    "description": "Comma separated list of extra files to import (.nfo will be imported as .nfo-orig).\n"
                },
                "fileDate": {
                    "type": "string",
                    "description": "Define the file date modification. valid inputs are: 'none', and 'bookReleaseDate'.\n"
                },
                "hardlinksCopy": {
                    "type": "boolean",
                    "description": "Use hardlinks instead of copy.\n"
                },
                "importExtraFiles": {
                    "type": "boolean",
                    "description": "Import extra files. If enabled it will leverage 'extra*file*extensions'.\n"
                },
                "minimumFreeSpace": {
                    "type": "integer",
                    "description": "Minimum free space in MB to allow import.\n"
                },
                "recycleBinDays": {
                    "type": "integer",
                    "description": "Recyle bin days of retention.\n"
                },
                "recycleBinPath": {
                    "type": "string",
                    "description": "Recycle bin absolute path.\n"
                },
                "rescanAfterRefresh": {
                    "type": "string",
                    "description": "Rescan after refresh policy. valid inputs are: 'always', 'afterManual' and 'never'.\n"
                },
                "setPermissions": {
                    "type": "boolean",
                    "description": "Set permission for imported files.\n"
                },
                "skipFreeSpaceCheck": {
                    "type": "boolean",
                    "description": "Skip free space check before importing.\n"
                },
                "unmonitorPreviousBooks": {
                    "type": "boolean",
                    "description": "Unmonitor deleted files.\n"
                },
                "watchIbraryForChanges": {
                    "type": "boolean",
                    "description": "Watch library for changes.\n"
                }
            },
            "requiredInputs": [
                "allowFingerprinting",
                "chmodFolder",
                "chownGroup",
                "createEmptyAuthorFolders",
                "deleteEmptyFolders",
                "downloadPropersRepacks",
                "extraFileExtensions",
                "fileDate",
                "hardlinksCopy",
                "importExtraFiles",
                "minimumFreeSpace",
                "recycleBinDays",
                "recycleBinPath",
                "rescanAfterRefresh",
                "setPermissions",
                "skipFreeSpaceCheck",
                "unmonitorPreviousBooks",
                "watchIbraryForChanges"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering MediaManagement resources.\n",
                "properties": {
                    "allowFingerprinting": {
                        "type": "string",
                        "description": "Allow fingerprinting. valid inputs are: 'newFiles', 'allFiles' and 'never'.\n"
                    },
                    "chmodFolder": {
                        "type": "string",
                        "description": "Permission in linux format.\n"
                    },
                    "chownGroup": {
                        "type": "string",
                        "description": "Group used for permission.\n"
                    },
                    "createEmptyAuthorFolders": {
                        "type": "boolean",
                        "description": "Create empty author directories.\n"
                    },
                    "deleteEmptyFolders": {
                        "type": "boolean",
                        "description": "Delete empty directories.\n"
                    },
                    "downloadPropersRepacks": {
                        "type": "string",
                        "description": "Download proper and repack policy. valid inputs are: 'preferAndUpgrade', 'doNotUpgrade', and 'doNotPrefer'.\n"
                    },
                    "extraFileExtensions": {
                        "type": "string",
                        "description": "Comma separated list of extra files to import (.nfo will be imported as .nfo-orig).\n"
                    },
                    "fileDate": {
                        "type": "string",
                        "description": "Define the file date modification. valid inputs are: 'none', and 'bookReleaseDate'.\n"
                    },
                    "hardlinksCopy": {
                        "type": "boolean",
                        "description": "Use hardlinks instead of copy.\n"
                    },
                    "importExtraFiles": {
                        "type": "boolean",
                        "description": "Import extra files. If enabled it will leverage 'extra*file*extensions'.\n"
                    },
                    "minimumFreeSpace": {
                        "type": "integer",
                        "description": "Minimum free space in MB to allow import.\n"
                    },
                    "recycleBinDays": {
                        "type": "integer",
                        "description": "Recyle bin days of retention.\n"
                    },
                    "recycleBinPath": {
                        "type": "string",
                        "description": "Recycle bin absolute path.\n"
                    },
                    "rescanAfterRefresh": {
                        "type": "string",
                        "description": "Rescan after refresh policy. valid inputs are: 'always', 'afterManual' and 'never'.\n"
                    },
                    "setPermissions": {
                        "type": "boolean",
                        "description": "Set permission for imported files.\n"
                    },
                    "skipFreeSpaceCheck": {
                        "type": "boolean",
                        "description": "Skip free space check before importing.\n"
                    },
                    "unmonitorPreviousBooks": {
                        "type": "boolean",
                        "description": "Unmonitor deleted files.\n"
                    },
                    "watchIbraryForChanges": {
                        "type": "boolean",
                        "description": "Watch library for changes.\n"
                    }
                },
                "type": "object"
            }
        },
        "readarr:MediaManagement/naming:Naming": {
            "description": "\u003c!-- subcategory:Media Management --\u003eNaming resource.\nFor more information refer to [Naming](https://wiki.servarr.com/readarr/settings#community-naming-suggestions) documentation.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.readarr.MediaManagement.MediaManagement;\nimport com.pulumi.readarr.MediaManagement.MediaManagementArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new MediaManagement(\"example\", MediaManagementArgs.builder()        \n            .authorFolderFormat(\"{Author Name}\")\n            .renameBooks(true)\n            .replaceIllegalCharacters(true)\n            .standardBookFormat(\"{Book Title}/{Author Name} - {Book Title}{ (PartNumber)}\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: readarr:MediaManagement:MediaManagement\n    properties:\n      authorFolderFormat: '{Author Name}'\n      renameBooks: true\n      replaceIllegalCharacters: true\n      standardBookFormat: '{Book Title}/{Author Name} - {Book Title}{ (PartNumber)}'\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nimport does not need parameters\n\n```sh\n $ pulumi import readarr:MediaManagement/naming:Naming example\n```\n\n ",
            "properties": {
                "authorFolderFormat": {
                    "type": "string",
                    "description": "Author folder format.\n"
                },
                "renameBooks": {
                    "type": "boolean",
                    "description": "Readarr will use the existing file name if false.\n"
                },
                "replaceIllegalCharacters": {
                    "type": "boolean",
                    "description": "Replace illegal characters. They will be removed if false.\n"
                },
                "standardBookFormat": {
                    "type": "string",
                    "description": "Standard book formatss.\n"
                }
            },
            "required": [
                "authorFolderFormat",
                "renameBooks",
                "replaceIllegalCharacters",
                "standardBookFormat"
            ],
            "inputProperties": {
                "authorFolderFormat": {
                    "type": "string",
                    "description": "Author folder format.\n"
                },
                "renameBooks": {
                    "type": "boolean",
                    "description": "Readarr will use the existing file name if false.\n"
                },
                "replaceIllegalCharacters": {
                    "type": "boolean",
                    "description": "Replace illegal characters. They will be removed if false.\n"
                },
                "standardBookFormat": {
                    "type": "string",
                    "description": "Standard book formatss.\n"
                }
            },
            "requiredInputs": [
                "authorFolderFormat",
                "renameBooks",
                "replaceIllegalCharacters",
                "standardBookFormat"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Naming resources.\n",
                "properties": {
                    "authorFolderFormat": {
                        "type": "string",
                        "description": "Author folder format.\n"
                    },
                    "renameBooks": {
                        "type": "boolean",
                        "description": "Readarr will use the existing file name if false.\n"
                    },
                    "replaceIllegalCharacters": {
                        "type": "boolean",
                        "description": "Replace illegal characters. They will be removed if false.\n"
                    },
                    "standardBookFormat": {
                        "type": "string",
                        "description": "Standard book formatss.\n"
                    }
                },
                "type": "object"
            }
        },
        "readarr:MediaManagement/rootFolder:RootFolder": {
            "description": "\u003c!-- subcategory:Media Management --\u003eRoot Folder resource.\nFor more information refer to [Root Folders](https://wiki.servarr.com/readarr/settings#root-folders) documentation.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as readarr from \"@maienm/pulumi-readarr\";\n\nconst example = new readarr.mediamanagement.RootFolder(\"example\", {\n    defaultMetadataProfileId: 1,\n    defaultMonitorOption: \"all\",\n    defaultQualityProfileId: 1,\n    isCalibreLibrary: false,\n    name: \"Example\",\n    outputProfile: \"default\",\n    path: \"/example\",\n});\n// with calibre\nconst calibreExample = new readarr.mediamanagement.RootFolder(\"calibreExample\", {\n    defaultMetadataProfileId: 1,\n    defaultMonitorOption: \"all\",\n    defaultQualityProfileId: 1,\n    host: \"calibre-host\",\n    isCalibreLibrary: true,\n    library: \"Calibre_Library\",\n    name: \"Calibre\",\n    outputProfile: \"default\",\n    password: \"Pass\",\n    path: \"/calibre\",\n    port: 8081,\n    useSsl: false,\n    username: \"User\",\n});\n```\n```python\nimport pulumi\nimport pulumi_readarr as readarr\n\nexample = readarr.media_management.RootFolder(\"example\",\n    default_metadata_profile_id=1,\n    default_monitor_option=\"all\",\n    default_quality_profile_id=1,\n    is_calibre_library=False,\n    name=\"Example\",\n    output_profile=\"default\",\n    path=\"/example\")\n# with calibre\ncalibre_example = readarr.media_management.RootFolder(\"calibreExample\",\n    default_metadata_profile_id=1,\n    default_monitor_option=\"all\",\n    default_quality_profile_id=1,\n    host=\"calibre-host\",\n    is_calibre_library=True,\n    library=\"Calibre_Library\",\n    name=\"Calibre\",\n    output_profile=\"default\",\n    password=\"Pass\",\n    path=\"/calibre\",\n    port=8081,\n    use_ssl=False,\n    username=\"User\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Readarr = MaienM.Readarr;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Readarr.MediaManagement.RootFolder(\"example\", new()\n    {\n        DefaultMetadataProfileId = 1,\n        DefaultMonitorOption = \"all\",\n        DefaultQualityProfileId = 1,\n        IsCalibreLibrary = false,\n        Name = \"Example\",\n        OutputProfile = \"default\",\n        Path = \"/example\",\n    });\n\n    // with calibre\n    var calibreExample = new Readarr.MediaManagement.RootFolder(\"calibreExample\", new()\n    {\n        DefaultMetadataProfileId = 1,\n        DefaultMonitorOption = \"all\",\n        DefaultQualityProfileId = 1,\n        Host = \"calibre-host\",\n        IsCalibreLibrary = true,\n        Library = \"Calibre_Library\",\n        Name = \"Calibre\",\n        OutputProfile = \"default\",\n        Password = \"Pass\",\n        Path = \"/calibre\",\n        Port = 8081,\n        UseSsl = false,\n        Username = \"User\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/MaienM/pulumi-readarr/sdk/v2/go/readarr/MediaManagement\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := MediaManagement.NewRootFolder(ctx, \"example\", \u0026MediaManagement.RootFolderArgs{\n\t\t\tDefaultMetadataProfileId: pulumi.Int(1),\n\t\t\tDefaultMonitorOption:     pulumi.String(\"all\"),\n\t\t\tDefaultQualityProfileId:  pulumi.Int(1),\n\t\t\tIsCalibreLibrary:         pulumi.Bool(false),\n\t\t\tName:                     pulumi.String(\"Example\"),\n\t\t\tOutputProfile:            pulumi.String(\"default\"),\n\t\t\tPath:                     pulumi.String(\"/example\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = MediaManagement.NewRootFolder(ctx, \"calibreExample\", \u0026MediaManagement.RootFolderArgs{\n\t\t\tDefaultMetadataProfileId: pulumi.Int(1),\n\t\t\tDefaultMonitorOption:     pulumi.String(\"all\"),\n\t\t\tDefaultQualityProfileId:  pulumi.Int(1),\n\t\t\tHost:                     pulumi.String(\"calibre-host\"),\n\t\t\tIsCalibreLibrary:         pulumi.Bool(true),\n\t\t\tLibrary:                  pulumi.String(\"Calibre_Library\"),\n\t\t\tName:                     pulumi.String(\"Calibre\"),\n\t\t\tOutputProfile:            pulumi.String(\"default\"),\n\t\t\tPassword:                 pulumi.String(\"Pass\"),\n\t\t\tPath:                     pulumi.String(\"/calibre\"),\n\t\t\tPort:                     pulumi.Int(8081),\n\t\t\tUseSsl:                   pulumi.Bool(false),\n\t\t\tUsername:                 pulumi.String(\"User\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.readarr.MediaManagement.RootFolder;\nimport com.pulumi.readarr.MediaManagement.RootFolderArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new RootFolder(\"example\", RootFolderArgs.builder()        \n            .defaultMetadataProfileId(1)\n            .defaultMonitorOption(\"all\")\n            .defaultQualityProfileId(1)\n            .isCalibreLibrary(false)\n            .name(\"Example\")\n            .outputProfile(\"default\")\n            .path(\"/example\")\n            .build());\n\n        var calibreExample = new RootFolder(\"calibreExample\", RootFolderArgs.builder()        \n            .defaultMetadataProfileId(1)\n            .defaultMonitorOption(\"all\")\n            .defaultQualityProfileId(1)\n            .host(\"calibre-host\")\n            .isCalibreLibrary(true)\n            .library(\"Calibre_Library\")\n            .name(\"Calibre\")\n            .outputProfile(\"default\")\n            .password(\"Pass\")\n            .path(\"/calibre\")\n            .port(8081)\n            .useSsl(false)\n            .username(\"User\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: readarr:MediaManagement:RootFolder\n    properties:\n      defaultMetadataProfileId: 1\n      defaultMonitorOption: all\n      defaultQualityProfileId: 1\n      isCalibreLibrary: false\n      name: Example\n      # keep \"default\" if not used\n      outputProfile: default\n      path: /example\n  # with calibre\n  calibreExample:\n    type: readarr:MediaManagement:RootFolder\n    properties:\n      defaultMetadataProfileId: 1\n      defaultMonitorOption: all\n      defaultQualityProfileId: 1\n      host: calibre-host\n      isCalibreLibrary: true\n      library: Calibre_Library\n      name: Calibre\n      outputProfile: default\n      password: Pass\n      path: /calibre\n      port: 8081\n      # calibre server values\n      useSsl: false\n      username: User\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nimport using the API/UI ID\n\n```sh\n $ pulumi import readarr:MediaManagement/rootFolder:RootFolder example 10\n```\n\n ",
            "properties": {
                "accessible": {
                    "type": "boolean",
                    "description": "Access flag.\n"
                },
                "defaultMetadataProfileId": {
                    "type": "integer",
                    "description": "Default metadata profile ID.\n"
                },
                "defaultMonitorOption": {
                    "type": "string",
                    "description": "Default monitor option.\n"
                },
                "defaultQualityProfileId": {
                    "type": "integer",
                    "description": "Default metadata profile ID.\n"
                },
                "defaultTags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                },
                "host": {
                    "type": "string",
                    "description": "Calibre host.\n"
                },
                "isCalibreLibrary": {
                    "type": "boolean",
                    "description": "Is calibre library flag.\n"
                },
                "library": {
                    "type": "string",
                    "description": "Calibre library.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Root Folder name.\n"
                },
                "outputProfile": {
                    "type": "string",
                    "description": "Calibre output profile.\n"
                },
                "password": {
                    "type": "string",
                    "description": "Calibre password.\n",
                    "secret": true
                },
                "path": {
                    "type": "string",
                    "description": "Root Folder absolute path.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "Calibre Port.\n"
                },
                "useSsl": {
                    "type": "boolean",
                    "description": "Use SSL for calibre connection.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Calibre username.\n"
                }
            },
            "required": [
                "accessible",
                "defaultMetadataProfileId",
                "defaultMonitorOption",
                "defaultQualityProfileId",
                "defaultTags",
                "host",
                "isCalibreLibrary",
                "library",
                "name",
                "outputProfile",
                "password",
                "path",
                "port",
                "useSsl",
                "username"
            ],
            "inputProperties": {
                "defaultMetadataProfileId": {
                    "type": "integer",
                    "description": "Default metadata profile ID.\n"
                },
                "defaultMonitorOption": {
                    "type": "string",
                    "description": "Default monitor option.\n"
                },
                "defaultQualityProfileId": {
                    "type": "integer",
                    "description": "Default metadata profile ID.\n"
                },
                "defaultTags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                },
                "host": {
                    "type": "string",
                    "description": "Calibre host.\n"
                },
                "isCalibreLibrary": {
                    "type": "boolean",
                    "description": "Is calibre library flag.\n"
                },
                "library": {
                    "type": "string",
                    "description": "Calibre library.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Root Folder name.\n"
                },
                "outputProfile": {
                    "type": "string",
                    "description": "Calibre output profile.\n"
                },
                "password": {
                    "type": "string",
                    "description": "Calibre password.\n",
                    "secret": true
                },
                "path": {
                    "type": "string",
                    "description": "Root Folder absolute path.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "Calibre Port.\n"
                },
                "useSsl": {
                    "type": "boolean",
                    "description": "Use SSL for calibre connection.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Calibre username.\n"
                }
            },
            "requiredInputs": [
                "defaultMetadataProfileId",
                "defaultMonitorOption",
                "defaultQualityProfileId",
                "isCalibreLibrary",
                "name",
                "path"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering RootFolder resources.\n",
                "properties": {
                    "accessible": {
                        "type": "boolean",
                        "description": "Access flag.\n"
                    },
                    "defaultMetadataProfileId": {
                        "type": "integer",
                        "description": "Default metadata profile ID.\n"
                    },
                    "defaultMonitorOption": {
                        "type": "string",
                        "description": "Default monitor option.\n"
                    },
                    "defaultQualityProfileId": {
                        "type": "integer",
                        "description": "Default metadata profile ID.\n"
                    },
                    "defaultTags": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "List of associated tags.\n"
                    },
                    "host": {
                        "type": "string",
                        "description": "Calibre host.\n"
                    },
                    "isCalibreLibrary": {
                        "type": "boolean",
                        "description": "Is calibre library flag.\n"
                    },
                    "library": {
                        "type": "string",
                        "description": "Calibre library.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Root Folder name.\n"
                    },
                    "outputProfile": {
                        "type": "string",
                        "description": "Calibre output profile.\n"
                    },
                    "password": {
                        "type": "string",
                        "description": "Calibre password.\n",
                        "secret": true
                    },
                    "path": {
                        "type": "string",
                        "description": "Root Folder absolute path.\n"
                    },
                    "port": {
                        "type": "integer",
                        "description": "Calibre Port.\n"
                    },
                    "useSsl": {
                        "type": "boolean",
                        "description": "Use SSL for calibre connection.\n"
                    },
                    "username": {
                        "type": "string",
                        "description": "Calibre username.\n"
                    }
                },
                "type": "object"
            }
        },
        "readarr:Metadata/metadataConfig:MetadataConfig": {
            "description": "\u003c!-- subcategory:Metadata --\u003eMetadata Config resource.\nFor more information refer to [Metadata](https://wiki.servarr.com/readarr/settings#options) documentation.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as readarr from \"@maienm/pulumi-readarr\";\n\nconst example = new readarr.metadata.MetadataConfig(\"example\", {\n    embedMetadata: true,\n    scrubAudioTags: false,\n    updateCovers: true,\n    writeAudioTags: \"no\",\n    writeBookTags: \"newFiles\",\n});\n```\n```python\nimport pulumi\nimport pulumi_readarr as readarr\n\nexample = readarr.metadata.MetadataConfig(\"example\",\n    embed_metadata=True,\n    scrub_audio_tags=False,\n    update_covers=True,\n    write_audio_tags=\"no\",\n    write_book_tags=\"newFiles\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Readarr = MaienM.Readarr;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Readarr.Metadata.MetadataConfig(\"example\", new()\n    {\n        EmbedMetadata = true,\n        ScrubAudioTags = false,\n        UpdateCovers = true,\n        WriteAudioTags = \"no\",\n        WriteBookTags = \"newFiles\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/MaienM/pulumi-readarr/sdk/v2/go/readarr/Metadata\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := Metadata.NewMetadataConfig(ctx, \"example\", \u0026Metadata.MetadataConfigArgs{\n\t\t\tEmbedMetadata:  pulumi.Bool(true),\n\t\t\tScrubAudioTags: pulumi.Bool(false),\n\t\t\tUpdateCovers:   pulumi.Bool(true),\n\t\t\tWriteAudioTags: pulumi.String(\"no\"),\n\t\t\tWriteBookTags:  pulumi.String(\"newFiles\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.readarr.Metadata.MetadataConfig;\nimport com.pulumi.readarr.Metadata.MetadataConfigArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new MetadataConfig(\"example\", MetadataConfigArgs.builder()        \n            .embedMetadata(true)\n            .scrubAudioTags(false)\n            .updateCovers(true)\n            .writeAudioTags(\"no\")\n            .writeBookTags(\"newFiles\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: readarr:Metadata:MetadataConfig\n    properties:\n      embedMetadata: true\n      scrubAudioTags: false\n      updateCovers: true\n      writeAudioTags: no\n      writeBookTags: newFiles\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nimport does not need parameters\n\n```sh\n $ pulumi import readarr:Metadata/metadataConfig:MetadataConfig example\n```\n\n ",
            "properties": {
                "embedMetadata": {
                    "type": "boolean",
                    "description": "Embed metadata in book files.\n"
                },
                "scrubAudioTags": {
                    "type": "boolean",
                    "description": "Scrub audio tags.\n"
                },
                "updateCovers": {
                    "type": "boolean",
                    "description": "Update covers.\n"
                },
                "writeAudioTags": {
                    "type": "string",
                    "description": "Write audio tags.\n"
                },
                "writeBookTags": {
                    "type": "string",
                    "description": "Write book tags.\n"
                }
            },
            "required": [
                "embedMetadata",
                "scrubAudioTags",
                "updateCovers",
                "writeAudioTags",
                "writeBookTags"
            ],
            "inputProperties": {
                "embedMetadata": {
                    "type": "boolean",
                    "description": "Embed metadata in book files.\n"
                },
                "scrubAudioTags": {
                    "type": "boolean",
                    "description": "Scrub audio tags.\n"
                },
                "updateCovers": {
                    "type": "boolean",
                    "description": "Update covers.\n"
                },
                "writeAudioTags": {
                    "type": "string",
                    "description": "Write audio tags.\n"
                },
                "writeBookTags": {
                    "type": "string",
                    "description": "Write book tags.\n"
                }
            },
            "requiredInputs": [
                "embedMetadata",
                "scrubAudioTags",
                "updateCovers",
                "writeAudioTags",
                "writeBookTags"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering MetadataConfig resources.\n",
                "properties": {
                    "embedMetadata": {
                        "type": "boolean",
                        "description": "Embed metadata in book files.\n"
                    },
                    "scrubAudioTags": {
                        "type": "boolean",
                        "description": "Scrub audio tags.\n"
                    },
                    "updateCovers": {
                        "type": "boolean",
                        "description": "Update covers.\n"
                    },
                    "writeAudioTags": {
                        "type": "string",
                        "description": "Write audio tags.\n"
                    },
                    "writeBookTags": {
                        "type": "string",
                        "description": "Write book tags.\n"
                    }
                },
                "type": "object"
            }
        },
        "readarr:Notifications/notification:Notification": {
            "description": "\u003c!-- subcategory:Notifications --\u003eNotification resource.\nFor more information refer to [Notification](https://wiki.servarr.com/readarr/settings#connect).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as readarr from \"@maienm/pulumi-readarr\";\n\nconst example = new readarr.notifications.Notification(\"example\", {\n    configContract: \"CustomScriptSettings\",\n    implementation: \"CustomScript\",\n    includeHealthWarnings: false,\n    name: \"Example\",\n    onAuthorDelete: false,\n    onBookDelete: false,\n    onBookFileDelete: false,\n    onBookFileDeleteForUpgrade: true,\n    onBookRetag: false,\n    onDownloadFailure: true,\n    onGrab: false,\n    onHealthIssue: false,\n    onImportFailure: false,\n    onReleaseImport: false,\n    onRename: false,\n    onUpgrade: false,\n    path: \"/scripts/readarr.sh\",\n});\n```\n```python\nimport pulumi\nimport pulumi_readarr as readarr\n\nexample = readarr.notifications.Notification(\"example\",\n    config_contract=\"CustomScriptSettings\",\n    implementation=\"CustomScript\",\n    include_health_warnings=False,\n    name=\"Example\",\n    on_author_delete=False,\n    on_book_delete=False,\n    on_book_file_delete=False,\n    on_book_file_delete_for_upgrade=True,\n    on_book_retag=False,\n    on_download_failure=True,\n    on_grab=False,\n    on_health_issue=False,\n    on_import_failure=False,\n    on_release_import=False,\n    on_rename=False,\n    on_upgrade=False,\n    path=\"/scripts/readarr.sh\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Readarr = MaienM.Readarr;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Readarr.Notifications.Notification(\"example\", new()\n    {\n        ConfigContract = \"CustomScriptSettings\",\n        Implementation = \"CustomScript\",\n        IncludeHealthWarnings = false,\n        Name = \"Example\",\n        OnAuthorDelete = false,\n        OnBookDelete = false,\n        OnBookFileDelete = false,\n        OnBookFileDeleteForUpgrade = true,\n        OnBookRetag = false,\n        OnDownloadFailure = true,\n        OnGrab = false,\n        OnHealthIssue = false,\n        OnImportFailure = false,\n        OnReleaseImport = false,\n        OnRename = false,\n        OnUpgrade = false,\n        Path = \"/scripts/readarr.sh\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/MaienM/pulumi-readarr/sdk/v2/go/readarr/Notifications\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := Notifications.NewNotification(ctx, \"example\", \u0026Notifications.NotificationArgs{\n\t\t\tConfigContract:             pulumi.String(\"CustomScriptSettings\"),\n\t\t\tImplementation:             pulumi.String(\"CustomScript\"),\n\t\t\tIncludeHealthWarnings:      pulumi.Bool(false),\n\t\t\tName:                       pulumi.String(\"Example\"),\n\t\t\tOnAuthorDelete:             pulumi.Bool(false),\n\t\t\tOnBookDelete:               pulumi.Bool(false),\n\t\t\tOnBookFileDelete:           pulumi.Bool(false),\n\t\t\tOnBookFileDeleteForUpgrade: pulumi.Bool(true),\n\t\t\tOnBookRetag:                pulumi.Bool(false),\n\t\t\tOnDownloadFailure:          pulumi.Bool(true),\n\t\t\tOnGrab:                     pulumi.Bool(false),\n\t\t\tOnHealthIssue:              pulumi.Bool(false),\n\t\t\tOnImportFailure:            pulumi.Bool(false),\n\t\t\tOnReleaseImport:            pulumi.Bool(false),\n\t\t\tOnRename:                   pulumi.Bool(false),\n\t\t\tOnUpgrade:                  pulumi.Bool(false),\n\t\t\tPath:                       pulumi.String(\"/scripts/readarr.sh\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.readarr.Notifications.Notification;\nimport com.pulumi.readarr.Notifications.NotificationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new Notification(\"example\", NotificationArgs.builder()        \n            .configContract(\"CustomScriptSettings\")\n            .implementation(\"CustomScript\")\n            .includeHealthWarnings(false)\n            .name(\"Example\")\n            .onAuthorDelete(false)\n            .onBookDelete(false)\n            .onBookFileDelete(false)\n            .onBookFileDeleteForUpgrade(true)\n            .onBookRetag(false)\n            .onDownloadFailure(true)\n            .onGrab(false)\n            .onHealthIssue(false)\n            .onImportFailure(false)\n            .onReleaseImport(false)\n            .onRename(false)\n            .onUpgrade(false)\n            .path(\"/scripts/readarr.sh\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: readarr:Notifications:Notification\n    properties:\n      configContract: CustomScriptSettings\n      implementation: CustomScript\n      includeHealthWarnings: false\n      name: Example\n      onAuthorDelete: false\n      onBookDelete: false\n      onBookFileDelete: false\n      onBookFileDeleteForUpgrade: true\n      onBookRetag: false\n      onDownloadFailure: true\n      onGrab: false\n      onHealthIssue: false\n      onImportFailure: false\n      onReleaseImport: false\n      onRename: false\n      onUpgrade: false\n      path: /scripts/readarr.sh\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nimport using the API/UI ID\n\n```sh\n $ pulumi import readarr:Notifications/notification:Notification example 1\n```\n\n ",
            "properties": {
                "accessToken": {
                    "type": "string",
                    "description": "Access token.\n"
                },
                "accessTokenSecret": {
                    "type": "string",
                    "description": "Access token secret.\n"
                },
                "addIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Add IDs.\n"
                },
                "apiKey": {
                    "type": "string",
                    "description": "API key.\n"
                },
                "appToken": {
                    "type": "string",
                    "description": "App token.\n"
                },
                "arguments": {
                    "type": "string",
                    "description": "Arguments.\n"
                },
                "attachFiles": {
                    "type": "boolean",
                    "description": "Attach files flag.\n"
                },
                "authUser": {
                    "type": "string",
                    "description": "Auth user.\n"
                },
                "author": {
                    "type": "string",
                    "description": "Author.\n"
                },
                "avatar": {
                    "type": "string",
                    "description": "Avatar.\n"
                },
                "bccs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Bcc.\n"
                },
                "botToken": {
                    "type": "string",
                    "description": "Bot token.\n"
                },
                "ccs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Cc.\n"
                },
                "channel": {
                    "type": "string",
                    "description": "Channel.\n"
                },
                "channelTags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Channel tags.\n"
                },
                "chatId": {
                    "type": "string",
                    "description": "Chat ID.\n"
                },
                "clickUrl": {
                    "type": "string",
                    "description": "Click URL.\n"
                },
                "condition": {
                    "type": "integer",
                    "description": "Condition. `10` BrandNew, `20` LikeNew, `30` VeryGood, `40` Good, `50` Acceptable, `60` Poor.\n"
                },
                "configContract": {
                    "type": "string",
                    "description": "Notification configuration template.\n"
                },
                "consumerKey": {
                    "type": "string",
                    "description": "Consumer key.\n"
                },
                "consumerSecret": {
                    "type": "string",
                    "description": "Consumer secret.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Condition description.\n"
                },
                "deviceIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Device IDs.\n"
                },
                "deviceNames": {
                    "type": "string",
                    "description": "Device names.\n"
                },
                "devices": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Devices.\n"
                },
                "directMessage": {
                    "type": "boolean",
                    "description": "Direct message flag.\n"
                },
                "event": {
                    "type": "string",
                    "description": "Event.\n"
                },
                "expire": {
                    "type": "integer",
                    "description": "Expire.\n"
                },
                "fieldTags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Devices.\n"
                },
                "from": {
                    "type": "string",
                    "description": "From.\n"
                },
                "grabFields": {
                    "type": "integer",
                    "description": "Grab fields. `0` Overview, `1` Rating, `2` Genres, `3` Quality, `4` Group, `5` Size, `6` Links, `7` Release, `8` Poster, `9` Fanart, `10` CustomFormats, `11` CustomFormatScore.\n"
                },
                "host": {
                    "type": "string",
                    "description": "Host.\n"
                },
                "icon": {
                    "type": "string",
                    "description": "Icon.\n"
                },
                "implementation": {
                    "type": "string",
                    "description": "Notification implementation name.\n"
                },
                "importFields": {
                    "type": "integer",
                    "description": "Import fields. `0` Overview, `1` Rating, `2` Genres, `3` Quality, `4` Codecs, `5` Group, `6` Size, `7` Languages, `8` Subtitles, `9` Links, `10` Release, `11` Poster, `12` Fanart.\n"
                },
                "includeHealthWarnings": {
                    "type": "boolean",
                    "description": "Include health warnings.\n"
                },
                "instanceName": {
                    "type": "string",
                    "description": "Instance name.\n"
                },
                "key": {
                    "type": "string",
                    "description": "Key.\n"
                },
                "location": {
                    "type": "string",
                    "description": "Purchase location.\n"
                },
                "mapFrom": {
                    "type": "string",
                    "description": "Map From.\n"
                },
                "mapTo": {
                    "type": "string",
                    "description": "Map To.\n"
                },
                "mention": {
                    "type": "string",
                    "description": "Mention.\n"
                },
                "method": {
                    "type": "integer",
                    "description": "Method. `1` POST, `2` PUT.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Notification name.\n"
                },
                "notify": {
                    "type": "boolean",
                    "description": "Notify flag.\n"
                },
                "onApplicationUpdate": {
                    "type": "boolean",
                    "description": "On application update flag.\n"
                },
                "onAuthorDelete": {
                    "type": "boolean",
                    "description": "On author deleted flag.\n"
                },
                "onBookDelete": {
                    "type": "boolean",
                    "description": "On book delete flag.\n"
                },
                "onBookFileDelete": {
                    "type": "boolean",
                    "description": "On book file delete flag.\n"
                },
                "onBookFileDeleteForUpgrade": {
                    "type": "boolean",
                    "description": "On book file delete for upgrade flag.\n"
                },
                "onBookRetag": {
                    "type": "boolean",
                    "description": "On book retag flag.\n"
                },
                "onDownloadFailure": {
                    "type": "boolean",
                    "description": "On download failure flag.\n"
                },
                "onGrab": {
                    "type": "boolean",
                    "description": "On grab flag.\n"
                },
                "onHealthIssue": {
                    "type": "boolean",
                    "description": "On health issue flag.\n"
                },
                "onImportFailure": {
                    "type": "boolean",
                    "description": "On import failure flag.\n"
                },
                "onReleaseImport": {
                    "type": "boolean",
                    "description": "On release import flag.\n"
                },
                "onRename": {
                    "type": "boolean",
                    "description": "On rename flag.\n"
                },
                "onUpgrade": {
                    "type": "boolean",
                    "description": "On upgrade flag.\n"
                },
                "password": {
                    "type": "string",
                    "description": "password.\n"
                },
                "path": {
                    "type": "string",
                    "description": "Path.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "Port.\n"
                },
                "priority": {
                    "type": "integer",
                    "description": "Priority.\n"
                },
                "recipients": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Recipients.\n"
                },
                "refreshToken": {
                    "type": "string",
                    "description": "Refresh token.\n"
                },
                "removeIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Remove IDs.\n"
                },
                "requestTokenSecret": {
                    "type": "string",
                    "description": "Request token secret.\n",
                    "secret": true
                },
                "requireEncryption": {
                    "type": "boolean",
                    "description": "Require encryption flag.\n"
                },
                "retry": {
                    "type": "integer",
                    "description": "Retry.\n"
                },
                "sendSilently": {
                    "type": "boolean",
                    "description": "Add silently flag.\n"
                },
                "senderDomain": {
                    "type": "string",
                    "description": "Sender domain.\n"
                },
                "senderId": {
                    "type": "string",
                    "description": "Sender ID.\n"
                },
                "server": {
                    "type": "string",
                    "description": "server.\n"
                },
                "serverUrl": {
                    "type": "string",
                    "description": "Server url.\n"
                },
                "signIn": {
                    "type": "string",
                    "description": "Sign in.\n"
                },
                "sound": {
                    "type": "string",
                    "description": "Sound.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                },
                "token": {
                    "type": "string",
                    "description": "Token.\n",
                    "secret": true
                },
                "topics": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Devices.\n"
                },
                "tos": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "To.\n"
                },
                "updateLibrary": {
                    "type": "boolean",
                    "description": "Update library flag.\n"
                },
                "url": {
                    "type": "string",
                    "description": "URL.\n"
                },
                "urlBase": {
                    "type": "string",
                    "description": "URL base.\n"
                },
                "useEuEndpoint": {
                    "type": "boolean",
                    "description": "Use EU endpoint flag.\n"
                },
                "useSsl": {
                    "type": "boolean",
                    "description": "Use SSL flag.\n"
                },
                "userId": {
                    "type": "string",
                    "description": "User ID.\n"
                },
                "userKey": {
                    "type": "string",
                    "description": "User key.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username.\n"
                },
                "webHookUrl": {
                    "type": "string",
                    "description": "Web hook url.\n"
                }
            },
            "required": [
                "accessToken",
                "accessTokenSecret",
                "addIds",
                "apiKey",
                "appToken",
                "arguments",
                "attachFiles",
                "authUser",
                "author",
                "avatar",
                "bccs",
                "botToken",
                "ccs",
                "channel",
                "channelTags",
                "chatId",
                "clickUrl",
                "condition",
                "configContract",
                "consumerKey",
                "consumerSecret",
                "description",
                "deviceIds",
                "deviceNames",
                "devices",
                "directMessage",
                "event",
                "expire",
                "fieldTags",
                "from",
                "grabFields",
                "host",
                "icon",
                "implementation",
                "importFields",
                "includeHealthWarnings",
                "instanceName",
                "key",
                "location",
                "mapFrom",
                "mapTo",
                "mention",
                "method",
                "name",
                "notify",
                "onApplicationUpdate",
                "onAuthorDelete",
                "onBookDelete",
                "onBookFileDelete",
                "onBookFileDeleteForUpgrade",
                "onBookRetag",
                "onDownloadFailure",
                "onGrab",
                "onHealthIssue",
                "onImportFailure",
                "onReleaseImport",
                "onRename",
                "onUpgrade",
                "password",
                "path",
                "port",
                "priority",
                "recipients",
                "refreshToken",
                "removeIds",
                "requestTokenSecret",
                "requireEncryption",
                "retry",
                "sendSilently",
                "senderDomain",
                "senderId",
                "server",
                "serverUrl",
                "signIn",
                "sound",
                "tags",
                "tos",
                "token",
                "topics",
                "updateLibrary",
                "url",
                "urlBase",
                "useEuEndpoint",
                "useSsl",
                "userId",
                "userKey",
                "username",
                "webHookUrl"
            ],
            "inputProperties": {
                "accessToken": {
                    "type": "string",
                    "description": "Access token.\n"
                },
                "accessTokenSecret": {
                    "type": "string",
                    "description": "Access token secret.\n"
                },
                "addIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Add IDs.\n"
                },
                "apiKey": {
                    "type": "string",
                    "description": "API key.\n"
                },
                "appToken": {
                    "type": "string",
                    "description": "App token.\n"
                },
                "arguments": {
                    "type": "string",
                    "description": "Arguments.\n"
                },
                "attachFiles": {
                    "type": "boolean",
                    "description": "Attach files flag.\n"
                },
                "authUser": {
                    "type": "string",
                    "description": "Auth user.\n"
                },
                "author": {
                    "type": "string",
                    "description": "Author.\n"
                },
                "avatar": {
                    "type": "string",
                    "description": "Avatar.\n"
                },
                "bccs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Bcc.\n"
                },
                "botToken": {
                    "type": "string",
                    "description": "Bot token.\n"
                },
                "ccs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Cc.\n"
                },
                "channel": {
                    "type": "string",
                    "description": "Channel.\n"
                },
                "channelTags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Channel tags.\n"
                },
                "chatId": {
                    "type": "string",
                    "description": "Chat ID.\n"
                },
                "clickUrl": {
                    "type": "string",
                    "description": "Click URL.\n"
                },
                "condition": {
                    "type": "integer",
                    "description": "Condition. `10` BrandNew, `20` LikeNew, `30` VeryGood, `40` Good, `50` Acceptable, `60` Poor.\n"
                },
                "configContract": {
                    "type": "string",
                    "description": "Notification configuration template.\n"
                },
                "consumerKey": {
                    "type": "string",
                    "description": "Consumer key.\n"
                },
                "consumerSecret": {
                    "type": "string",
                    "description": "Consumer secret.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Condition description.\n"
                },
                "deviceIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Device IDs.\n"
                },
                "deviceNames": {
                    "type": "string",
                    "description": "Device names.\n"
                },
                "devices": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Devices.\n"
                },
                "directMessage": {
                    "type": "boolean",
                    "description": "Direct message flag.\n"
                },
                "event": {
                    "type": "string",
                    "description": "Event.\n"
                },
                "expire": {
                    "type": "integer",
                    "description": "Expire.\n"
                },
                "fieldTags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Devices.\n"
                },
                "from": {
                    "type": "string",
                    "description": "From.\n"
                },
                "grabFields": {
                    "type": "integer",
                    "description": "Grab fields. `0` Overview, `1` Rating, `2` Genres, `3` Quality, `4` Group, `5` Size, `6` Links, `7` Release, `8` Poster, `9` Fanart, `10` CustomFormats, `11` CustomFormatScore.\n"
                },
                "host": {
                    "type": "string",
                    "description": "Host.\n"
                },
                "icon": {
                    "type": "string",
                    "description": "Icon.\n"
                },
                "implementation": {
                    "type": "string",
                    "description": "Notification implementation name.\n"
                },
                "importFields": {
                    "type": "integer",
                    "description": "Import fields. `0` Overview, `1` Rating, `2` Genres, `3` Quality, `4` Codecs, `5` Group, `6` Size, `7` Languages, `8` Subtitles, `9` Links, `10` Release, `11` Poster, `12` Fanart.\n"
                },
                "includeHealthWarnings": {
                    "type": "boolean",
                    "description": "Include health warnings.\n"
                },
                "instanceName": {
                    "type": "string",
                    "description": "Instance name.\n"
                },
                "key": {
                    "type": "string",
                    "description": "Key.\n"
                },
                "location": {
                    "type": "string",
                    "description": "Purchase location.\n"
                },
                "mapFrom": {
                    "type": "string",
                    "description": "Map From.\n"
                },
                "mapTo": {
                    "type": "string",
                    "description": "Map To.\n"
                },
                "mention": {
                    "type": "string",
                    "description": "Mention.\n"
                },
                "method": {
                    "type": "integer",
                    "description": "Method. `1` POST, `2` PUT.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Notification name.\n"
                },
                "notify": {
                    "type": "boolean",
                    "description": "Notify flag.\n"
                },
                "onApplicationUpdate": {
                    "type": "boolean",
                    "description": "On application update flag.\n"
                },
                "onAuthorDelete": {
                    "type": "boolean",
                    "description": "On author deleted flag.\n"
                },
                "onBookDelete": {
                    "type": "boolean",
                    "description": "On book delete flag.\n"
                },
                "onBookFileDelete": {
                    "type": "boolean",
                    "description": "On book file delete flag.\n"
                },
                "onBookFileDeleteForUpgrade": {
                    "type": "boolean",
                    "description": "On book file delete for upgrade flag.\n"
                },
                "onBookRetag": {
                    "type": "boolean",
                    "description": "On book retag flag.\n"
                },
                "onDownloadFailure": {
                    "type": "boolean",
                    "description": "On download failure flag.\n"
                },
                "onGrab": {
                    "type": "boolean",
                    "description": "On grab flag.\n"
                },
                "onHealthIssue": {
                    "type": "boolean",
                    "description": "On health issue flag.\n"
                },
                "onImportFailure": {
                    "type": "boolean",
                    "description": "On import failure flag.\n"
                },
                "onReleaseImport": {
                    "type": "boolean",
                    "description": "On release import flag.\n"
                },
                "onRename": {
                    "type": "boolean",
                    "description": "On rename flag.\n"
                },
                "onUpgrade": {
                    "type": "boolean",
                    "description": "On upgrade flag.\n"
                },
                "password": {
                    "type": "string",
                    "description": "password.\n"
                },
                "path": {
                    "type": "string",
                    "description": "Path.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "Port.\n"
                },
                "priority": {
                    "type": "integer",
                    "description": "Priority.\n"
                },
                "recipients": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Recipients.\n"
                },
                "refreshToken": {
                    "type": "string",
                    "description": "Refresh token.\n"
                },
                "removeIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Remove IDs.\n"
                },
                "requestTokenSecret": {
                    "type": "string",
                    "description": "Request token secret.\n",
                    "secret": true
                },
                "requireEncryption": {
                    "type": "boolean",
                    "description": "Require encryption flag.\n"
                },
                "retry": {
                    "type": "integer",
                    "description": "Retry.\n"
                },
                "sendSilently": {
                    "type": "boolean",
                    "description": "Add silently flag.\n"
                },
                "senderDomain": {
                    "type": "string",
                    "description": "Sender domain.\n"
                },
                "senderId": {
                    "type": "string",
                    "description": "Sender ID.\n"
                },
                "server": {
                    "type": "string",
                    "description": "server.\n"
                },
                "serverUrl": {
                    "type": "string",
                    "description": "Server url.\n"
                },
                "signIn": {
                    "type": "string",
                    "description": "Sign in.\n"
                },
                "sound": {
                    "type": "string",
                    "description": "Sound.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                },
                "token": {
                    "type": "string",
                    "description": "Token.\n",
                    "secret": true
                },
                "topics": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Devices.\n"
                },
                "tos": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "To.\n"
                },
                "updateLibrary": {
                    "type": "boolean",
                    "description": "Update library flag.\n"
                },
                "url": {
                    "type": "string",
                    "description": "URL.\n"
                },
                "urlBase": {
                    "type": "string",
                    "description": "URL base.\n"
                },
                "useEuEndpoint": {
                    "type": "boolean",
                    "description": "Use EU endpoint flag.\n"
                },
                "useSsl": {
                    "type": "boolean",
                    "description": "Use SSL flag.\n"
                },
                "userId": {
                    "type": "string",
                    "description": "User ID.\n"
                },
                "userKey": {
                    "type": "string",
                    "description": "User key.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username.\n"
                },
                "webHookUrl": {
                    "type": "string",
                    "description": "Web hook url.\n"
                }
            },
            "requiredInputs": [
                "configContract",
                "implementation",
                "name"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Notification resources.\n",
                "properties": {
                    "accessToken": {
                        "type": "string",
                        "description": "Access token.\n"
                    },
                    "accessTokenSecret": {
                        "type": "string",
                        "description": "Access token secret.\n"
                    },
                    "addIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Add IDs.\n"
                    },
                    "apiKey": {
                        "type": "string",
                        "description": "API key.\n"
                    },
                    "appToken": {
                        "type": "string",
                        "description": "App token.\n"
                    },
                    "arguments": {
                        "type": "string",
                        "description": "Arguments.\n"
                    },
                    "attachFiles": {
                        "type": "boolean",
                        "description": "Attach files flag.\n"
                    },
                    "authUser": {
                        "type": "string",
                        "description": "Auth user.\n"
                    },
                    "author": {
                        "type": "string",
                        "description": "Author.\n"
                    },
                    "avatar": {
                        "type": "string",
                        "description": "Avatar.\n"
                    },
                    "bccs": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Bcc.\n"
                    },
                    "botToken": {
                        "type": "string",
                        "description": "Bot token.\n"
                    },
                    "ccs": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Cc.\n"
                    },
                    "channel": {
                        "type": "string",
                        "description": "Channel.\n"
                    },
                    "channelTags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Channel tags.\n"
                    },
                    "chatId": {
                        "type": "string",
                        "description": "Chat ID.\n"
                    },
                    "clickUrl": {
                        "type": "string",
                        "description": "Click URL.\n"
                    },
                    "condition": {
                        "type": "integer",
                        "description": "Condition. `10` BrandNew, `20` LikeNew, `30` VeryGood, `40` Good, `50` Acceptable, `60` Poor.\n"
                    },
                    "configContract": {
                        "type": "string",
                        "description": "Notification configuration template.\n"
                    },
                    "consumerKey": {
                        "type": "string",
                        "description": "Consumer key.\n"
                    },
                    "consumerSecret": {
                        "type": "string",
                        "description": "Consumer secret.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Condition description.\n"
                    },
                    "deviceIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Device IDs.\n"
                    },
                    "deviceNames": {
                        "type": "string",
                        "description": "Device names.\n"
                    },
                    "devices": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Devices.\n"
                    },
                    "directMessage": {
                        "type": "boolean",
                        "description": "Direct message flag.\n"
                    },
                    "event": {
                        "type": "string",
                        "description": "Event.\n"
                    },
                    "expire": {
                        "type": "integer",
                        "description": "Expire.\n"
                    },
                    "fieldTags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Devices.\n"
                    },
                    "from": {
                        "type": "string",
                        "description": "From.\n"
                    },
                    "grabFields": {
                        "type": "integer",
                        "description": "Grab fields. `0` Overview, `1` Rating, `2` Genres, `3` Quality, `4` Group, `5` Size, `6` Links, `7` Release, `8` Poster, `9` Fanart, `10` CustomFormats, `11` CustomFormatScore.\n"
                    },
                    "host": {
                        "type": "string",
                        "description": "Host.\n"
                    },
                    "icon": {
                        "type": "string",
                        "description": "Icon.\n"
                    },
                    "implementation": {
                        "type": "string",
                        "description": "Notification implementation name.\n"
                    },
                    "importFields": {
                        "type": "integer",
                        "description": "Import fields. `0` Overview, `1` Rating, `2` Genres, `3` Quality, `4` Codecs, `5` Group, `6` Size, `7` Languages, `8` Subtitles, `9` Links, `10` Release, `11` Poster, `12` Fanart.\n"
                    },
                    "includeHealthWarnings": {
                        "type": "boolean",
                        "description": "Include health warnings.\n"
                    },
                    "instanceName": {
                        "type": "string",
                        "description": "Instance name.\n"
                    },
                    "key": {
                        "type": "string",
                        "description": "Key.\n"
                    },
                    "location": {
                        "type": "string",
                        "description": "Purchase location.\n"
                    },
                    "mapFrom": {
                        "type": "string",
                        "description": "Map From.\n"
                    },
                    "mapTo": {
                        "type": "string",
                        "description": "Map To.\n"
                    },
                    "mention": {
                        "type": "string",
                        "description": "Mention.\n"
                    },
                    "method": {
                        "type": "integer",
                        "description": "Method. `1` POST, `2` PUT.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Notification name.\n"
                    },
                    "notify": {
                        "type": "boolean",
                        "description": "Notify flag.\n"
                    },
                    "onApplicationUpdate": {
                        "type": "boolean",
                        "description": "On application update flag.\n"
                    },
                    "onAuthorDelete": {
                        "type": "boolean",
                        "description": "On author deleted flag.\n"
                    },
                    "onBookDelete": {
                        "type": "boolean",
                        "description": "On book delete flag.\n"
                    },
                    "onBookFileDelete": {
                        "type": "boolean",
                        "description": "On book file delete flag.\n"
                    },
                    "onBookFileDeleteForUpgrade": {
                        "type": "boolean",
                        "description": "On book file delete for upgrade flag.\n"
                    },
                    "onBookRetag": {
                        "type": "boolean",
                        "description": "On book retag flag.\n"
                    },
                    "onDownloadFailure": {
                        "type": "boolean",
                        "description": "On download failure flag.\n"
                    },
                    "onGrab": {
                        "type": "boolean",
                        "description": "On grab flag.\n"
                    },
                    "onHealthIssue": {
                        "type": "boolean",
                        "description": "On health issue flag.\n"
                    },
                    "onImportFailure": {
                        "type": "boolean",
                        "description": "On import failure flag.\n"
                    },
                    "onReleaseImport": {
                        "type": "boolean",
                        "description": "On release import flag.\n"
                    },
                    "onRename": {
                        "type": "boolean",
                        "description": "On rename flag.\n"
                    },
                    "onUpgrade": {
                        "type": "boolean",
                        "description": "On upgrade flag.\n"
                    },
                    "password": {
                        "type": "string",
                        "description": "password.\n"
                    },
                    "path": {
                        "type": "string",
                        "description": "Path.\n"
                    },
                    "port": {
                        "type": "integer",
                        "description": "Port.\n"
                    },
                    "priority": {
                        "type": "integer",
                        "description": "Priority.\n"
                    },
                    "recipients": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Recipients.\n"
                    },
                    "refreshToken": {
                        "type": "string",
                        "description": "Refresh token.\n"
                    },
                    "removeIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Remove IDs.\n"
                    },
                    "requestTokenSecret": {
                        "type": "string",
                        "description": "Request token secret.\n",
                        "secret": true
                    },
                    "requireEncryption": {
                        "type": "boolean",
                        "description": "Require encryption flag.\n"
                    },
                    "retry": {
                        "type": "integer",
                        "description": "Retry.\n"
                    },
                    "sendSilently": {
                        "type": "boolean",
                        "description": "Add silently flag.\n"
                    },
                    "senderDomain": {
                        "type": "string",
                        "description": "Sender domain.\n"
                    },
                    "senderId": {
                        "type": "string",
                        "description": "Sender ID.\n"
                    },
                    "server": {
                        "type": "string",
                        "description": "server.\n"
                    },
                    "serverUrl": {
                        "type": "string",
                        "description": "Server url.\n"
                    },
                    "signIn": {
                        "type": "string",
                        "description": "Sign in.\n"
                    },
                    "sound": {
                        "type": "string",
                        "description": "Sound.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "List of associated tags.\n"
                    },
                    "token": {
                        "type": "string",
                        "description": "Token.\n",
                        "secret": true
                    },
                    "topics": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Devices.\n"
                    },
                    "tos": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "To.\n"
                    },
                    "updateLibrary": {
                        "type": "boolean",
                        "description": "Update library flag.\n"
                    },
                    "url": {
                        "type": "string",
                        "description": "URL.\n"
                    },
                    "urlBase": {
                        "type": "string",
                        "description": "URL base.\n"
                    },
                    "useEuEndpoint": {
                        "type": "boolean",
                        "description": "Use EU endpoint flag.\n"
                    },
                    "useSsl": {
                        "type": "boolean",
                        "description": "Use SSL flag.\n"
                    },
                    "userId": {
                        "type": "string",
                        "description": "User ID.\n"
                    },
                    "userKey": {
                        "type": "string",
                        "description": "User key.\n"
                    },
                    "username": {
                        "type": "string",
                        "description": "Username.\n"
                    },
                    "webHookUrl": {
                        "type": "string",
                        "description": "Web hook url.\n"
                    }
                },
                "type": "object"
            }
        },
        "readarr:Notifications/notificationBoxcar:NotificationBoxcar": {
            "description": "\u003c!-- subcategory:Notifications --\u003eNotification Boxcar resource.\nFor more information refer to [Notification](https://wiki.servarr.com/readarr/settings#connect) and [Boxcar](https://wiki.servarr.com/readarr/supported#boxcar).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as readarr from \"@maienm/pulumi-readarr\";\n\nconst example = new readarr.notifications.NotificationBoxcar(\"example\", {\n    includeHealthWarnings: false,\n    name: \"Example\",\n    onAuthorDelete: false,\n    onBookDelete: false,\n    onBookFileDelete: false,\n    onBookFileDeleteForUpgrade: true,\n    onDownloadFailure: false,\n    onGrab: false,\n    onHealthIssue: false,\n    onImportFailure: false,\n    onReleaseImport: false,\n    onUpgrade: false,\n    token: \"Token\",\n});\n```\n```python\nimport pulumi\nimport pulumi_readarr as readarr\n\nexample = readarr.notifications.NotificationBoxcar(\"example\",\n    include_health_warnings=False,\n    name=\"Example\",\n    on_author_delete=False,\n    on_book_delete=False,\n    on_book_file_delete=False,\n    on_book_file_delete_for_upgrade=True,\n    on_download_failure=False,\n    on_grab=False,\n    on_health_issue=False,\n    on_import_failure=False,\n    on_release_import=False,\n    on_upgrade=False,\n    token=\"Token\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Readarr = MaienM.Readarr;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Readarr.Notifications.NotificationBoxcar(\"example\", new()\n    {\n        IncludeHealthWarnings = false,\n        Name = \"Example\",\n        OnAuthorDelete = false,\n        OnBookDelete = false,\n        OnBookFileDelete = false,\n        OnBookFileDeleteForUpgrade = true,\n        OnDownloadFailure = false,\n        OnGrab = false,\n        OnHealthIssue = false,\n        OnImportFailure = false,\n        OnReleaseImport = false,\n        OnUpgrade = false,\n        Token = \"Token\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/MaienM/pulumi-readarr/sdk/v2/go/readarr/Notifications\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := Notifications.NewNotificationBoxcar(ctx, \"example\", \u0026Notifications.NotificationBoxcarArgs{\n\t\t\tIncludeHealthWarnings:      pulumi.Bool(false),\n\t\t\tName:                       pulumi.String(\"Example\"),\n\t\t\tOnAuthorDelete:             pulumi.Bool(false),\n\t\t\tOnBookDelete:               pulumi.Bool(false),\n\t\t\tOnBookFileDelete:           pulumi.Bool(false),\n\t\t\tOnBookFileDeleteForUpgrade: pulumi.Bool(true),\n\t\t\tOnDownloadFailure:          pulumi.Bool(false),\n\t\t\tOnGrab:                     pulumi.Bool(false),\n\t\t\tOnHealthIssue:              pulumi.Bool(false),\n\t\t\tOnImportFailure:            pulumi.Bool(false),\n\t\t\tOnReleaseImport:            pulumi.Bool(false),\n\t\t\tOnUpgrade:                  pulumi.Bool(false),\n\t\t\tToken:                      pulumi.String(\"Token\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.readarr.Notifications.NotificationBoxcar;\nimport com.pulumi.readarr.Notifications.NotificationBoxcarArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new NotificationBoxcar(\"example\", NotificationBoxcarArgs.builder()        \n            .includeHealthWarnings(false)\n            .name(\"Example\")\n            .onAuthorDelete(false)\n            .onBookDelete(false)\n            .onBookFileDelete(false)\n            .onBookFileDeleteForUpgrade(true)\n            .onDownloadFailure(false)\n            .onGrab(false)\n            .onHealthIssue(false)\n            .onImportFailure(false)\n            .onReleaseImport(false)\n            .onUpgrade(false)\n            .token(\"Token\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: readarr:Notifications:NotificationBoxcar\n    properties:\n      includeHealthWarnings: false\n      name: Example\n      onAuthorDelete: false\n      onBookDelete: false\n      onBookFileDelete: false\n      onBookFileDeleteForUpgrade: true\n      onDownloadFailure: false\n      onGrab: false\n      onHealthIssue: false\n      onImportFailure: false\n      onReleaseImport: false\n      onUpgrade: false\n      token: Token\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nimport using the API/UI ID\n\n```sh\n $ pulumi import readarr:Notifications/notificationBoxcar:NotificationBoxcar example 1\n```\n\n ",
            "properties": {
                "includeHealthWarnings": {
                    "type": "boolean",
                    "description": "Include health warnings.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Notification name.\n"
                },
                "onApplicationUpdate": {
                    "type": "boolean",
                    "description": "On application update flag.\n"
                },
                "onAuthorDelete": {
                    "type": "boolean",
                    "description": "On author deleted flag.\n"
                },
                "onBookDelete": {
                    "type": "boolean",
                    "description": "On book delete flag.\n"
                },
                "onBookFileDelete": {
                    "type": "boolean",
                    "description": "On book file delete flag.\n"
                },
                "onBookFileDeleteForUpgrade": {
                    "type": "boolean",
                    "description": "On book file delete for upgrade flag.\n"
                },
                "onDownloadFailure": {
                    "type": "boolean",
                    "description": "On download failure flag.\n"
                },
                "onGrab": {
                    "type": "boolean",
                    "description": "On grab flag.\n"
                },
                "onHealthIssue": {
                    "type": "boolean",
                    "description": "On health issue flag.\n"
                },
                "onImportFailure": {
                    "type": "boolean",
                    "description": "On import failure flag.\n"
                },
                "onReleaseImport": {
                    "type": "boolean",
                    "description": "On release import flag.\n"
                },
                "onUpgrade": {
                    "type": "boolean",
                    "description": "On upgrade flag.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                },
                "token": {
                    "type": "string",
                    "description": "Token.\n",
                    "secret": true
                }
            },
            "required": [
                "includeHealthWarnings",
                "name",
                "onApplicationUpdate",
                "onAuthorDelete",
                "onBookDelete",
                "onBookFileDelete",
                "onBookFileDeleteForUpgrade",
                "onDownloadFailure",
                "onGrab",
                "onHealthIssue",
                "onImportFailure",
                "onReleaseImport",
                "onUpgrade",
                "tags",
                "token"
            ],
            "inputProperties": {
                "includeHealthWarnings": {
                    "type": "boolean",
                    "description": "Include health warnings.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Notification name.\n"
                },
                "onApplicationUpdate": {
                    "type": "boolean",
                    "description": "On application update flag.\n"
                },
                "onAuthorDelete": {
                    "type": "boolean",
                    "description": "On author deleted flag.\n"
                },
                "onBookDelete": {
                    "type": "boolean",
                    "description": "On book delete flag.\n"
                },
                "onBookFileDelete": {
                    "type": "boolean",
                    "description": "On book file delete flag.\n"
                },
                "onBookFileDeleteForUpgrade": {
                    "type": "boolean",
                    "description": "On book file delete for upgrade flag.\n"
                },
                "onDownloadFailure": {
                    "type": "boolean",
                    "description": "On download failure flag.\n"
                },
                "onGrab": {
                    "type": "boolean",
                    "description": "On grab flag.\n"
                },
                "onHealthIssue": {
                    "type": "boolean",
                    "description": "On health issue flag.\n"
                },
                "onImportFailure": {
                    "type": "boolean",
                    "description": "On import failure flag.\n"
                },
                "onReleaseImport": {
                    "type": "boolean",
                    "description": "On release import flag.\n"
                },
                "onUpgrade": {
                    "type": "boolean",
                    "description": "On upgrade flag.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                },
                "token": {
                    "type": "string",
                    "description": "Token.\n",
                    "secret": true
                }
            },
            "requiredInputs": [
                "name",
                "token"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering NotificationBoxcar resources.\n",
                "properties": {
                    "includeHealthWarnings": {
                        "type": "boolean",
                        "description": "Include health warnings.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Notification name.\n"
                    },
                    "onApplicationUpdate": {
                        "type": "boolean",
                        "description": "On application update flag.\n"
                    },
                    "onAuthorDelete": {
                        "type": "boolean",
                        "description": "On author deleted flag.\n"
                    },
                    "onBookDelete": {
                        "type": "boolean",
                        "description": "On book delete flag.\n"
                    },
                    "onBookFileDelete": {
                        "type": "boolean",
                        "description": "On book file delete flag.\n"
                    },
                    "onBookFileDeleteForUpgrade": {
                        "type": "boolean",
                        "description": "On book file delete for upgrade flag.\n"
                    },
                    "onDownloadFailure": {
                        "type": "boolean",
                        "description": "On download failure flag.\n"
                    },
                    "onGrab": {
                        "type": "boolean",
                        "description": "On grab flag.\n"
                    },
                    "onHealthIssue": {
                        "type": "boolean",
                        "description": "On health issue flag.\n"
                    },
                    "onImportFailure": {
                        "type": "boolean",
                        "description": "On import failure flag.\n"
                    },
                    "onReleaseImport": {
                        "type": "boolean",
                        "description": "On release import flag.\n"
                    },
                    "onUpgrade": {
                        "type": "boolean",
                        "description": "On upgrade flag.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "List of associated tags.\n"
                    },
                    "token": {
                        "type": "string",
                        "description": "Token.\n",
                        "secret": true
                    }
                },
                "type": "object"
            }
        },
        "readarr:Notifications/notificationCustomScript:NotificationCustomScript": {
            "description": "\u003c!-- subcategory:Notifications --\u003eNotification Custom Script resource.\nFor more information refer to [Notification](https://wiki.servarr.com/readarr/settings#connect) and [Custom Script](https://wiki.servarr.com/readarr/supported#customscript).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as readarr from \"@maienm/pulumi-readarr\";\n\nconst example = new readarr.notifications.NotificationCustomScript(\"example\", {\n    includeHealthWarnings: false,\n    name: \"Example\",\n    onAuthorDelete: false,\n    onBookDelete: false,\n    onBookFileDelete: false,\n    onBookFileDeleteForUpgrade: true,\n    onBookRetag: false,\n    onGrab: false,\n    onHealthIssue: false,\n    onReleaseImport: true,\n    onRename: false,\n    onUpgrade: false,\n    path: \"/scripts/readarr.sh\",\n});\n```\n```python\nimport pulumi\nimport pulumi_readarr as readarr\n\nexample = readarr.notifications.NotificationCustomScript(\"example\",\n    include_health_warnings=False,\n    name=\"Example\",\n    on_author_delete=False,\n    on_book_delete=False,\n    on_book_file_delete=False,\n    on_book_file_delete_for_upgrade=True,\n    on_book_retag=False,\n    on_grab=False,\n    on_health_issue=False,\n    on_release_import=True,\n    on_rename=False,\n    on_upgrade=False,\n    path=\"/scripts/readarr.sh\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Readarr = MaienM.Readarr;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Readarr.Notifications.NotificationCustomScript(\"example\", new()\n    {\n        IncludeHealthWarnings = false,\n        Name = \"Example\",\n        OnAuthorDelete = false,\n        OnBookDelete = false,\n        OnBookFileDelete = false,\n        OnBookFileDeleteForUpgrade = true,\n        OnBookRetag = false,\n        OnGrab = false,\n        OnHealthIssue = false,\n        OnReleaseImport = true,\n        OnRename = false,\n        OnUpgrade = false,\n        Path = \"/scripts/readarr.sh\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/MaienM/pulumi-readarr/sdk/v2/go/readarr/Notifications\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := Notifications.NewNotificationCustomScript(ctx, \"example\", \u0026Notifications.NotificationCustomScriptArgs{\n\t\t\tIncludeHealthWarnings:      pulumi.Bool(false),\n\t\t\tName:                       pulumi.String(\"Example\"),\n\t\t\tOnAuthorDelete:             pulumi.Bool(false),\n\t\t\tOnBookDelete:               pulumi.Bool(false),\n\t\t\tOnBookFileDelete:           pulumi.Bool(false),\n\t\t\tOnBookFileDeleteForUpgrade: pulumi.Bool(true),\n\t\t\tOnBookRetag:                pulumi.Bool(false),\n\t\t\tOnGrab:                     pulumi.Bool(false),\n\t\t\tOnHealthIssue:              pulumi.Bool(false),\n\t\t\tOnReleaseImport:            pulumi.Bool(true),\n\t\t\tOnRename:                   pulumi.Bool(false),\n\t\t\tOnUpgrade:                  pulumi.Bool(false),\n\t\t\tPath:                       pulumi.String(\"/scripts/readarr.sh\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.readarr.Notifications.NotificationCustomScript;\nimport com.pulumi.readarr.Notifications.NotificationCustomScriptArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new NotificationCustomScript(\"example\", NotificationCustomScriptArgs.builder()        \n            .includeHealthWarnings(false)\n            .name(\"Example\")\n            .onAuthorDelete(false)\n            .onBookDelete(false)\n            .onBookFileDelete(false)\n            .onBookFileDeleteForUpgrade(true)\n            .onBookRetag(false)\n            .onGrab(false)\n            .onHealthIssue(false)\n            .onReleaseImport(true)\n            .onRename(false)\n            .onUpgrade(false)\n            .path(\"/scripts/readarr.sh\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: readarr:Notifications:NotificationCustomScript\n    properties:\n      includeHealthWarnings: false\n      name: Example\n      onAuthorDelete: false\n      onBookDelete: false\n      onBookFileDelete: false\n      onBookFileDeleteForUpgrade: true\n      onBookRetag: false\n      onGrab: false\n      onHealthIssue: false\n      onReleaseImport: true\n      onRename: false\n      onUpgrade: false\n      path: /scripts/readarr.sh\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nimport using the API/UI ID\n\n```sh\n $ pulumi import readarr:Notifications/notificationCustomScript:NotificationCustomScript example 1\n```\n\n ",
            "properties": {
                "arguments": {
                    "type": "string",
                    "description": "Arguments.\n"
                },
                "includeHealthWarnings": {
                    "type": "boolean",
                    "description": "Include health warnings.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Notification name.\n"
                },
                "onApplicationUpdate": {
                    "type": "boolean",
                    "description": "On application update flag.\n"
                },
                "onAuthorDelete": {
                    "type": "boolean",
                    "description": "On author deleted flag.\n"
                },
                "onBookDelete": {
                    "type": "boolean",
                    "description": "On book delete flag.\n"
                },
                "onBookFileDelete": {
                    "type": "boolean",
                    "description": "On book file delete flag.\n"
                },
                "onBookFileDeleteForUpgrade": {
                    "type": "boolean",
                    "description": "On book file delete for upgrade flag.\n"
                },
                "onBookRetag": {
                    "type": "boolean",
                    "description": "On book retag flag.\n"
                },
                "onGrab": {
                    "type": "boolean",
                    "description": "On grab flag.\n"
                },
                "onHealthIssue": {
                    "type": "boolean",
                    "description": "On health issue flag.\n"
                },
                "onReleaseImport": {
                    "type": "boolean",
                    "description": "On release import flag.\n"
                },
                "onRename": {
                    "type": "boolean",
                    "description": "On rename flag.\n"
                },
                "onUpgrade": {
                    "type": "boolean",
                    "description": "On upgrade flag.\n"
                },
                "path": {
                    "type": "string",
                    "description": "Path.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                }
            },
            "required": [
                "arguments",
                "includeHealthWarnings",
                "name",
                "onApplicationUpdate",
                "onAuthorDelete",
                "onBookDelete",
                "onBookFileDelete",
                "onBookFileDeleteForUpgrade",
                "onBookRetag",
                "onGrab",
                "onHealthIssue",
                "onReleaseImport",
                "onRename",
                "onUpgrade",
                "path",
                "tags"
            ],
            "inputProperties": {
                "arguments": {
                    "type": "string",
                    "description": "Arguments.\n"
                },
                "includeHealthWarnings": {
                    "type": "boolean",
                    "description": "Include health warnings.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Notification name.\n"
                },
                "onApplicationUpdate": {
                    "type": "boolean",
                    "description": "On application update flag.\n"
                },
                "onAuthorDelete": {
                    "type": "boolean",
                    "description": "On author deleted flag.\n"
                },
                "onBookDelete": {
                    "type": "boolean",
                    "description": "On book delete flag.\n"
                },
                "onBookFileDelete": {
                    "type": "boolean",
                    "description": "On book file delete flag.\n"
                },
                "onBookFileDeleteForUpgrade": {
                    "type": "boolean",
                    "description": "On book file delete for upgrade flag.\n"
                },
                "onBookRetag": {
                    "type": "boolean",
                    "description": "On book retag flag.\n"
                },
                "onGrab": {
                    "type": "boolean",
                    "description": "On grab flag.\n"
                },
                "onHealthIssue": {
                    "type": "boolean",
                    "description": "On health issue flag.\n"
                },
                "onReleaseImport": {
                    "type": "boolean",
                    "description": "On release import flag.\n"
                },
                "onRename": {
                    "type": "boolean",
                    "description": "On rename flag.\n"
                },
                "onUpgrade": {
                    "type": "boolean",
                    "description": "On upgrade flag.\n"
                },
                "path": {
                    "type": "string",
                    "description": "Path.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                }
            },
            "requiredInputs": [
                "name",
                "path"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering NotificationCustomScript resources.\n",
                "properties": {
                    "arguments": {
                        "type": "string",
                        "description": "Arguments.\n"
                    },
                    "includeHealthWarnings": {
                        "type": "boolean",
                        "description": "Include health warnings.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Notification name.\n"
                    },
                    "onApplicationUpdate": {
                        "type": "boolean",
                        "description": "On application update flag.\n"
                    },
                    "onAuthorDelete": {
                        "type": "boolean",
                        "description": "On author deleted flag.\n"
                    },
                    "onBookDelete": {
                        "type": "boolean",
                        "description": "On book delete flag.\n"
                    },
                    "onBookFileDelete": {
                        "type": "boolean",
                        "description": "On book file delete flag.\n"
                    },
                    "onBookFileDeleteForUpgrade": {
                        "type": "boolean",
                        "description": "On book file delete for upgrade flag.\n"
                    },
                    "onBookRetag": {
                        "type": "boolean",
                        "description": "On book retag flag.\n"
                    },
                    "onGrab": {
                        "type": "boolean",
                        "description": "On grab flag.\n"
                    },
                    "onHealthIssue": {
                        "type": "boolean",
                        "description": "On health issue flag.\n"
                    },
                    "onReleaseImport": {
                        "type": "boolean",
                        "description": "On release import flag.\n"
                    },
                    "onRename": {
                        "type": "boolean",
                        "description": "On rename flag.\n"
                    },
                    "onUpgrade": {
                        "type": "boolean",
                        "description": "On upgrade flag.\n"
                    },
                    "path": {
                        "type": "string",
                        "description": "Path.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "List of associated tags.\n"
                    }
                },
                "type": "object"
            }
        },
        "readarr:Notifications/notificationDiscord:NotificationDiscord": {
            "description": "\u003c!-- subcategory:Notifications --\u003eNotification Discord resource.\nFor more information refer to [Notification](https://wiki.servarr.com/readarr/settings#connect) and [Discord](https://wiki.servarr.com/readarr/supported#discord).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.readarr.Notifications.NotificationDiscord;\nimport com.pulumi.readarr.Notifications.NotificationDiscordArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new NotificationDiscord(\"example\", NotificationDiscordArgs.builder()        \n            .avatar(\"https://i.imgur.com/oBPXx0D.png\")\n            .grabFields(            \n                0,\n                1,\n                2,\n                3,\n                4,\n                5,\n                6,\n                7,\n                8,\n                9)\n            .importFields(            \n                0,\n                1,\n                2,\n                3,\n                4,\n                5,\n                6,\n                7,\n                8,\n                9,\n                10,\n                11,\n                12)\n            .includeHealthWarnings(false)\n            .name(\"Example\")\n            .onAuthorDelete(false)\n            .onBookDelete(false)\n            .onBookFileDelete(true)\n            .onBookFileDeleteForUpgrade(false)\n            .onBookRetag(true)\n            .onDownloadFailure(false)\n            .onGrab(false)\n            .onHealthIssue(false)\n            .onImportFailure(false)\n            .onReleaseImport(false)\n            .onRename(false)\n            .onUpgrade(false)\n            .username(\"User\")\n            .webHookUrl(\"http://discord-web-hook.com\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: readarr:Notifications:NotificationDiscord\n    properties:\n      avatar: https://i.imgur.com/oBPXx0D.png\n      grabFields:\n        - 0\n        - 1\n        - 2\n        - 3\n        - 4\n        - 5\n        - 6\n        - 7\n        - 8\n        - 9\n      importFields:\n        - 0\n        - 1\n        - 2\n        - 3\n        - 4\n        - 5\n        - 6\n        - 7\n        - 8\n        - 9\n        - 10\n        - 11\n        - 12\n      includeHealthWarnings: false\n      name: Example\n      onAuthorDelete: false\n      onBookDelete: false\n      onBookFileDelete: true\n      onBookFileDeleteForUpgrade: false\n      onBookRetag: true\n      onDownloadFailure: false\n      onGrab: false\n      onHealthIssue: false\n      onImportFailure: false\n      onReleaseImport: false\n      onRename: false\n      onUpgrade: false\n      username: User\n      webHookUrl: http://discord-web-hook.com\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nimport using the API/UI ID\n\n```sh\n $ pulumi import readarr:Notifications/notificationDiscord:NotificationDiscord example 1\n```\n\n ",
            "properties": {
                "avatar": {
                    "type": "string",
                    "description": "Avatar.\n"
                },
                "includeHealthWarnings": {
                    "type": "boolean",
                    "description": "Include health warnings.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Notification name.\n"
                },
                "onApplicationUpdate": {
                    "type": "boolean",
                    "description": "On application update flag.\n"
                },
                "onAuthorDelete": {
                    "type": "boolean",
                    "description": "On author deleted flag.\n"
                },
                "onBookDelete": {
                    "type": "boolean",
                    "description": "On book delete flag.\n"
                },
                "onBookFileDelete": {
                    "type": "boolean",
                    "description": "On book file delete flag.\n"
                },
                "onBookFileDeleteForUpgrade": {
                    "type": "boolean",
                    "description": "On book file delete for upgrade flag.\n"
                },
                "onBookRetag": {
                    "type": "boolean",
                    "description": "On book retag flag.\n"
                },
                "onDownloadFailure": {
                    "type": "boolean",
                    "description": "On download failure flag.\n"
                },
                "onGrab": {
                    "type": "boolean",
                    "description": "On grab flag.\n"
                },
                "onHealthIssue": {
                    "type": "boolean",
                    "description": "On health issue flag.\n"
                },
                "onImportFailure": {
                    "type": "boolean",
                    "description": "On import failure flag.\n"
                },
                "onReleaseImport": {
                    "type": "boolean",
                    "description": "On release import flag.\n"
                },
                "onRename": {
                    "type": "boolean",
                    "description": "On rename flag.\n"
                },
                "onUpgrade": {
                    "type": "boolean",
                    "description": "On upgrade flag.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username.\n"
                },
                "webHookUrl": {
                    "type": "string",
                    "description": "Web hook URL.\n"
                }
            },
            "required": [
                "avatar",
                "includeHealthWarnings",
                "name",
                "onApplicationUpdate",
                "onAuthorDelete",
                "onBookDelete",
                "onBookFileDelete",
                "onBookFileDeleteForUpgrade",
                "onBookRetag",
                "onDownloadFailure",
                "onGrab",
                "onHealthIssue",
                "onImportFailure",
                "onReleaseImport",
                "onRename",
                "onUpgrade",
                "tags",
                "username",
                "webHookUrl"
            ],
            "inputProperties": {
                "avatar": {
                    "type": "string",
                    "description": "Avatar.\n"
                },
                "includeHealthWarnings": {
                    "type": "boolean",
                    "description": "Include health warnings.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Notification name.\n"
                },
                "onApplicationUpdate": {
                    "type": "boolean",
                    "description": "On application update flag.\n"
                },
                "onAuthorDelete": {
                    "type": "boolean",
                    "description": "On author deleted flag.\n"
                },
                "onBookDelete": {
                    "type": "boolean",
                    "description": "On book delete flag.\n"
                },
                "onBookFileDelete": {
                    "type": "boolean",
                    "description": "On book file delete flag.\n"
                },
                "onBookFileDeleteForUpgrade": {
                    "type": "boolean",
                    "description": "On book file delete for upgrade flag.\n"
                },
                "onBookRetag": {
                    "type": "boolean",
                    "description": "On book retag flag.\n"
                },
                "onDownloadFailure": {
                    "type": "boolean",
                    "description": "On download failure flag.\n"
                },
                "onGrab": {
                    "type": "boolean",
                    "description": "On grab flag.\n"
                },
                "onHealthIssue": {
                    "type": "boolean",
                    "description": "On health issue flag.\n"
                },
                "onImportFailure": {
                    "type": "boolean",
                    "description": "On import failure flag.\n"
                },
                "onReleaseImport": {
                    "type": "boolean",
                    "description": "On release import flag.\n"
                },
                "onRename": {
                    "type": "boolean",
                    "description": "On rename flag.\n"
                },
                "onUpgrade": {
                    "type": "boolean",
                    "description": "On upgrade flag.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username.\n"
                },
                "webHookUrl": {
                    "type": "string",
                    "description": "Web hook URL.\n"
                }
            },
            "requiredInputs": [
                "name",
                "webHookUrl"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering NotificationDiscord resources.\n",
                "properties": {
                    "avatar": {
                        "type": "string",
                        "description": "Avatar.\n"
                    },
                    "includeHealthWarnings": {
                        "type": "boolean",
                        "description": "Include health warnings.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Notification name.\n"
                    },
                    "onApplicationUpdate": {
                        "type": "boolean",
                        "description": "On application update flag.\n"
                    },
                    "onAuthorDelete": {
                        "type": "boolean",
                        "description": "On author deleted flag.\n"
                    },
                    "onBookDelete": {
                        "type": "boolean",
                        "description": "On book delete flag.\n"
                    },
                    "onBookFileDelete": {
                        "type": "boolean",
                        "description": "On book file delete flag.\n"
                    },
                    "onBookFileDeleteForUpgrade": {
                        "type": "boolean",
                        "description": "On book file delete for upgrade flag.\n"
                    },
                    "onBookRetag": {
                        "type": "boolean",
                        "description": "On book retag flag.\n"
                    },
                    "onDownloadFailure": {
                        "type": "boolean",
                        "description": "On download failure flag.\n"
                    },
                    "onGrab": {
                        "type": "boolean",
                        "description": "On grab flag.\n"
                    },
                    "onHealthIssue": {
                        "type": "boolean",
                        "description": "On health issue flag.\n"
                    },
                    "onImportFailure": {
                        "type": "boolean",
                        "description": "On import failure flag.\n"
                    },
                    "onReleaseImport": {
                        "type": "boolean",
                        "description": "On release import flag.\n"
                    },
                    "onRename": {
                        "type": "boolean",
                        "description": "On rename flag.\n"
                    },
                    "onUpgrade": {
                        "type": "boolean",
                        "description": "On upgrade flag.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "List of associated tags.\n"
                    },
                    "username": {
                        "type": "string",
                        "description": "Username.\n"
                    },
                    "webHookUrl": {
                        "type": "string",
                        "description": "Web hook URL.\n"
                    }
                },
                "type": "object"
            }
        },
        "readarr:Notifications/notificationEmail:NotificationEmail": {
            "description": "\u003c!-- subcategory:Notifications --\u003eNotification Email resource.\nFor more information refer to [Notification](https://wiki.servarr.com/readarr/settings#connect) and [Email](https://wiki.servarr.com/readarr/supported#email).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as readarr from \"@maienm/pulumi-readarr\";\n\nconst example = new readarr.notifications.NotificationEmail(\"example\", {\n    attachFiles: true,\n    from: \"from_email@example.com\",\n    onAuthorDelete: false,\n    onBookDelete: false,\n    onBookFileDelete: false,\n    onBookFileDeleteForUpgrade: true,\n    onDownloadFailure: false,\n    onGrab: false,\n    onHealthIssue: false,\n    onImportFailure: false,\n    onReleaseImport: false,\n    onUpgrade: false,\n    port: 587,\n    server: \"http://email-server.net\",\n    tos: [\n        \"user1@example.com\",\n        \"user2@example.com\",\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_readarr as readarr\n\nexample = readarr.notifications.NotificationEmail(\"example\",\n    attach_files=True,\n    from_=\"from_email@example.com\",\n    on_author_delete=False,\n    on_book_delete=False,\n    on_book_file_delete=False,\n    on_book_file_delete_for_upgrade=True,\n    on_download_failure=False,\n    on_grab=False,\n    on_health_issue=False,\n    on_import_failure=False,\n    on_release_import=False,\n    on_upgrade=False,\n    port=587,\n    server=\"http://email-server.net\",\n    tos=[\n        \"user1@example.com\",\n        \"user2@example.com\",\n    ])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Readarr = MaienM.Readarr;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Readarr.Notifications.NotificationEmail(\"example\", new()\n    {\n        AttachFiles = true,\n        From = \"from_email@example.com\",\n        OnAuthorDelete = false,\n        OnBookDelete = false,\n        OnBookFileDelete = false,\n        OnBookFileDeleteForUpgrade = true,\n        OnDownloadFailure = false,\n        OnGrab = false,\n        OnHealthIssue = false,\n        OnImportFailure = false,\n        OnReleaseImport = false,\n        OnUpgrade = false,\n        Port = 587,\n        Server = \"http://email-server.net\",\n        Tos = new[]\n        {\n            \"user1@example.com\",\n            \"user2@example.com\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/MaienM/pulumi-readarr/sdk/v2/go/readarr/Notifications\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := Notifications.NewNotificationEmail(ctx, \"example\", \u0026Notifications.NotificationEmailArgs{\n\t\t\tAttachFiles:                pulumi.Bool(true),\n\t\t\tFrom:                       pulumi.String(\"from_email@example.com\"),\n\t\t\tOnAuthorDelete:             pulumi.Bool(false),\n\t\t\tOnBookDelete:               pulumi.Bool(false),\n\t\t\tOnBookFileDelete:           pulumi.Bool(false),\n\t\t\tOnBookFileDeleteForUpgrade: pulumi.Bool(true),\n\t\t\tOnDownloadFailure:          pulumi.Bool(false),\n\t\t\tOnGrab:                     pulumi.Bool(false),\n\t\t\tOnHealthIssue:              pulumi.Bool(false),\n\t\t\tOnImportFailure:            pulumi.Bool(false),\n\t\t\tOnReleaseImport:            pulumi.Bool(false),\n\t\t\tOnUpgrade:                  pulumi.Bool(false),\n\t\t\tPort:                       pulumi.Int(587),\n\t\t\tServer:                     pulumi.String(\"http://email-server.net\"),\n\t\t\tTos: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"user1@example.com\"),\n\t\t\t\tpulumi.String(\"user2@example.com\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.readarr.Notifications.NotificationEmail;\nimport com.pulumi.readarr.Notifications.NotificationEmailArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new NotificationEmail(\"example\", NotificationEmailArgs.builder()        \n            .attachFiles(true)\n            .from(\"from_email@example.com\")\n            .onAuthorDelete(false)\n            .onBookDelete(false)\n            .onBookFileDelete(false)\n            .onBookFileDeleteForUpgrade(true)\n            .onDownloadFailure(false)\n            .onGrab(false)\n            .onHealthIssue(false)\n            .onImportFailure(false)\n            .onReleaseImport(false)\n            .onUpgrade(false)\n            .port(587)\n            .server(\"http://email-server.net\")\n            .tos(            \n                \"user1@example.com\",\n                \"user2@example.com\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: readarr:Notifications:NotificationEmail\n    properties:\n      attachFiles: true\n      from: from_email@example.com\n      onAuthorDelete: false\n      onBookDelete: false\n      onBookFileDelete: false\n      onBookFileDeleteForUpgrade: true\n      onDownloadFailure: false\n      onGrab: false\n      onHealthIssue: false\n      onImportFailure: false\n      onReleaseImport: false\n      onUpgrade: false\n      port: 587\n      server: http://email-server.net\n      tos:\n        - user1@example.com\n        - user2@example.com\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nimport using the API/UI ID\n\n```sh\n $ pulumi import readarr:Notifications/notificationEmail:NotificationEmail example 1\n```\n\n ",
            "properties": {
                "attachFiles": {
                    "type": "boolean",
                    "description": "Attach files flag.\n"
                },
                "bccs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Bcc.\n"
                },
                "ccs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Cc.\n"
                },
                "from": {
                    "type": "string",
                    "description": "From.\n"
                },
                "includeHealthWarnings": {
                    "type": "boolean",
                    "description": "Include health warnings.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Notification name.\n"
                },
                "onApplicationUpdate": {
                    "type": "boolean",
                    "description": "On application update flag.\n"
                },
                "onAuthorDelete": {
                    "type": "boolean",
                    "description": "On author deleted flag.\n"
                },
                "onBookDelete": {
                    "type": "boolean",
                    "description": "On book delete flag.\n"
                },
                "onBookFileDelete": {
                    "type": "boolean",
                    "description": "On book file delete flag.\n"
                },
                "onBookFileDeleteForUpgrade": {
                    "type": "boolean",
                    "description": "On book file delete for upgrade flag.\n"
                },
                "onDownloadFailure": {
                    "type": "boolean",
                    "description": "On download failure flag.\n"
                },
                "onGrab": {
                    "type": "boolean",
                    "description": "On grab flag.\n"
                },
                "onHealthIssue": {
                    "type": "boolean",
                    "description": "On health issue flag.\n"
                },
                "onImportFailure": {
                    "type": "boolean",
                    "description": "On import failure flag.\n"
                },
                "onReleaseImport": {
                    "type": "boolean",
                    "description": "On release import flag.\n"
                },
                "onUpgrade": {
                    "type": "boolean",
                    "description": "On upgrade flag.\n"
                },
                "password": {
                    "type": "string",
                    "description": "Password.\n",
                    "secret": true
                },
                "port": {
                    "type": "integer",
                    "description": "Port.\n"
                },
                "requireEncryption": {
                    "type": "boolean",
                    "description": "Require encryption flag.\n"
                },
                "server": {
                    "type": "string",
                    "description": "Server.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                },
                "tos": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "To.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username.\n"
                }
            },
            "required": [
                "attachFiles",
                "bccs",
                "ccs",
                "from",
                "includeHealthWarnings",
                "name",
                "onApplicationUpdate",
                "onAuthorDelete",
                "onBookDelete",
                "onBookFileDelete",
                "onBookFileDeleteForUpgrade",
                "onDownloadFailure",
                "onGrab",
                "onHealthIssue",
                "onImportFailure",
                "onReleaseImport",
                "onUpgrade",
                "password",
                "port",
                "requireEncryption",
                "server",
                "tags",
                "tos",
                "username"
            ],
            "inputProperties": {
                "attachFiles": {
                    "type": "boolean",
                    "description": "Attach files flag.\n"
                },
                "bccs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Bcc.\n"
                },
                "ccs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Cc.\n"
                },
                "from": {
                    "type": "string",
                    "description": "From.\n"
                },
                "includeHealthWarnings": {
                    "type": "boolean",
                    "description": "Include health warnings.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Notification name.\n"
                },
                "onApplicationUpdate": {
                    "type": "boolean",
                    "description": "On application update flag.\n"
                },
                "onAuthorDelete": {
                    "type": "boolean",
                    "description": "On author deleted flag.\n"
                },
                "onBookDelete": {
                    "type": "boolean",
                    "description": "On book delete flag.\n"
                },
                "onBookFileDelete": {
                    "type": "boolean",
                    "description": "On book file delete flag.\n"
                },
                "onBookFileDeleteForUpgrade": {
                    "type": "boolean",
                    "description": "On book file delete for upgrade flag.\n"
                },
                "onDownloadFailure": {
                    "type": "boolean",
                    "description": "On download failure flag.\n"
                },
                "onGrab": {
                    "type": "boolean",
                    "description": "On grab flag.\n"
                },
                "onHealthIssue": {
                    "type": "boolean",
                    "description": "On health issue flag.\n"
                },
                "onImportFailure": {
                    "type": "boolean",
                    "description": "On import failure flag.\n"
                },
                "onReleaseImport": {
                    "type": "boolean",
                    "description": "On release import flag.\n"
                },
                "onUpgrade": {
                    "type": "boolean",
                    "description": "On upgrade flag.\n"
                },
                "password": {
                    "type": "string",
                    "description": "Password.\n",
                    "secret": true
                },
                "port": {
                    "type": "integer",
                    "description": "Port.\n"
                },
                "requireEncryption": {
                    "type": "boolean",
                    "description": "Require encryption flag.\n"
                },
                "server": {
                    "type": "string",
                    "description": "Server.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                },
                "tos": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "To.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username.\n"
                }
            },
            "requiredInputs": [
                "from",
                "name",
                "server",
                "tos"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering NotificationEmail resources.\n",
                "properties": {
                    "attachFiles": {
                        "type": "boolean",
                        "description": "Attach files flag.\n"
                    },
                    "bccs": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Bcc.\n"
                    },
                    "ccs": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Cc.\n"
                    },
                    "from": {
                        "type": "string",
                        "description": "From.\n"
                    },
                    "includeHealthWarnings": {
                        "type": "boolean",
                        "description": "Include health warnings.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Notification name.\n"
                    },
                    "onApplicationUpdate": {
                        "type": "boolean",
                        "description": "On application update flag.\n"
                    },
                    "onAuthorDelete": {
                        "type": "boolean",
                        "description": "On author deleted flag.\n"
                    },
                    "onBookDelete": {
                        "type": "boolean",
                        "description": "On book delete flag.\n"
                    },
                    "onBookFileDelete": {
                        "type": "boolean",
                        "description": "On book file delete flag.\n"
                    },
                    "onBookFileDeleteForUpgrade": {
                        "type": "boolean",
                        "description": "On book file delete for upgrade flag.\n"
                    },
                    "onDownloadFailure": {
                        "type": "boolean",
                        "description": "On download failure flag.\n"
                    },
                    "onGrab": {
                        "type": "boolean",
                        "description": "On grab flag.\n"
                    },
                    "onHealthIssue": {
                        "type": "boolean",
                        "description": "On health issue flag.\n"
                    },
                    "onImportFailure": {
                        "type": "boolean",
                        "description": "On import failure flag.\n"
                    },
                    "onReleaseImport": {
                        "type": "boolean",
                        "description": "On release import flag.\n"
                    },
                    "onUpgrade": {
                        "type": "boolean",
                        "description": "On upgrade flag.\n"
                    },
                    "password": {
                        "type": "string",
                        "description": "Password.\n",
                        "secret": true
                    },
                    "port": {
                        "type": "integer",
                        "description": "Port.\n"
                    },
                    "requireEncryption": {
                        "type": "boolean",
                        "description": "Require encryption flag.\n"
                    },
                    "server": {
                        "type": "string",
                        "description": "Server.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "List of associated tags.\n"
                    },
                    "tos": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "To.\n"
                    },
                    "username": {
                        "type": "string",
                        "description": "Username.\n"
                    }
                },
                "type": "object"
            }
        },
        "readarr:Notifications/notificationGoodreadsBookshelves:NotificationGoodreadsBookshelves": {
            "description": "\u003c!-- subcategory:Notifications --\u003eNotification GoodreadsBookshelves resource.\nFor more information refer to [Notification](https://wiki.servarr.com/readarr/settings#connect) and [GoodreadsBookshelves](https://wiki.servarr.com/readarr/supported#goodreadsbookshelf).\n\n\n## Import\n\nimport using the API/UI ID\n\n```sh\n $ pulumi import readarr:Notifications/notificationGoodreadsBookshelves:NotificationGoodreadsBookshelves example 1\n```\n\n ",
            "properties": {
                "accessToken": {
                    "type": "string",
                    "description": "Access token.\n",
                    "secret": true
                },
                "accessTokenSecret": {
                    "type": "string",
                    "description": "Access token secret.\n",
                    "secret": true
                },
                "addIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Add IDs.\n"
                },
                "includeHealthWarnings": {
                    "type": "boolean",
                    "description": "Include health warnings.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Notification name.\n"
                },
                "onAuthorDelete": {
                    "type": "boolean",
                    "description": "On author deleted flag.\n"
                },
                "onBookDelete": {
                    "type": "boolean",
                    "description": "On book delete flag.\n"
                },
                "onBookFileDelete": {
                    "type": "boolean",
                    "description": "On book file delete flag.\n"
                },
                "onBookFileDeleteForUpgrade": {
                    "type": "boolean",
                    "description": "On book file delete for upgrade flag.\n"
                },
                "onReleaseImport": {
                    "type": "boolean",
                    "description": "On release import flag.\n"
                },
                "onUpgrade": {
                    "type": "boolean",
                    "description": "On upgrade flag.\n"
                },
                "removeIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Remove IDs.\n"
                },
                "requestTokenSecret": {
                    "type": "string",
                    "description": "Request token secret.\n",
                    "secret": true
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                },
                "userId": {
                    "type": "string",
                    "description": "User ID.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username.\n"
                }
            },
            "required": [
                "accessToken",
                "accessTokenSecret",
                "addIds",
                "includeHealthWarnings",
                "name",
                "onAuthorDelete",
                "onBookDelete",
                "onBookFileDelete",
                "onBookFileDeleteForUpgrade",
                "onReleaseImport",
                "onUpgrade",
                "removeIds",
                "requestTokenSecret",
                "tags",
                "userId",
                "username"
            ],
            "inputProperties": {
                "accessToken": {
                    "type": "string",
                    "description": "Access token.\n",
                    "secret": true
                },
                "accessTokenSecret": {
                    "type": "string",
                    "description": "Access token secret.\n",
                    "secret": true
                },
                "addIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Add IDs.\n"
                },
                "includeHealthWarnings": {
                    "type": "boolean",
                    "description": "Include health warnings.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Notification name.\n"
                },
                "onAuthorDelete": {
                    "type": "boolean",
                    "description": "On author deleted flag.\n"
                },
                "onBookDelete": {
                    "type": "boolean",
                    "description": "On book delete flag.\n"
                },
                "onBookFileDelete": {
                    "type": "boolean",
                    "description": "On book file delete flag.\n"
                },
                "onBookFileDeleteForUpgrade": {
                    "type": "boolean",
                    "description": "On book file delete for upgrade flag.\n"
                },
                "onReleaseImport": {
                    "type": "boolean",
                    "description": "On release import flag.\n"
                },
                "onUpgrade": {
                    "type": "boolean",
                    "description": "On upgrade flag.\n"
                },
                "removeIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Remove IDs.\n"
                },
                "requestTokenSecret": {
                    "type": "string",
                    "description": "Request token secret.\n",
                    "secret": true
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                },
                "userId": {
                    "type": "string",
                    "description": "User ID.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username.\n"
                }
            },
            "requiredInputs": [
                "accessToken",
                "accessTokenSecret",
                "name",
                "username"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering NotificationGoodreadsBookshelves resources.\n",
                "properties": {
                    "accessToken": {
                        "type": "string",
                        "description": "Access token.\n",
                        "secret": true
                    },
                    "accessTokenSecret": {
                        "type": "string",
                        "description": "Access token secret.\n",
                        "secret": true
                    },
                    "addIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Add IDs.\n"
                    },
                    "includeHealthWarnings": {
                        "type": "boolean",
                        "description": "Include health warnings.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Notification name.\n"
                    },
                    "onAuthorDelete": {
                        "type": "boolean",
                        "description": "On author deleted flag.\n"
                    },
                    "onBookDelete": {
                        "type": "boolean",
                        "description": "On book delete flag.\n"
                    },
                    "onBookFileDelete": {
                        "type": "boolean",
                        "description": "On book file delete flag.\n"
                    },
                    "onBookFileDeleteForUpgrade": {
                        "type": "boolean",
                        "description": "On book file delete for upgrade flag.\n"
                    },
                    "onReleaseImport": {
                        "type": "boolean",
                        "description": "On release import flag.\n"
                    },
                    "onUpgrade": {
                        "type": "boolean",
                        "description": "On upgrade flag.\n"
                    },
                    "removeIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Remove IDs.\n"
                    },
                    "requestTokenSecret": {
                        "type": "string",
                        "description": "Request token secret.\n",
                        "secret": true
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "List of associated tags.\n"
                    },
                    "userId": {
                        "type": "string",
                        "description": "User ID.\n"
                    },
                    "username": {
                        "type": "string",
                        "description": "Username.\n"
                    }
                },
                "type": "object"
            }
        },
        "readarr:Notifications/notificationGoodreadsOwnedBooks:NotificationGoodreadsOwnedBooks": {
            "description": "\u003c!-- subcategory:Notifications --\u003eNotification GoodreadsOwnedBooks resource.\nFor more information refer to [Notification](https://wiki.servarr.com/readarr/settings#connect) and [GoodreadsOwnedBooks](https://wiki.servarr.com/readarr/supported#goodreadsownedbooks).\n\n\n## Import\n\nimport using the API/UI ID\n\n```sh\n $ pulumi import readarr:Notifications/notificationGoodreadsOwnedBooks:NotificationGoodreadsOwnedBooks example 1\n```\n\n ",
            "properties": {
                "accessToken": {
                    "type": "string",
                    "description": "Access token.\n",
                    "secret": true
                },
                "accessTokenSecret": {
                    "type": "string",
                    "description": "Access token secret.\n",
                    "secret": true
                },
                "condition": {
                    "type": "integer",
                    "description": "Condition. `10` BrandNew, `20` LikeNew, `30` VeryGood, `40` Good, `50` Acceptable, `60` Poor.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Condition description.\n"
                },
                "location": {
                    "type": "string",
                    "description": "Purchase location.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Notification name.\n"
                },
                "onReleaseImport": {
                    "type": "boolean",
                    "description": "On release import flag.\n"
                },
                "onUpgrade": {
                    "type": "boolean",
                    "description": "On upgrade flag.\n"
                },
                "requestTokenSecret": {
                    "type": "string",
                    "description": "Request token secret.\n",
                    "secret": true
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                },
                "userId": {
                    "type": "string",
                    "description": "User ID.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username.\n"
                }
            },
            "required": [
                "accessToken",
                "accessTokenSecret",
                "condition",
                "description",
                "location",
                "name",
                "onReleaseImport",
                "onUpgrade",
                "requestTokenSecret",
                "tags",
                "userId",
                "username"
            ],
            "inputProperties": {
                "accessToken": {
                    "type": "string",
                    "description": "Access token.\n",
                    "secret": true
                },
                "accessTokenSecret": {
                    "type": "string",
                    "description": "Access token secret.\n",
                    "secret": true
                },
                "condition": {
                    "type": "integer",
                    "description": "Condition. `10` BrandNew, `20` LikeNew, `30` VeryGood, `40` Good, `50` Acceptable, `60` Poor.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Condition description.\n"
                },
                "location": {
                    "type": "string",
                    "description": "Purchase location.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Notification name.\n"
                },
                "onReleaseImport": {
                    "type": "boolean",
                    "description": "On release import flag.\n"
                },
                "onUpgrade": {
                    "type": "boolean",
                    "description": "On upgrade flag.\n"
                },
                "requestTokenSecret": {
                    "type": "string",
                    "description": "Request token secret.\n",
                    "secret": true
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                },
                "userId": {
                    "type": "string",
                    "description": "User ID.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username.\n"
                }
            },
            "requiredInputs": [
                "accessToken",
                "accessTokenSecret",
                "condition",
                "name",
                "username"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering NotificationGoodreadsOwnedBooks resources.\n",
                "properties": {
                    "accessToken": {
                        "type": "string",
                        "description": "Access token.\n",
                        "secret": true
                    },
                    "accessTokenSecret": {
                        "type": "string",
                        "description": "Access token secret.\n",
                        "secret": true
                    },
                    "condition": {
                        "type": "integer",
                        "description": "Condition. `10` BrandNew, `20` LikeNew, `30` VeryGood, `40` Good, `50` Acceptable, `60` Poor.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Condition description.\n"
                    },
                    "location": {
                        "type": "string",
                        "description": "Purchase location.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Notification name.\n"
                    },
                    "onReleaseImport": {
                        "type": "boolean",
                        "description": "On release import flag.\n"
                    },
                    "onUpgrade": {
                        "type": "boolean",
                        "description": "On upgrade flag.\n"
                    },
                    "requestTokenSecret": {
                        "type": "string",
                        "description": "Request token secret.\n",
                        "secret": true
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "List of associated tags.\n"
                    },
                    "userId": {
                        "type": "string",
                        "description": "User ID.\n"
                    },
                    "username": {
                        "type": "string",
                        "description": "Username.\n"
                    }
                },
                "type": "object"
            }
        },
        "readarr:Notifications/notificationGotify:NotificationGotify": {
            "description": "\u003c!-- subcategory:Notifications --\u003eNotification Gotify resource.\nFor more information refer to [Notification](https://wiki.servarr.com/readarr/settings#connect) and [Gotify](https://wiki.servarr.com/readarr/supported#gotify).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as readarr from \"@maienm/pulumi-readarr\";\n\nconst example = new readarr.notifications.NotificationGotify(\"example\", {\n    appToken: \"Token\",\n    includeHealthWarnings: false,\n    name: \"Example\",\n    onAuthorDelete: false,\n    onBookDelete: false,\n    onBookFileDelete: false,\n    onBookFileDeleteForUpgrade: false,\n    onDownloadFailure: false,\n    onGrab: false,\n    onHealthIssue: false,\n    onImportFailure: false,\n    onReleaseImport: false,\n    onUpgrade: false,\n    priority: 5,\n    server: \"http://gotify-server.net\",\n});\n```\n```python\nimport pulumi\nimport pulumi_readarr as readarr\n\nexample = readarr.notifications.NotificationGotify(\"example\",\n    app_token=\"Token\",\n    include_health_warnings=False,\n    name=\"Example\",\n    on_author_delete=False,\n    on_book_delete=False,\n    on_book_file_delete=False,\n    on_book_file_delete_for_upgrade=False,\n    on_download_failure=False,\n    on_grab=False,\n    on_health_issue=False,\n    on_import_failure=False,\n    on_release_import=False,\n    on_upgrade=False,\n    priority=5,\n    server=\"http://gotify-server.net\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Readarr = MaienM.Readarr;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Readarr.Notifications.NotificationGotify(\"example\", new()\n    {\n        AppToken = \"Token\",\n        IncludeHealthWarnings = false,\n        Name = \"Example\",\n        OnAuthorDelete = false,\n        OnBookDelete = false,\n        OnBookFileDelete = false,\n        OnBookFileDeleteForUpgrade = false,\n        OnDownloadFailure = false,\n        OnGrab = false,\n        OnHealthIssue = false,\n        OnImportFailure = false,\n        OnReleaseImport = false,\n        OnUpgrade = false,\n        Priority = 5,\n        Server = \"http://gotify-server.net\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/MaienM/pulumi-readarr/sdk/v2/go/readarr/Notifications\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := Notifications.NewNotificationGotify(ctx, \"example\", \u0026Notifications.NotificationGotifyArgs{\n\t\t\tAppToken:                   pulumi.String(\"Token\"),\n\t\t\tIncludeHealthWarnings:      pulumi.Bool(false),\n\t\t\tName:                       pulumi.String(\"Example\"),\n\t\t\tOnAuthorDelete:             pulumi.Bool(false),\n\t\t\tOnBookDelete:               pulumi.Bool(false),\n\t\t\tOnBookFileDelete:           pulumi.Bool(false),\n\t\t\tOnBookFileDeleteForUpgrade: pulumi.Bool(false),\n\t\t\tOnDownloadFailure:          pulumi.Bool(false),\n\t\t\tOnGrab:                     pulumi.Bool(false),\n\t\t\tOnHealthIssue:              pulumi.Bool(false),\n\t\t\tOnImportFailure:            pulumi.Bool(false),\n\t\t\tOnReleaseImport:            pulumi.Bool(false),\n\t\t\tOnUpgrade:                  pulumi.Bool(false),\n\t\t\tPriority:                   pulumi.Int(5),\n\t\t\tServer:                     pulumi.String(\"http://gotify-server.net\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.readarr.Notifications.NotificationGotify;\nimport com.pulumi.readarr.Notifications.NotificationGotifyArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new NotificationGotify(\"example\", NotificationGotifyArgs.builder()        \n            .appToken(\"Token\")\n            .includeHealthWarnings(false)\n            .name(\"Example\")\n            .onAuthorDelete(false)\n            .onBookDelete(false)\n            .onBookFileDelete(false)\n            .onBookFileDeleteForUpgrade(false)\n            .onDownloadFailure(false)\n            .onGrab(false)\n            .onHealthIssue(false)\n            .onImportFailure(false)\n            .onReleaseImport(false)\n            .onUpgrade(false)\n            .priority(5)\n            .server(\"http://gotify-server.net\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: readarr:Notifications:NotificationGotify\n    properties:\n      appToken: Token\n      includeHealthWarnings: false\n      name: Example\n      onAuthorDelete: false\n      onBookDelete: false\n      onBookFileDelete: false\n      onBookFileDeleteForUpgrade: false\n      onDownloadFailure: false\n      onGrab: false\n      onHealthIssue: false\n      onImportFailure: false\n      onReleaseImport: false\n      onUpgrade: false\n      priority: 5\n      server: http://gotify-server.net\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nimport using the API/UI ID\n\n```sh\n $ pulumi import readarr:Notifications/notificationGotify:NotificationGotify example 1\n```\n\n ",
            "properties": {
                "appToken": {
                    "type": "string",
                    "description": "App token.\n",
                    "secret": true
                },
                "includeHealthWarnings": {
                    "type": "boolean",
                    "description": "Include health warnings.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Notification name.\n"
                },
                "onApplicationUpdate": {
                    "type": "boolean",
                    "description": "On application update flag.\n"
                },
                "onAuthorDelete": {
                    "type": "boolean",
                    "description": "On author deleted flag.\n"
                },
                "onBookDelete": {
                    "type": "boolean",
                    "description": "On book delete flag.\n"
                },
                "onBookFileDelete": {
                    "type": "boolean",
                    "description": "On book file delete flag.\n"
                },
                "onBookFileDeleteForUpgrade": {
                    "type": "boolean",
                    "description": "On book file delete for upgrade flag.\n"
                },
                "onDownloadFailure": {
                    "type": "boolean",
                    "description": "On download failure flag.\n"
                },
                "onGrab": {
                    "type": "boolean",
                    "description": "On grab flag.\n"
                },
                "onHealthIssue": {
                    "type": "boolean",
                    "description": "On health issue flag.\n"
                },
                "onImportFailure": {
                    "type": "boolean",
                    "description": "On import failure flag.\n"
                },
                "onReleaseImport": {
                    "type": "boolean",
                    "description": "On release import flag.\n"
                },
                "onUpgrade": {
                    "type": "boolean",
                    "description": "On upgrade flag.\n"
                },
                "priority": {
                    "type": "integer",
                    "description": "Priority. `0` Min, `2` Low, `5` Normal, `8` High.\n"
                },
                "server": {
                    "type": "string",
                    "description": "Server.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                }
            },
            "required": [
                "appToken",
                "includeHealthWarnings",
                "name",
                "onApplicationUpdate",
                "onAuthorDelete",
                "onBookDelete",
                "onBookFileDelete",
                "onBookFileDeleteForUpgrade",
                "onDownloadFailure",
                "onGrab",
                "onHealthIssue",
                "onImportFailure",
                "onReleaseImport",
                "onUpgrade",
                "priority",
                "server",
                "tags"
            ],
            "inputProperties": {
                "appToken": {
                    "type": "string",
                    "description": "App token.\n",
                    "secret": true
                },
                "includeHealthWarnings": {
                    "type": "boolean",
                    "description": "Include health warnings.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Notification name.\n"
                },
                "onApplicationUpdate": {
                    "type": "boolean",
                    "description": "On application update flag.\n"
                },
                "onAuthorDelete": {
                    "type": "boolean",
                    "description": "On author deleted flag.\n"
                },
                "onBookDelete": {
                    "type": "boolean",
                    "description": "On book delete flag.\n"
                },
                "onBookFileDelete": {
                    "type": "boolean",
                    "description": "On book file delete flag.\n"
                },
                "onBookFileDeleteForUpgrade": {
                    "type": "boolean",
                    "description": "On book file delete for upgrade flag.\n"
                },
                "onDownloadFailure": {
                    "type": "boolean",
                    "description": "On download failure flag.\n"
                },
                "onGrab": {
                    "type": "boolean",
                    "description": "On grab flag.\n"
                },
                "onHealthIssue": {
                    "type": "boolean",
                    "description": "On health issue flag.\n"
                },
                "onImportFailure": {
                    "type": "boolean",
                    "description": "On import failure flag.\n"
                },
                "onReleaseImport": {
                    "type": "boolean",
                    "description": "On release import flag.\n"
                },
                "onUpgrade": {
                    "type": "boolean",
                    "description": "On upgrade flag.\n"
                },
                "priority": {
                    "type": "integer",
                    "description": "Priority. `0` Min, `2` Low, `5` Normal, `8` High.\n"
                },
                "server": {
                    "type": "string",
                    "description": "Server.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                }
            },
            "requiredInputs": [
                "appToken",
                "name",
                "priority",
                "server"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering NotificationGotify resources.\n",
                "properties": {
                    "appToken": {
                        "type": "string",
                        "description": "App token.\n",
                        "secret": true
                    },
                    "includeHealthWarnings": {
                        "type": "boolean",
                        "description": "Include health warnings.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Notification name.\n"
                    },
                    "onApplicationUpdate": {
                        "type": "boolean",
                        "description": "On application update flag.\n"
                    },
                    "onAuthorDelete": {
                        "type": "boolean",
                        "description": "On author deleted flag.\n"
                    },
                    "onBookDelete": {
                        "type": "boolean",
                        "description": "On book delete flag.\n"
                    },
                    "onBookFileDelete": {
                        "type": "boolean",
                        "description": "On book file delete flag.\n"
                    },
                    "onBookFileDeleteForUpgrade": {
                        "type": "boolean",
                        "description": "On book file delete for upgrade flag.\n"
                    },
                    "onDownloadFailure": {
                        "type": "boolean",
                        "description": "On download failure flag.\n"
                    },
                    "onGrab": {
                        "type": "boolean",
                        "description": "On grab flag.\n"
                    },
                    "onHealthIssue": {
                        "type": "boolean",
                        "description": "On health issue flag.\n"
                    },
                    "onImportFailure": {
                        "type": "boolean",
                        "description": "On import failure flag.\n"
                    },
                    "onReleaseImport": {
                        "type": "boolean",
                        "description": "On release import flag.\n"
                    },
                    "onUpgrade": {
                        "type": "boolean",
                        "description": "On upgrade flag.\n"
                    },
                    "priority": {
                        "type": "integer",
                        "description": "Priority. `0` Min, `2` Low, `5` Normal, `8` High.\n"
                    },
                    "server": {
                        "type": "string",
                        "description": "Server.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "List of associated tags.\n"
                    }
                },
                "type": "object"
            }
        },
        "readarr:Notifications/notificationJoin:NotificationJoin": {
            "description": "\u003c!-- subcategory:Notifications --\u003eNotification Join resource.\nFor more information refer to [Notification](https://wiki.servarr.com/readarr/settings#connect) and [Join](https://wiki.servarr.com/readarr/supported#join).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as readarr from \"@maienm/pulumi-readarr\";\n\nconst example = new readarr.notifications.NotificationJoin(\"example\", {\n    apiKey: \"Key\",\n    deviceNames: \"device1,device2\",\n    includeHealthWarnings: false,\n    name: \"Example\",\n    onAuthorDelete: true,\n    onBookDelete: false,\n    onBookFileDelete: true,\n    onBookFileDeleteForUpgrade: false,\n    onGrab: false,\n    onHealthIssue: false,\n    onReleaseImport: false,\n    onUpgrade: false,\n    priority: 2,\n});\n```\n```python\nimport pulumi\nimport pulumi_readarr as readarr\n\nexample = readarr.notifications.NotificationJoin(\"example\",\n    api_key=\"Key\",\n    device_names=\"device1,device2\",\n    include_health_warnings=False,\n    name=\"Example\",\n    on_author_delete=True,\n    on_book_delete=False,\n    on_book_file_delete=True,\n    on_book_file_delete_for_upgrade=False,\n    on_grab=False,\n    on_health_issue=False,\n    on_release_import=False,\n    on_upgrade=False,\n    priority=2)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Readarr = MaienM.Readarr;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Readarr.Notifications.NotificationJoin(\"example\", new()\n    {\n        ApiKey = \"Key\",\n        DeviceNames = \"device1,device2\",\n        IncludeHealthWarnings = false,\n        Name = \"Example\",\n        OnAuthorDelete = true,\n        OnBookDelete = false,\n        OnBookFileDelete = true,\n        OnBookFileDeleteForUpgrade = false,\n        OnGrab = false,\n        OnHealthIssue = false,\n        OnReleaseImport = false,\n        OnUpgrade = false,\n        Priority = 2,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/MaienM/pulumi-readarr/sdk/v2/go/readarr/Notifications\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := Notifications.NewNotificationJoin(ctx, \"example\", \u0026Notifications.NotificationJoinArgs{\n\t\t\tApiKey:                     pulumi.String(\"Key\"),\n\t\t\tDeviceNames:                pulumi.String(\"device1,device2\"),\n\t\t\tIncludeHealthWarnings:      pulumi.Bool(false),\n\t\t\tName:                       pulumi.String(\"Example\"),\n\t\t\tOnAuthorDelete:             pulumi.Bool(true),\n\t\t\tOnBookDelete:               pulumi.Bool(false),\n\t\t\tOnBookFileDelete:           pulumi.Bool(true),\n\t\t\tOnBookFileDeleteForUpgrade: pulumi.Bool(false),\n\t\t\tOnGrab:                     pulumi.Bool(false),\n\t\t\tOnHealthIssue:              pulumi.Bool(false),\n\t\t\tOnReleaseImport:            pulumi.Bool(false),\n\t\t\tOnUpgrade:                  pulumi.Bool(false),\n\t\t\tPriority:                   pulumi.Int(2),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.readarr.Notifications.NotificationJoin;\nimport com.pulumi.readarr.Notifications.NotificationJoinArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new NotificationJoin(\"example\", NotificationJoinArgs.builder()        \n            .apiKey(\"Key\")\n            .deviceNames(\"device1,device2\")\n            .includeHealthWarnings(false)\n            .name(\"Example\")\n            .onAuthorDelete(true)\n            .onBookDelete(false)\n            .onBookFileDelete(true)\n            .onBookFileDeleteForUpgrade(false)\n            .onGrab(false)\n            .onHealthIssue(false)\n            .onReleaseImport(false)\n            .onUpgrade(false)\n            .priority(2)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: readarr:Notifications:NotificationJoin\n    properties:\n      apiKey: Key\n      deviceNames: device1,device2\n      includeHealthWarnings: false\n      name: Example\n      onAuthorDelete: true\n      onBookDelete: false\n      onBookFileDelete: true\n      onBookFileDeleteForUpgrade: false\n      onGrab: false\n      onHealthIssue: false\n      onReleaseImport: false\n      onUpgrade: false\n      priority: 2\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nimport using the API/UI ID\n\n```sh\n $ pulumi import readarr:Notifications/notificationJoin:NotificationJoin example 1\n```\n\n ",
            "properties": {
                "apiKey": {
                    "type": "string",
                    "description": "API key.\n",
                    "secret": true
                },
                "deviceNames": {
                    "type": "string",
                    "description": "Device names. Comma separated list.\n"
                },
                "includeHealthWarnings": {
                    "type": "boolean",
                    "description": "Include health warnings.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Notification name.\n"
                },
                "onApplicationUpdate": {
                    "type": "boolean",
                    "description": "On application update flag.\n"
                },
                "onAuthorDelete": {
                    "type": "boolean",
                    "description": "On author deleted flag.\n"
                },
                "onBookDelete": {
                    "type": "boolean",
                    "description": "On book delete flag.\n"
                },
                "onBookFileDelete": {
                    "type": "boolean",
                    "description": "On book file delete flag.\n"
                },
                "onBookFileDeleteForUpgrade": {
                    "type": "boolean",
                    "description": "On book file delete for upgrade flag.\n"
                },
                "onGrab": {
                    "type": "boolean",
                    "description": "On grab flag.\n"
                },
                "onHealthIssue": {
                    "type": "boolean",
                    "description": "On health issue flag.\n"
                },
                "onReleaseImport": {
                    "type": "boolean",
                    "description": "On release import flag.\n"
                },
                "onUpgrade": {
                    "type": "boolean",
                    "description": "On upgrade flag.\n"
                },
                "priority": {
                    "type": "integer",
                    "description": "Priority. `-2` Silent, `-1` Quiet, `0` Normal, `1` High, `2` Emergency.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                }
            },
            "required": [
                "apiKey",
                "deviceNames",
                "includeHealthWarnings",
                "name",
                "onApplicationUpdate",
                "onAuthorDelete",
                "onBookDelete",
                "onBookFileDelete",
                "onBookFileDeleteForUpgrade",
                "onGrab",
                "onHealthIssue",
                "onReleaseImport",
                "onUpgrade",
                "priority",
                "tags"
            ],
            "inputProperties": {
                "apiKey": {
                    "type": "string",
                    "description": "API key.\n",
                    "secret": true
                },
                "deviceNames": {
                    "type": "string",
                    "description": "Device names. Comma separated list.\n"
                },
                "includeHealthWarnings": {
                    "type": "boolean",
                    "description": "Include health warnings.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Notification name.\n"
                },
                "onApplicationUpdate": {
                    "type": "boolean",
                    "description": "On application update flag.\n"
                },
                "onAuthorDelete": {
                    "type": "boolean",
                    "description": "On author deleted flag.\n"
                },
                "onBookDelete": {
                    "type": "boolean",
                    "description": "On book delete flag.\n"
                },
                "onBookFileDelete": {
                    "type": "boolean",
                    "description": "On book file delete flag.\n"
                },
                "onBookFileDeleteForUpgrade": {
                    "type": "boolean",
                    "description": "On book file delete for upgrade flag.\n"
                },
                "onGrab": {
                    "type": "boolean",
                    "description": "On grab flag.\n"
                },
                "onHealthIssue": {
                    "type": "boolean",
                    "description": "On health issue flag.\n"
                },
                "onReleaseImport": {
                    "type": "boolean",
                    "description": "On release import flag.\n"
                },
                "onUpgrade": {
                    "type": "boolean",
                    "description": "On upgrade flag.\n"
                },
                "priority": {
                    "type": "integer",
                    "description": "Priority. `-2` Silent, `-1` Quiet, `0` Normal, `1` High, `2` Emergency.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                }
            },
            "requiredInputs": [
                "apiKey",
                "deviceNames",
                "name",
                "priority"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering NotificationJoin resources.\n",
                "properties": {
                    "apiKey": {
                        "type": "string",
                        "description": "API key.\n",
                        "secret": true
                    },
                    "deviceNames": {
                        "type": "string",
                        "description": "Device names. Comma separated list.\n"
                    },
                    "includeHealthWarnings": {
                        "type": "boolean",
                        "description": "Include health warnings.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Notification name.\n"
                    },
                    "onApplicationUpdate": {
                        "type": "boolean",
                        "description": "On application update flag.\n"
                    },
                    "onAuthorDelete": {
                        "type": "boolean",
                        "description": "On author deleted flag.\n"
                    },
                    "onBookDelete": {
                        "type": "boolean",
                        "description": "On book delete flag.\n"
                    },
                    "onBookFileDelete": {
                        "type": "boolean",
                        "description": "On book file delete flag.\n"
                    },
                    "onBookFileDeleteForUpgrade": {
                        "type": "boolean",
                        "description": "On book file delete for upgrade flag.\n"
                    },
                    "onGrab": {
                        "type": "boolean",
                        "description": "On grab flag.\n"
                    },
                    "onHealthIssue": {
                        "type": "boolean",
                        "description": "On health issue flag.\n"
                    },
                    "onReleaseImport": {
                        "type": "boolean",
                        "description": "On release import flag.\n"
                    },
                    "onUpgrade": {
                        "type": "boolean",
                        "description": "On upgrade flag.\n"
                    },
                    "priority": {
                        "type": "integer",
                        "description": "Priority. `-2` Silent, `-1` Quiet, `0` Normal, `1` High, `2` Emergency.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "List of associated tags.\n"
                    }
                },
                "type": "object"
            }
        },
        "readarr:Notifications/notificationKavita:NotificationKavita": {
            "description": "\u003c!-- subcategory:Notifications --\u003eNotification Kavita resource.\nFor more information refer to [Notification](https://wiki.servarr.com/readarr/settings#connect) and [Kavita](https://wiki.servarr.com/readarr/supported#kavita).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as readarr from \"@maienm/pulumi-readarr\";\n\nconst example = new readarr.notifications.NotificationKavita(\"example\", {\n    apiKey: \"APIKey\",\n    host: \"kavita.local\",\n    name: \"Example\",\n    notify: true,\n    onBookDelete: false,\n    onBookFileDelete: false,\n    onBookFileDeleteForUpgrade: false,\n    onBookRetag: false,\n    onReleaseImport: false,\n    onUpgrade: false,\n    port: 4040,\n});\n```\n```python\nimport pulumi\nimport pulumi_readarr as readarr\n\nexample = readarr.notifications.NotificationKavita(\"example\",\n    api_key=\"APIKey\",\n    host=\"kavita.local\",\n    name=\"Example\",\n    notify=True,\n    on_book_delete=False,\n    on_book_file_delete=False,\n    on_book_file_delete_for_upgrade=False,\n    on_book_retag=False,\n    on_release_import=False,\n    on_upgrade=False,\n    port=4040)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Readarr = MaienM.Readarr;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Readarr.Notifications.NotificationKavita(\"example\", new()\n    {\n        ApiKey = \"APIKey\",\n        Host = \"kavita.local\",\n        Name = \"Example\",\n        Notify = true,\n        OnBookDelete = false,\n        OnBookFileDelete = false,\n        OnBookFileDeleteForUpgrade = false,\n        OnBookRetag = false,\n        OnReleaseImport = false,\n        OnUpgrade = false,\n        Port = 4040,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/MaienM/pulumi-readarr/sdk/v2/go/readarr/Notifications\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := Notifications.NewNotificationKavita(ctx, \"example\", \u0026Notifications.NotificationKavitaArgs{\n\t\t\tApiKey:                     pulumi.String(\"APIKey\"),\n\t\t\tHost:                       pulumi.String(\"kavita.local\"),\n\t\t\tName:                       pulumi.String(\"Example\"),\n\t\t\tNotify:                     pulumi.Bool(true),\n\t\t\tOnBookDelete:               pulumi.Bool(false),\n\t\t\tOnBookFileDelete:           pulumi.Bool(false),\n\t\t\tOnBookFileDeleteForUpgrade: pulumi.Bool(false),\n\t\t\tOnBookRetag:                pulumi.Bool(false),\n\t\t\tOnReleaseImport:            pulumi.Bool(false),\n\t\t\tOnUpgrade:                  pulumi.Bool(false),\n\t\t\tPort:                       pulumi.Int(4040),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.readarr.Notifications.NotificationKavita;\nimport com.pulumi.readarr.Notifications.NotificationKavitaArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new NotificationKavita(\"example\", NotificationKavitaArgs.builder()        \n            .apiKey(\"APIKey\")\n            .host(\"kavita.local\")\n            .name(\"Example\")\n            .notify(true)\n            .onBookDelete(false)\n            .onBookFileDelete(false)\n            .onBookFileDeleteForUpgrade(false)\n            .onBookRetag(false)\n            .onReleaseImport(false)\n            .onUpgrade(false)\n            .port(4040)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: readarr:Notifications:NotificationKavita\n    properties:\n      apiKey: APIKey\n      host: kavita.local\n      name: Example\n      notify: true\n      onBookDelete: false\n      onBookFileDelete: false\n      onBookFileDeleteForUpgrade: false\n      onBookRetag: false\n      onReleaseImport: false\n      onUpgrade: false\n      port: 4040\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nimport using the API/UI ID\n\n```sh\n $ pulumi import readarr:Notifications/notificationKavita:NotificationKavita example 1\n```\n\n ",
            "properties": {
                "apiKey": {
                    "type": "string",
                    "description": "API key.\n",
                    "secret": true
                },
                "host": {
                    "type": "string",
                    "description": "Host.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Notification name.\n"
                },
                "notify": {
                    "type": "boolean",
                    "description": "Update library.\n"
                },
                "onBookDelete": {
                    "type": "boolean",
                    "description": "On book delete flag.\n"
                },
                "onBookFileDelete": {
                    "type": "boolean",
                    "description": "On book file delete flag.\n"
                },
                "onBookFileDeleteForUpgrade": {
                    "type": "boolean",
                    "description": "On book file delete for upgrade flag.\n"
                },
                "onBookRetag": {
                    "type": "boolean",
                    "description": "On book retag flag.\n"
                },
                "onReleaseImport": {
                    "type": "boolean",
                    "description": "On release import flag.\n"
                },
                "onUpgrade": {
                    "type": "boolean",
                    "description": "On upgrade flag.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "Port.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                },
                "useSsl": {
                    "type": "boolean",
                    "description": "Use SSL flag.\n"
                }
            },
            "required": [
                "apiKey",
                "host",
                "name",
                "notify",
                "onBookDelete",
                "onBookFileDelete",
                "onBookFileDeleteForUpgrade",
                "onBookRetag",
                "onReleaseImport",
                "onUpgrade",
                "port",
                "tags",
                "useSsl"
            ],
            "inputProperties": {
                "apiKey": {
                    "type": "string",
                    "description": "API key.\n",
                    "secret": true
                },
                "host": {
                    "type": "string",
                    "description": "Host.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Notification name.\n"
                },
                "notify": {
                    "type": "boolean",
                    "description": "Update library.\n"
                },
                "onBookDelete": {
                    "type": "boolean",
                    "description": "On book delete flag.\n"
                },
                "onBookFileDelete": {
                    "type": "boolean",
                    "description": "On book file delete flag.\n"
                },
                "onBookFileDeleteForUpgrade": {
                    "type": "boolean",
                    "description": "On book file delete for upgrade flag.\n"
                },
                "onBookRetag": {
                    "type": "boolean",
                    "description": "On book retag flag.\n"
                },
                "onReleaseImport": {
                    "type": "boolean",
                    "description": "On release import flag.\n"
                },
                "onUpgrade": {
                    "type": "boolean",
                    "description": "On upgrade flag.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "Port.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                },
                "useSsl": {
                    "type": "boolean",
                    "description": "Use SSL flag.\n"
                }
            },
            "requiredInputs": [
                "apiKey",
                "host",
                "name",
                "notify",
                "port"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering NotificationKavita resources.\n",
                "properties": {
                    "apiKey": {
                        "type": "string",
                        "description": "API key.\n",
                        "secret": true
                    },
                    "host": {
                        "type": "string",
                        "description": "Host.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Notification name.\n"
                    },
                    "notify": {
                        "type": "boolean",
                        "description": "Update library.\n"
                    },
                    "onBookDelete": {
                        "type": "boolean",
                        "description": "On book delete flag.\n"
                    },
                    "onBookFileDelete": {
                        "type": "boolean",
                        "description": "On book file delete flag.\n"
                    },
                    "onBookFileDeleteForUpgrade": {
                        "type": "boolean",
                        "description": "On book file delete for upgrade flag.\n"
                    },
                    "onBookRetag": {
                        "type": "boolean",
                        "description": "On book retag flag.\n"
                    },
                    "onReleaseImport": {
                        "type": "boolean",
                        "description": "On release import flag.\n"
                    },
                    "onUpgrade": {
                        "type": "boolean",
                        "description": "On upgrade flag.\n"
                    },
                    "port": {
                        "type": "integer",
                        "description": "Port.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "List of associated tags.\n"
                    },
                    "useSsl": {
                        "type": "boolean",
                        "description": "Use SSL flag.\n"
                    }
                },
                "type": "object"
            }
        },
        "readarr:Notifications/notificationMailgun:NotificationMailgun": {
            "description": "\u003c!-- subcategory:Notifications --\u003eNotification Mailgun resource.\nFor more information refer to [Notification](https://wiki.servarr.com/readarr/settings#connect) and [Mailgun](https://wiki.servarr.com/readarr/supported#mailgun).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as readarr from \"@maienm/pulumi-readarr\";\n\nconst example = new readarr.notifications.NotificationMailgun(\"example\", {\n    apiKey: \"APIkey\",\n    from: \"from_mailgun@example.com\",\n    includeHealthWarnings: false,\n    name: \"Example\",\n    onAuthorDelete: false,\n    onBookDelete: false,\n    onBookFileDelete: true,\n    onBookFileDeleteForUpgrade: true,\n    onGrab: false,\n    onHealthIssue: false,\n    onReleaseImport: false,\n    onUpgrade: false,\n    recipients: [\n        \"user1@example.com\",\n        \"user2@example.com\",\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_readarr as readarr\n\nexample = readarr.notifications.NotificationMailgun(\"example\",\n    api_key=\"APIkey\",\n    from_=\"from_mailgun@example.com\",\n    include_health_warnings=False,\n    name=\"Example\",\n    on_author_delete=False,\n    on_book_delete=False,\n    on_book_file_delete=True,\n    on_book_file_delete_for_upgrade=True,\n    on_grab=False,\n    on_health_issue=False,\n    on_release_import=False,\n    on_upgrade=False,\n    recipients=[\n        \"user1@example.com\",\n        \"user2@example.com\",\n    ])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Readarr = MaienM.Readarr;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Readarr.Notifications.NotificationMailgun(\"example\", new()\n    {\n        ApiKey = \"APIkey\",\n        From = \"from_mailgun@example.com\",\n        IncludeHealthWarnings = false,\n        Name = \"Example\",\n        OnAuthorDelete = false,\n        OnBookDelete = false,\n        OnBookFileDelete = true,\n        OnBookFileDeleteForUpgrade = true,\n        OnGrab = false,\n        OnHealthIssue = false,\n        OnReleaseImport = false,\n        OnUpgrade = false,\n        Recipients = new[]\n        {\n            \"user1@example.com\",\n            \"user2@example.com\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/MaienM/pulumi-readarr/sdk/v2/go/readarr/Notifications\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := Notifications.NewNotificationMailgun(ctx, \"example\", \u0026Notifications.NotificationMailgunArgs{\n\t\t\tApiKey:                     pulumi.String(\"APIkey\"),\n\t\t\tFrom:                       pulumi.String(\"from_mailgun@example.com\"),\n\t\t\tIncludeHealthWarnings:      pulumi.Bool(false),\n\t\t\tName:                       pulumi.String(\"Example\"),\n\t\t\tOnAuthorDelete:             pulumi.Bool(false),\n\t\t\tOnBookDelete:               pulumi.Bool(false),\n\t\t\tOnBookFileDelete:           pulumi.Bool(true),\n\t\t\tOnBookFileDeleteForUpgrade: pulumi.Bool(true),\n\t\t\tOnGrab:                     pulumi.Bool(false),\n\t\t\tOnHealthIssue:              pulumi.Bool(false),\n\t\t\tOnReleaseImport:            pulumi.Bool(false),\n\t\t\tOnUpgrade:                  pulumi.Bool(false),\n\t\t\tRecipients: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"user1@example.com\"),\n\t\t\t\tpulumi.String(\"user2@example.com\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.readarr.Notifications.NotificationMailgun;\nimport com.pulumi.readarr.Notifications.NotificationMailgunArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new NotificationMailgun(\"example\", NotificationMailgunArgs.builder()        \n            .apiKey(\"APIkey\")\n            .from(\"from_mailgun@example.com\")\n            .includeHealthWarnings(false)\n            .name(\"Example\")\n            .onAuthorDelete(false)\n            .onBookDelete(false)\n            .onBookFileDelete(true)\n            .onBookFileDeleteForUpgrade(true)\n            .onGrab(false)\n            .onHealthIssue(false)\n            .onReleaseImport(false)\n            .onUpgrade(false)\n            .recipients(            \n                \"user1@example.com\",\n                \"user2@example.com\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: readarr:Notifications:NotificationMailgun\n    properties:\n      apiKey: APIkey\n      from: from_mailgun@example.com\n      includeHealthWarnings: false\n      name: Example\n      onAuthorDelete: false\n      onBookDelete: false\n      onBookFileDelete: true\n      onBookFileDeleteForUpgrade: true\n      onGrab: false\n      onHealthIssue: false\n      onReleaseImport: false\n      onUpgrade: false\n      recipients:\n        - user1@example.com\n        - user2@example.com\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nimport using the API/UI ID\n\n```sh\n $ pulumi import readarr:Notifications/notificationMailgun:NotificationMailgun example 1\n```\n\n ",
            "properties": {
                "apiKey": {
                    "type": "string",
                    "description": "API Key.\n",
                    "secret": true
                },
                "from": {
                    "type": "string",
                    "description": "From.\n"
                },
                "includeHealthWarnings": {
                    "type": "boolean",
                    "description": "Include health warnings.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Notification name.\n"
                },
                "onApplicationUpdate": {
                    "type": "boolean",
                    "description": "On application update flag.\n"
                },
                "onAuthorDelete": {
                    "type": "boolean",
                    "description": "On author deleted flag.\n"
                },
                "onBookDelete": {
                    "type": "boolean",
                    "description": "On book delete flag.\n"
                },
                "onBookFileDelete": {
                    "type": "boolean",
                    "description": "On book file delete flag.\n"
                },
                "onBookFileDeleteForUpgrade": {
                    "type": "boolean",
                    "description": "On book file delete for upgrade flag.\n"
                },
                "onGrab": {
                    "type": "boolean",
                    "description": "On grab flag.\n"
                },
                "onHealthIssue": {
                    "type": "boolean",
                    "description": "On health issue flag.\n"
                },
                "onReleaseImport": {
                    "type": "boolean",
                    "description": "On release import flag.\n"
                },
                "onUpgrade": {
                    "type": "boolean",
                    "description": "On upgrade flag.\n"
                },
                "recipients": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Recipients.\n"
                },
                "senderDomain": {
                    "type": "string",
                    "description": "Sender domain.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                },
                "useEuEndpoint": {
                    "type": "boolean",
                    "description": "Use EU endpoint flag.\n"
                }
            },
            "required": [
                "apiKey",
                "from",
                "includeHealthWarnings",
                "name",
                "onApplicationUpdate",
                "onAuthorDelete",
                "onBookDelete",
                "onBookFileDelete",
                "onBookFileDeleteForUpgrade",
                "onGrab",
                "onHealthIssue",
                "onReleaseImport",
                "onUpgrade",
                "recipients",
                "senderDomain",
                "tags",
                "useEuEndpoint"
            ],
            "inputProperties": {
                "apiKey": {
                    "type": "string",
                    "description": "API Key.\n",
                    "secret": true
                },
                "from": {
                    "type": "string",
                    "description": "From.\n"
                },
                "includeHealthWarnings": {
                    "type": "boolean",
                    "description": "Include health warnings.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Notification name.\n"
                },
                "onApplicationUpdate": {
                    "type": "boolean",
                    "description": "On application update flag.\n"
                },
                "onAuthorDelete": {
                    "type": "boolean",
                    "description": "On author deleted flag.\n"
                },
                "onBookDelete": {
                    "type": "boolean",
                    "description": "On book delete flag.\n"
                },
                "onBookFileDelete": {
                    "type": "boolean",
                    "description": "On book file delete flag.\n"
                },
                "onBookFileDeleteForUpgrade": {
                    "type": "boolean",
                    "description": "On book file delete for upgrade flag.\n"
                },
                "onGrab": {
                    "type": "boolean",
                    "description": "On grab flag.\n"
                },
                "onHealthIssue": {
                    "type": "boolean",
                    "description": "On health issue flag.\n"
                },
                "onReleaseImport": {
                    "type": "boolean",
                    "description": "On release import flag.\n"
                },
                "onUpgrade": {
                    "type": "boolean",
                    "description": "On upgrade flag.\n"
                },
                "recipients": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Recipients.\n"
                },
                "senderDomain": {
                    "type": "string",
                    "description": "Sender domain.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                },
                "useEuEndpoint": {
                    "type": "boolean",
                    "description": "Use EU endpoint flag.\n"
                }
            },
            "requiredInputs": [
                "apiKey",
                "from",
                "name",
                "recipients"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering NotificationMailgun resources.\n",
                "properties": {
                    "apiKey": {
                        "type": "string",
                        "description": "API Key.\n",
                        "secret": true
                    },
                    "from": {
                        "type": "string",
                        "description": "From.\n"
                    },
                    "includeHealthWarnings": {
                        "type": "boolean",
                        "description": "Include health warnings.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Notification name.\n"
                    },
                    "onApplicationUpdate": {
                        "type": "boolean",
                        "description": "On application update flag.\n"
                    },
                    "onAuthorDelete": {
                        "type": "boolean",
                        "description": "On author deleted flag.\n"
                    },
                    "onBookDelete": {
                        "type": "boolean",
                        "description": "On book delete flag.\n"
                    },
                    "onBookFileDelete": {
                        "type": "boolean",
                        "description": "On book file delete flag.\n"
                    },
                    "onBookFileDeleteForUpgrade": {
                        "type": "boolean",
                        "description": "On book file delete for upgrade flag.\n"
                    },
                    "onGrab": {
                        "type": "boolean",
                        "description": "On grab flag.\n"
                    },
                    "onHealthIssue": {
                        "type": "boolean",
                        "description": "On health issue flag.\n"
                    },
                    "onReleaseImport": {
                        "type": "boolean",
                        "description": "On release import flag.\n"
                    },
                    "onUpgrade": {
                        "type": "boolean",
                        "description": "On upgrade flag.\n"
                    },
                    "recipients": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Recipients.\n"
                    },
                    "senderDomain": {
                        "type": "string",
                        "description": "Sender domain.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "List of associated tags.\n"
                    },
                    "useEuEndpoint": {
                        "type": "boolean",
                        "description": "Use EU endpoint flag.\n"
                    }
                },
                "type": "object"
            }
        },
        "readarr:Notifications/notificationNotifiarr:NotificationNotifiarr": {
            "description": "\u003c!-- subcategory:Notifications --\u003eNotification Notifiarr resource.\nFor more information refer to [Notification](https://wiki.servarr.com/readarr/settings#connect) and [Notifiarr](https://wiki.servarr.com/readarr/supported#notifiarr).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as readarr from \"@maienm/pulumi-readarr\";\n\nconst example = new readarr.notifications.NotificationNotifiarr(\"example\", {\n    apiKey: \"Token\",\n    includeHealthWarnings: false,\n    name: \"Example\",\n    onAuthorDelete: true,\n    onBookDelete: false,\n    onBookFileDelete: true,\n    onBookFileDeleteForUpgrade: false,\n    onGrab: false,\n    onHealthIssue: false,\n    onReleaseImport: false,\n    onUpgrade: false,\n});\n```\n```python\nimport pulumi\nimport pulumi_readarr as readarr\n\nexample = readarr.notifications.NotificationNotifiarr(\"example\",\n    api_key=\"Token\",\n    include_health_warnings=False,\n    name=\"Example\",\n    on_author_delete=True,\n    on_book_delete=False,\n    on_book_file_delete=True,\n    on_book_file_delete_for_upgrade=False,\n    on_grab=False,\n    on_health_issue=False,\n    on_release_import=False,\n    on_upgrade=False)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Readarr = MaienM.Readarr;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Readarr.Notifications.NotificationNotifiarr(\"example\", new()\n    {\n        ApiKey = \"Token\",\n        IncludeHealthWarnings = false,\n        Name = \"Example\",\n        OnAuthorDelete = true,\n        OnBookDelete = false,\n        OnBookFileDelete = true,\n        OnBookFileDeleteForUpgrade = false,\n        OnGrab = false,\n        OnHealthIssue = false,\n        OnReleaseImport = false,\n        OnUpgrade = false,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/MaienM/pulumi-readarr/sdk/v2/go/readarr/Notifications\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := Notifications.NewNotificationNotifiarr(ctx, \"example\", \u0026Notifications.NotificationNotifiarrArgs{\n\t\t\tApiKey:                     pulumi.String(\"Token\"),\n\t\t\tIncludeHealthWarnings:      pulumi.Bool(false),\n\t\t\tName:                       pulumi.String(\"Example\"),\n\t\t\tOnAuthorDelete:             pulumi.Bool(true),\n\t\t\tOnBookDelete:               pulumi.Bool(false),\n\t\t\tOnBookFileDelete:           pulumi.Bool(true),\n\t\t\tOnBookFileDeleteForUpgrade: pulumi.Bool(false),\n\t\t\tOnGrab:                     pulumi.Bool(false),\n\t\t\tOnHealthIssue:              pulumi.Bool(false),\n\t\t\tOnReleaseImport:            pulumi.Bool(false),\n\t\t\tOnUpgrade:                  pulumi.Bool(false),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.readarr.Notifications.NotificationNotifiarr;\nimport com.pulumi.readarr.Notifications.NotificationNotifiarrArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new NotificationNotifiarr(\"example\", NotificationNotifiarrArgs.builder()        \n            .apiKey(\"Token\")\n            .includeHealthWarnings(false)\n            .name(\"Example\")\n            .onAuthorDelete(true)\n            .onBookDelete(false)\n            .onBookFileDelete(true)\n            .onBookFileDeleteForUpgrade(false)\n            .onGrab(false)\n            .onHealthIssue(false)\n            .onReleaseImport(false)\n            .onUpgrade(false)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: readarr:Notifications:NotificationNotifiarr\n    properties:\n      apiKey: Token\n      includeHealthWarnings: false\n      name: Example\n      onAuthorDelete: true\n      onBookDelete: false\n      onBookFileDelete: true\n      onBookFileDeleteForUpgrade: false\n      onGrab: false\n      onHealthIssue: false\n      onReleaseImport: false\n      onUpgrade: false\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nimport using the API/UI ID\n\n```sh\n $ pulumi import readarr:Notifications/notificationNotifiarr:NotificationNotifiarr example 1\n```\n\n ",
            "properties": {
                "apiKey": {
                    "type": "string",
                    "description": "API Key.\n",
                    "secret": true
                },
                "includeHealthWarnings": {
                    "type": "boolean",
                    "description": "Include health warnings.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Notification name.\n"
                },
                "onApplicationUpdate": {
                    "type": "boolean",
                    "description": "On application update flag.\n"
                },
                "onAuthorDelete": {
                    "type": "boolean",
                    "description": "On author deleted flag.\n"
                },
                "onBookDelete": {
                    "type": "boolean",
                    "description": "On book delete flag.\n"
                },
                "onBookFileDelete": {
                    "type": "boolean",
                    "description": "On book file delete flag.\n"
                },
                "onBookFileDeleteForUpgrade": {
                    "type": "boolean",
                    "description": "On book file delete for upgrade flag.\n"
                },
                "onGrab": {
                    "type": "boolean",
                    "description": "On grab flag.\n"
                },
                "onHealthIssue": {
                    "type": "boolean",
                    "description": "On health issue flag.\n"
                },
                "onReleaseImport": {
                    "type": "boolean",
                    "description": "On release import flag.\n"
                },
                "onUpgrade": {
                    "type": "boolean",
                    "description": "On upgrade flag.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                }
            },
            "required": [
                "apiKey",
                "includeHealthWarnings",
                "name",
                "onApplicationUpdate",
                "onAuthorDelete",
                "onBookDelete",
                "onBookFileDelete",
                "onBookFileDeleteForUpgrade",
                "onGrab",
                "onHealthIssue",
                "onReleaseImport",
                "onUpgrade",
                "tags"
            ],
            "inputProperties": {
                "apiKey": {
                    "type": "string",
                    "description": "API Key.\n",
                    "secret": true
                },
                "includeHealthWarnings": {
                    "type": "boolean",
                    "description": "Include health warnings.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Notification name.\n"
                },
                "onApplicationUpdate": {
                    "type": "boolean",
                    "description": "On application update flag.\n"
                },
                "onAuthorDelete": {
                    "type": "boolean",
                    "description": "On author deleted flag.\n"
                },
                "onBookDelete": {
                    "type": "boolean",
                    "description": "On book delete flag.\n"
                },
                "onBookFileDelete": {
                    "type": "boolean",
                    "description": "On book file delete flag.\n"
                },
                "onBookFileDeleteForUpgrade": {
                    "type": "boolean",
                    "description": "On book file delete for upgrade flag.\n"
                },
                "onGrab": {
                    "type": "boolean",
                    "description": "On grab flag.\n"
                },
                "onHealthIssue": {
                    "type": "boolean",
                    "description": "On health issue flag.\n"
                },
                "onReleaseImport": {
                    "type": "boolean",
                    "description": "On release import flag.\n"
                },
                "onUpgrade": {
                    "type": "boolean",
                    "description": "On upgrade flag.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                }
            },
            "requiredInputs": [
                "apiKey",
                "name"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering NotificationNotifiarr resources.\n",
                "properties": {
                    "apiKey": {
                        "type": "string",
                        "description": "API Key.\n",
                        "secret": true
                    },
                    "includeHealthWarnings": {
                        "type": "boolean",
                        "description": "Include health warnings.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Notification name.\n"
                    },
                    "onApplicationUpdate": {
                        "type": "boolean",
                        "description": "On application update flag.\n"
                    },
                    "onAuthorDelete": {
                        "type": "boolean",
                        "description": "On author deleted flag.\n"
                    },
                    "onBookDelete": {
                        "type": "boolean",
                        "description": "On book delete flag.\n"
                    },
                    "onBookFileDelete": {
                        "type": "boolean",
                        "description": "On book file delete flag.\n"
                    },
                    "onBookFileDeleteForUpgrade": {
                        "type": "boolean",
                        "description": "On book file delete for upgrade flag.\n"
                    },
                    "onGrab": {
                        "type": "boolean",
                        "description": "On grab flag.\n"
                    },
                    "onHealthIssue": {
                        "type": "boolean",
                        "description": "On health issue flag.\n"
                    },
                    "onReleaseImport": {
                        "type": "boolean",
                        "description": "On release import flag.\n"
                    },
                    "onUpgrade": {
                        "type": "boolean",
                        "description": "On upgrade flag.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "List of associated tags.\n"
                    }
                },
                "type": "object"
            }
        },
        "readarr:Notifications/notificationNtfy:NotificationNtfy": {
            "description": "\u003c!-- subcategory:Notifications --\u003eNotification Ntfy resource.\nFor more information refer to [Notification](https://wiki.servarr.com/readarr/settings#connect) and [Ntfy](https://wiki.servarr.com/readarr/supported#ntfy).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as readarr from \"@maienm/pulumi-readarr\";\n\nconst example = new readarr.notifications.NotificationNtfy(\"example\", {\n    fieldTags: [\n        \"warning\",\n        \"skull\",\n    ],\n    includeHealthWarnings: false,\n    name: \"Example\",\n    onAuthorDelete: false,\n    onBookDelete: false,\n    onBookFileDelete: false,\n    onBookFileDeleteForUpgrade: true,\n    onGrab: false,\n    onHealthIssue: false,\n    onReleaseImport: true,\n    onUpgrade: false,\n    password: \"Pass\",\n    priority: 1,\n    serverUrl: \"https://ntfy.sh\",\n    topics: [\n        \"Topic1234\",\n        \"Topic4321\",\n    ],\n    username: \"User\",\n});\n```\n```python\nimport pulumi\nimport pulumi_readarr as readarr\n\nexample = readarr.notifications.NotificationNtfy(\"example\",\n    field_tags=[\n        \"warning\",\n        \"skull\",\n    ],\n    include_health_warnings=False,\n    name=\"Example\",\n    on_author_delete=False,\n    on_book_delete=False,\n    on_book_file_delete=False,\n    on_book_file_delete_for_upgrade=True,\n    on_grab=False,\n    on_health_issue=False,\n    on_release_import=True,\n    on_upgrade=False,\n    password=\"Pass\",\n    priority=1,\n    server_url=\"https://ntfy.sh\",\n    topics=[\n        \"Topic1234\",\n        \"Topic4321\",\n    ],\n    username=\"User\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Readarr = MaienM.Readarr;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Readarr.Notifications.NotificationNtfy(\"example\", new()\n    {\n        FieldTags = new[]\n        {\n            \"warning\",\n            \"skull\",\n        },\n        IncludeHealthWarnings = false,\n        Name = \"Example\",\n        OnAuthorDelete = false,\n        OnBookDelete = false,\n        OnBookFileDelete = false,\n        OnBookFileDeleteForUpgrade = true,\n        OnGrab = false,\n        OnHealthIssue = false,\n        OnReleaseImport = true,\n        OnUpgrade = false,\n        Password = \"Pass\",\n        Priority = 1,\n        ServerUrl = \"https://ntfy.sh\",\n        Topics = new[]\n        {\n            \"Topic1234\",\n            \"Topic4321\",\n        },\n        Username = \"User\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/MaienM/pulumi-readarr/sdk/v2/go/readarr/Notifications\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := Notifications.NewNotificationNtfy(ctx, \"example\", \u0026Notifications.NotificationNtfyArgs{\n\t\t\tFieldTags: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"warning\"),\n\t\t\t\tpulumi.String(\"skull\"),\n\t\t\t},\n\t\t\tIncludeHealthWarnings:      pulumi.Bool(false),\n\t\t\tName:                       pulumi.String(\"Example\"),\n\t\t\tOnAuthorDelete:             pulumi.Bool(false),\n\t\t\tOnBookDelete:               pulumi.Bool(false),\n\t\t\tOnBookFileDelete:           pulumi.Bool(false),\n\t\t\tOnBookFileDeleteForUpgrade: pulumi.Bool(true),\n\t\t\tOnGrab:                     pulumi.Bool(false),\n\t\t\tOnHealthIssue:              pulumi.Bool(false),\n\t\t\tOnReleaseImport:            pulumi.Bool(true),\n\t\t\tOnUpgrade:                  pulumi.Bool(false),\n\t\t\tPassword:                   pulumi.String(\"Pass\"),\n\t\t\tPriority:                   pulumi.Int(1),\n\t\t\tServerUrl:                  pulumi.String(\"https://ntfy.sh\"),\n\t\t\tTopics: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"Topic1234\"),\n\t\t\t\tpulumi.String(\"Topic4321\"),\n\t\t\t},\n\t\t\tUsername: pulumi.String(\"User\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.readarr.Notifications.NotificationNtfy;\nimport com.pulumi.readarr.Notifications.NotificationNtfyArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new NotificationNtfy(\"example\", NotificationNtfyArgs.builder()        \n            .fieldTags(            \n                \"warning\",\n                \"skull\")\n            .includeHealthWarnings(false)\n            .name(\"Example\")\n            .onAuthorDelete(false)\n            .onBookDelete(false)\n            .onBookFileDelete(false)\n            .onBookFileDeleteForUpgrade(true)\n            .onGrab(false)\n            .onHealthIssue(false)\n            .onReleaseImport(true)\n            .onUpgrade(false)\n            .password(\"Pass\")\n            .priority(1)\n            .serverUrl(\"https://ntfy.sh\")\n            .topics(            \n                \"Topic1234\",\n                \"Topic4321\")\n            .username(\"User\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: readarr:Notifications:NotificationNtfy\n    properties:\n      fieldTags:\n        - warning\n        - skull\n      includeHealthWarnings: false\n      name: Example\n      onAuthorDelete: false\n      onBookDelete: false\n      onBookFileDelete: false\n      onBookFileDeleteForUpgrade: true\n      onGrab: false\n      onHealthIssue: false\n      onReleaseImport: true\n      onUpgrade: false\n      password: Pass\n      priority: 1\n      serverUrl: https://ntfy.sh\n      topics:\n        - Topic1234\n        - Topic4321\n      username: User\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nimport using the API/UI ID\n\n```sh\n $ pulumi import readarr:Notifications/notificationNtfy:NotificationNtfy example 1\n```\n\n ",
            "properties": {
                "clickUrl": {
                    "type": "string",
                    "description": "Click URL.\n"
                },
                "fieldTags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags and emojis.\n"
                },
                "includeHealthWarnings": {
                    "type": "boolean",
                    "description": "Include health warnings.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Notification name.\n"
                },
                "onApplicationUpdate": {
                    "type": "boolean",
                    "description": "On application update flag.\n"
                },
                "onAuthorDelete": {
                    "type": "boolean",
                    "description": "On author deleted flag.\n"
                },
                "onBookDelete": {
                    "type": "boolean",
                    "description": "On book delete flag.\n"
                },
                "onBookFileDelete": {
                    "type": "boolean",
                    "description": "On book file delete flag.\n"
                },
                "onBookFileDeleteForUpgrade": {
                    "type": "boolean",
                    "description": "On book file delete for upgrade flag.\n"
                },
                "onGrab": {
                    "type": "boolean",
                    "description": "On grab flag.\n"
                },
                "onHealthIssue": {
                    "type": "boolean",
                    "description": "On health issue flag.\n"
                },
                "onReleaseImport": {
                    "type": "boolean",
                    "description": "On release import flag.\n"
                },
                "onUpgrade": {
                    "type": "boolean",
                    "description": "On upgrade flag.\n"
                },
                "password": {
                    "type": "string",
                    "description": "Password.\n",
                    "secret": true
                },
                "priority": {
                    "type": "integer",
                    "description": "Priority. `1` Min, `2` Low, `3` Default, `4` High, `5` Max.\n"
                },
                "serverUrl": {
                    "type": "string",
                    "description": "Server URL.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                },
                "topics": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Topics.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username.\n"
                }
            },
            "required": [
                "clickUrl",
                "fieldTags",
                "includeHealthWarnings",
                "name",
                "onApplicationUpdate",
                "onAuthorDelete",
                "onBookDelete",
                "onBookFileDelete",
                "onBookFileDeleteForUpgrade",
                "onGrab",
                "onHealthIssue",
                "onReleaseImport",
                "onUpgrade",
                "password",
                "priority",
                "serverUrl",
                "tags",
                "topics",
                "username"
            ],
            "inputProperties": {
                "clickUrl": {
                    "type": "string",
                    "description": "Click URL.\n"
                },
                "fieldTags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Tags and emojis.\n"
                },
                "includeHealthWarnings": {
                    "type": "boolean",
                    "description": "Include health warnings.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Notification name.\n"
                },
                "onApplicationUpdate": {
                    "type": "boolean",
                    "description": "On application update flag.\n"
                },
                "onAuthorDelete": {
                    "type": "boolean",
                    "description": "On author deleted flag.\n"
                },
                "onBookDelete": {
                    "type": "boolean",
                    "description": "On book delete flag.\n"
                },
                "onBookFileDelete": {
                    "type": "boolean",
                    "description": "On book file delete flag.\n"
                },
                "onBookFileDeleteForUpgrade": {
                    "type": "boolean",
                    "description": "On book file delete for upgrade flag.\n"
                },
                "onGrab": {
                    "type": "boolean",
                    "description": "On grab flag.\n"
                },
                "onHealthIssue": {
                    "type": "boolean",
                    "description": "On health issue flag.\n"
                },
                "onReleaseImport": {
                    "type": "boolean",
                    "description": "On release import flag.\n"
                },
                "onUpgrade": {
                    "type": "boolean",
                    "description": "On upgrade flag.\n"
                },
                "password": {
                    "type": "string",
                    "description": "Password.\n",
                    "secret": true
                },
                "priority": {
                    "type": "integer",
                    "description": "Priority. `1` Min, `2` Low, `3` Default, `4` High, `5` Max.\n"
                },
                "serverUrl": {
                    "type": "string",
                    "description": "Server URL.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                },
                "topics": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Topics.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username.\n"
                }
            },
            "requiredInputs": [
                "name",
                "topics"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering NotificationNtfy resources.\n",
                "properties": {
                    "clickUrl": {
                        "type": "string",
                        "description": "Click URL.\n"
                    },
                    "fieldTags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Tags and emojis.\n"
                    },
                    "includeHealthWarnings": {
                        "type": "boolean",
                        "description": "Include health warnings.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Notification name.\n"
                    },
                    "onApplicationUpdate": {
                        "type": "boolean",
                        "description": "On application update flag.\n"
                    },
                    "onAuthorDelete": {
                        "type": "boolean",
                        "description": "On author deleted flag.\n"
                    },
                    "onBookDelete": {
                        "type": "boolean",
                        "description": "On book delete flag.\n"
                    },
                    "onBookFileDelete": {
                        "type": "boolean",
                        "description": "On book file delete flag.\n"
                    },
                    "onBookFileDeleteForUpgrade": {
                        "type": "boolean",
                        "description": "On book file delete for upgrade flag.\n"
                    },
                    "onGrab": {
                        "type": "boolean",
                        "description": "On grab flag.\n"
                    },
                    "onHealthIssue": {
                        "type": "boolean",
                        "description": "On health issue flag.\n"
                    },
                    "onReleaseImport": {
                        "type": "boolean",
                        "description": "On release import flag.\n"
                    },
                    "onUpgrade": {
                        "type": "boolean",
                        "description": "On upgrade flag.\n"
                    },
                    "password": {
                        "type": "string",
                        "description": "Password.\n",
                        "secret": true
                    },
                    "priority": {
                        "type": "integer",
                        "description": "Priority. `1` Min, `2` Low, `3` Default, `4` High, `5` Max.\n"
                    },
                    "serverUrl": {
                        "type": "string",
                        "description": "Server URL.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "List of associated tags.\n"
                    },
                    "topics": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Topics.\n"
                    },
                    "username": {
                        "type": "string",
                        "description": "Username.\n"
                    }
                },
                "type": "object"
            }
        },
        "readarr:Notifications/notificationProwl:NotificationProwl": {
            "description": "\u003c!-- subcategory:Notifications --\u003eNotification Prowl resource.\nFor more information refer to [Notification](https://wiki.servarr.com/readarr/settings#connect) and [Prowl](https://wiki.servarr.com/readarr/supported#prowl).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as readarr from \"@maienm/pulumi-readarr\";\n\nconst example = new readarr.notifications.NotificationProwl(\"example\", {\n    apiKey: \"APIKey\",\n    includeHealthWarnings: false,\n    name: \"Example\",\n    onAuthorDelete: false,\n    onBookDelete: false,\n    onBookFileDelete: false,\n    onBookFileDeleteForUpgrade: true,\n    onGrab: false,\n    onHealthIssue: false,\n    onReleaseImport: true,\n    onUpgrade: false,\n    priority: -2,\n});\n```\n```python\nimport pulumi\nimport pulumi_readarr as readarr\n\nexample = readarr.notifications.NotificationProwl(\"example\",\n    api_key=\"APIKey\",\n    include_health_warnings=False,\n    name=\"Example\",\n    on_author_delete=False,\n    on_book_delete=False,\n    on_book_file_delete=False,\n    on_book_file_delete_for_upgrade=True,\n    on_grab=False,\n    on_health_issue=False,\n    on_release_import=True,\n    on_upgrade=False,\n    priority=-2)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Readarr = MaienM.Readarr;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Readarr.Notifications.NotificationProwl(\"example\", new()\n    {\n        ApiKey = \"APIKey\",\n        IncludeHealthWarnings = false,\n        Name = \"Example\",\n        OnAuthorDelete = false,\n        OnBookDelete = false,\n        OnBookFileDelete = false,\n        OnBookFileDeleteForUpgrade = true,\n        OnGrab = false,\n        OnHealthIssue = false,\n        OnReleaseImport = true,\n        OnUpgrade = false,\n        Priority = -2,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/MaienM/pulumi-readarr/sdk/v2/go/readarr/Notifications\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := Notifications.NewNotificationProwl(ctx, \"example\", \u0026Notifications.NotificationProwlArgs{\n\t\t\tApiKey:                     pulumi.String(\"APIKey\"),\n\t\t\tIncludeHealthWarnings:      pulumi.Bool(false),\n\t\t\tName:                       pulumi.String(\"Example\"),\n\t\t\tOnAuthorDelete:             pulumi.Bool(false),\n\t\t\tOnBookDelete:               pulumi.Bool(false),\n\t\t\tOnBookFileDelete:           pulumi.Bool(false),\n\t\t\tOnBookFileDeleteForUpgrade: pulumi.Bool(true),\n\t\t\tOnGrab:                     pulumi.Bool(false),\n\t\t\tOnHealthIssue:              pulumi.Bool(false),\n\t\t\tOnReleaseImport:            pulumi.Bool(true),\n\t\t\tOnUpgrade:                  pulumi.Bool(false),\n\t\t\tPriority:                   -2,\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nimport using the API/UI ID\n\n```sh\n $ pulumi import readarr:Notifications/notificationProwl:NotificationProwl example 1\n```\n\n ",
            "properties": {
                "apiKey": {
                    "type": "string",
                    "description": "API Key.\n",
                    "secret": true
                },
                "includeHealthWarnings": {
                    "type": "boolean",
                    "description": "Include health warnings.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Notification name.\n"
                },
                "onApplicationUpdate": {
                    "type": "boolean",
                    "description": "On application update flag.\n"
                },
                "onAuthorDelete": {
                    "type": "boolean",
                    "description": "On author deleted flag.\n"
                },
                "onBookDelete": {
                    "type": "boolean",
                    "description": "On book delete flag.\n"
                },
                "onBookFileDelete": {
                    "type": "boolean",
                    "description": "On book file delete flag.\n"
                },
                "onBookFileDeleteForUpgrade": {
                    "type": "boolean",
                    "description": "On book file delete for upgrade flag.\n"
                },
                "onGrab": {
                    "type": "boolean",
                    "description": "On grab flag.\n"
                },
                "onHealthIssue": {
                    "type": "boolean",
                    "description": "On health issue flag.\n"
                },
                "onReleaseImport": {
                    "type": "boolean",
                    "description": "On release import flag.\n"
                },
                "onUpgrade": {
                    "type": "boolean",
                    "description": "On upgrade flag.\n"
                },
                "priority": {
                    "type": "integer",
                    "description": "Priority.`-2` Very Low, `-1` Low, `0` Normal, `1` High, `2` Emergency.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                }
            },
            "required": [
                "apiKey",
                "includeHealthWarnings",
                "name",
                "onApplicationUpdate",
                "onAuthorDelete",
                "onBookDelete",
                "onBookFileDelete",
                "onBookFileDeleteForUpgrade",
                "onGrab",
                "onHealthIssue",
                "onReleaseImport",
                "onUpgrade",
                "priority",
                "tags"
            ],
            "inputProperties": {
                "apiKey": {
                    "type": "string",
                    "description": "API Key.\n",
                    "secret": true
                },
                "includeHealthWarnings": {
                    "type": "boolean",
                    "description": "Include health warnings.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Notification name.\n"
                },
                "onApplicationUpdate": {
                    "type": "boolean",
                    "description": "On application update flag.\n"
                },
                "onAuthorDelete": {
                    "type": "boolean",
                    "description": "On author deleted flag.\n"
                },
                "onBookDelete": {
                    "type": "boolean",
                    "description": "On book delete flag.\n"
                },
                "onBookFileDelete": {
                    "type": "boolean",
                    "description": "On book file delete flag.\n"
                },
                "onBookFileDeleteForUpgrade": {
                    "type": "boolean",
                    "description": "On book file delete for upgrade flag.\n"
                },
                "onGrab": {
                    "type": "boolean",
                    "description": "On grab flag.\n"
                },
                "onHealthIssue": {
                    "type": "boolean",
                    "description": "On health issue flag.\n"
                },
                "onReleaseImport": {
                    "type": "boolean",
                    "description": "On release import flag.\n"
                },
                "onUpgrade": {
                    "type": "boolean",
                    "description": "On upgrade flag.\n"
                },
                "priority": {
                    "type": "integer",
                    "description": "Priority.`-2` Very Low, `-1` Low, `0` Normal, `1` High, `2` Emergency.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                }
            },
            "requiredInputs": [
                "apiKey",
                "name"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering NotificationProwl resources.\n",
                "properties": {
                    "apiKey": {
                        "type": "string",
                        "description": "API Key.\n",
                        "secret": true
                    },
                    "includeHealthWarnings": {
                        "type": "boolean",
                        "description": "Include health warnings.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Notification name.\n"
                    },
                    "onApplicationUpdate": {
                        "type": "boolean",
                        "description": "On application update flag.\n"
                    },
                    "onAuthorDelete": {
                        "type": "boolean",
                        "description": "On author deleted flag.\n"
                    },
                    "onBookDelete": {
                        "type": "boolean",
                        "description": "On book delete flag.\n"
                    },
                    "onBookFileDelete": {
                        "type": "boolean",
                        "description": "On book file delete flag.\n"
                    },
                    "onBookFileDeleteForUpgrade": {
                        "type": "boolean",
                        "description": "On book file delete for upgrade flag.\n"
                    },
                    "onGrab": {
                        "type": "boolean",
                        "description": "On grab flag.\n"
                    },
                    "onHealthIssue": {
                        "type": "boolean",
                        "description": "On health issue flag.\n"
                    },
                    "onReleaseImport": {
                        "type": "boolean",
                        "description": "On release import flag.\n"
                    },
                    "onUpgrade": {
                        "type": "boolean",
                        "description": "On upgrade flag.\n"
                    },
                    "priority": {
                        "type": "integer",
                        "description": "Priority.`-2` Very Low, `-1` Low, `0` Normal, `1` High, `2` Emergency.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "List of associated tags.\n"
                    }
                },
                "type": "object"
            }
        },
        "readarr:Notifications/notificationPushbullet:NotificationPushbullet": {
            "description": "\u003c!-- subcategory:Notifications --\u003eNotification Pushbullet resource.\nFor more information refer to [Notification](https://wiki.servarr.com/readarr/settings#connect) and [Pushbullet](https://wiki.servarr.com/readarr/supported#pushbullet).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as readarr from \"@maienm/pulumi-readarr\";\n\nconst example = new readarr.notifications.NotificationPushbullet(\"example\", {\n    apiKey: \"Token\",\n    deviceIds: [\"test\"],\n    includeHealthWarnings: false,\n    name: \"Example\",\n    onAuthorDelete: false,\n    onBookDelete: false,\n    onBookFileDelete: false,\n    onBookFileDeleteForUpgrade: false,\n    onDownloadFailure: false,\n    onGrab: false,\n    onHealthIssue: true,\n    onImportFailure: true,\n    onReleaseImport: false,\n    onUpgrade: false,\n});\n```\n```python\nimport pulumi\nimport pulumi_readarr as readarr\n\nexample = readarr.notifications.NotificationPushbullet(\"example\",\n    api_key=\"Token\",\n    device_ids=[\"test\"],\n    include_health_warnings=False,\n    name=\"Example\",\n    on_author_delete=False,\n    on_book_delete=False,\n    on_book_file_delete=False,\n    on_book_file_delete_for_upgrade=False,\n    on_download_failure=False,\n    on_grab=False,\n    on_health_issue=True,\n    on_import_failure=True,\n    on_release_import=False,\n    on_upgrade=False)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Readarr = MaienM.Readarr;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Readarr.Notifications.NotificationPushbullet(\"example\", new()\n    {\n        ApiKey = \"Token\",\n        DeviceIds = new[]\n        {\n            \"test\",\n        },\n        IncludeHealthWarnings = false,\n        Name = \"Example\",\n        OnAuthorDelete = false,\n        OnBookDelete = false,\n        OnBookFileDelete = false,\n        OnBookFileDeleteForUpgrade = false,\n        OnDownloadFailure = false,\n        OnGrab = false,\n        OnHealthIssue = true,\n        OnImportFailure = true,\n        OnReleaseImport = false,\n        OnUpgrade = false,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/MaienM/pulumi-readarr/sdk/v2/go/readarr/Notifications\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := Notifications.NewNotificationPushbullet(ctx, \"example\", \u0026Notifications.NotificationPushbulletArgs{\n\t\t\tApiKey: pulumi.String(\"Token\"),\n\t\t\tDeviceIds: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"test\"),\n\t\t\t},\n\t\t\tIncludeHealthWarnings:      pulumi.Bool(false),\n\t\t\tName:                       pulumi.String(\"Example\"),\n\t\t\tOnAuthorDelete:             pulumi.Bool(false),\n\t\t\tOnBookDelete:               pulumi.Bool(false),\n\t\t\tOnBookFileDelete:           pulumi.Bool(false),\n\t\t\tOnBookFileDeleteForUpgrade: pulumi.Bool(false),\n\t\t\tOnDownloadFailure:          pulumi.Bool(false),\n\t\t\tOnGrab:                     pulumi.Bool(false),\n\t\t\tOnHealthIssue:              pulumi.Bool(true),\n\t\t\tOnImportFailure:            pulumi.Bool(true),\n\t\t\tOnReleaseImport:            pulumi.Bool(false),\n\t\t\tOnUpgrade:                  pulumi.Bool(false),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.readarr.Notifications.NotificationPushbullet;\nimport com.pulumi.readarr.Notifications.NotificationPushbulletArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new NotificationPushbullet(\"example\", NotificationPushbulletArgs.builder()        \n            .apiKey(\"Token\")\n            .deviceIds(\"test\")\n            .includeHealthWarnings(false)\n            .name(\"Example\")\n            .onAuthorDelete(false)\n            .onBookDelete(false)\n            .onBookFileDelete(false)\n            .onBookFileDeleteForUpgrade(false)\n            .onDownloadFailure(false)\n            .onGrab(false)\n            .onHealthIssue(true)\n            .onImportFailure(true)\n            .onReleaseImport(false)\n            .onUpgrade(false)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: readarr:Notifications:NotificationPushbullet\n    properties:\n      apiKey: Token\n      deviceIds:\n        - test\n      includeHealthWarnings: false\n      name: Example\n      onAuthorDelete: false\n      onBookDelete: false\n      onBookFileDelete: false\n      onBookFileDeleteForUpgrade: false\n      onDownloadFailure: false\n      onGrab: false\n      onHealthIssue: true\n      onImportFailure: true\n      onReleaseImport: false\n      onUpgrade: false\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nimport using the API/UI ID\n\n```sh\n $ pulumi import readarr:Notifications/notificationPushbullet:NotificationPushbullet example 1\n```\n\n ",
            "properties": {
                "apiKey": {
                    "type": "string",
                    "description": "API key.\n",
                    "secret": true
                },
                "channelTags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of channel tags.\n"
                },
                "deviceIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of devices IDs.\n"
                },
                "includeHealthWarnings": {
                    "type": "boolean",
                    "description": "Include health warnings.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Notification name.\n"
                },
                "onApplicationUpdate": {
                    "type": "boolean",
                    "description": "On application update flag.\n"
                },
                "onAuthorDelete": {
                    "type": "boolean",
                    "description": "On author deleted flag.\n"
                },
                "onBookDelete": {
                    "type": "boolean",
                    "description": "On book delete flag.\n"
                },
                "onBookFileDelete": {
                    "type": "boolean",
                    "description": "On book file delete flag.\n"
                },
                "onBookFileDeleteForUpgrade": {
                    "type": "boolean",
                    "description": "On book file delete for upgrade flag.\n"
                },
                "onDownloadFailure": {
                    "type": "boolean",
                    "description": "On download failure flag.\n"
                },
                "onGrab": {
                    "type": "boolean",
                    "description": "On grab flag.\n"
                },
                "onHealthIssue": {
                    "type": "boolean",
                    "description": "On health issue flag.\n"
                },
                "onImportFailure": {
                    "type": "boolean",
                    "description": "On import failure flag.\n"
                },
                "onReleaseImport": {
                    "type": "boolean",
                    "description": "On release import flag.\n"
                },
                "onUpgrade": {
                    "type": "boolean",
                    "description": "On upgrade flag.\n"
                },
                "senderId": {
                    "type": "string",
                    "description": "Sender ID.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                }
            },
            "required": [
                "apiKey",
                "channelTags",
                "deviceIds",
                "includeHealthWarnings",
                "name",
                "onApplicationUpdate",
                "onAuthorDelete",
                "onBookDelete",
                "onBookFileDelete",
                "onBookFileDeleteForUpgrade",
                "onDownloadFailure",
                "onGrab",
                "onHealthIssue",
                "onImportFailure",
                "onReleaseImport",
                "onUpgrade",
                "senderId",
                "tags"
            ],
            "inputProperties": {
                "apiKey": {
                    "type": "string",
                    "description": "API key.\n",
                    "secret": true
                },
                "channelTags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of channel tags.\n"
                },
                "deviceIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of devices IDs.\n"
                },
                "includeHealthWarnings": {
                    "type": "boolean",
                    "description": "Include health warnings.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Notification name.\n"
                },
                "onApplicationUpdate": {
                    "type": "boolean",
                    "description": "On application update flag.\n"
                },
                "onAuthorDelete": {
                    "type": "boolean",
                    "description": "On author deleted flag.\n"
                },
                "onBookDelete": {
                    "type": "boolean",
                    "description": "On book delete flag.\n"
                },
                "onBookFileDelete": {
                    "type": "boolean",
                    "description": "On book file delete flag.\n"
                },
                "onBookFileDeleteForUpgrade": {
                    "type": "boolean",
                    "description": "On book file delete for upgrade flag.\n"
                },
                "onDownloadFailure": {
                    "type": "boolean",
                    "description": "On download failure flag.\n"
                },
                "onGrab": {
                    "type": "boolean",
                    "description": "On grab flag.\n"
                },
                "onHealthIssue": {
                    "type": "boolean",
                    "description": "On health issue flag.\n"
                },
                "onImportFailure": {
                    "type": "boolean",
                    "description": "On import failure flag.\n"
                },
                "onReleaseImport": {
                    "type": "boolean",
                    "description": "On release import flag.\n"
                },
                "onUpgrade": {
                    "type": "boolean",
                    "description": "On upgrade flag.\n"
                },
                "senderId": {
                    "type": "string",
                    "description": "Sender ID.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                }
            },
            "requiredInputs": [
                "apiKey",
                "name"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering NotificationPushbullet resources.\n",
                "properties": {
                    "apiKey": {
                        "type": "string",
                        "description": "API key.\n",
                        "secret": true
                    },
                    "channelTags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of channel tags.\n"
                    },
                    "deviceIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of devices IDs.\n"
                    },
                    "includeHealthWarnings": {
                        "type": "boolean",
                        "description": "Include health warnings.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Notification name.\n"
                    },
                    "onApplicationUpdate": {
                        "type": "boolean",
                        "description": "On application update flag.\n"
                    },
                    "onAuthorDelete": {
                        "type": "boolean",
                        "description": "On author deleted flag.\n"
                    },
                    "onBookDelete": {
                        "type": "boolean",
                        "description": "On book delete flag.\n"
                    },
                    "onBookFileDelete": {
                        "type": "boolean",
                        "description": "On book file delete flag.\n"
                    },
                    "onBookFileDeleteForUpgrade": {
                        "type": "boolean",
                        "description": "On book file delete for upgrade flag.\n"
                    },
                    "onDownloadFailure": {
                        "type": "boolean",
                        "description": "On download failure flag.\n"
                    },
                    "onGrab": {
                        "type": "boolean",
                        "description": "On grab flag.\n"
                    },
                    "onHealthIssue": {
                        "type": "boolean",
                        "description": "On health issue flag.\n"
                    },
                    "onImportFailure": {
                        "type": "boolean",
                        "description": "On import failure flag.\n"
                    },
                    "onReleaseImport": {
                        "type": "boolean",
                        "description": "On release import flag.\n"
                    },
                    "onUpgrade": {
                        "type": "boolean",
                        "description": "On upgrade flag.\n"
                    },
                    "senderId": {
                        "type": "string",
                        "description": "Sender ID.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "List of associated tags.\n"
                    }
                },
                "type": "object"
            }
        },
        "readarr:Notifications/notificationPushover:NotificationPushover": {
            "description": "\u003c!-- subcategory:Notifications --\u003eNotification Pushover resource.\nFor more information refer to [Notification](https://wiki.servarr.com/readarr/settings#connect) and [Pushover](https://wiki.servarr.com/readarr/supported#pushover).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.readarr.Notifications.NotificationJoin;\nimport com.pulumi.readarr.Notifications.NotificationJoinArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new NotificationJoin(\"example\", NotificationJoinArgs.builder()        \n            .apiKey(\"Key\")\n            .includeHealthWarnings(false)\n            .name(\"Example\")\n            .onAuthorDelete(true)\n            .onBookDelete(false)\n            .onBookFileDelete(false)\n            .onBookFileDeleteForUpgrade(true)\n            .onDownloadFailure(false)\n            .onGrab(false)\n            .onHealthIssue(false)\n            .onImportFailure(false)\n            .onReleaseImport(false)\n            .onUpgrade(false)\n            .priority(2)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: readarr:Notifications:NotificationJoin\n    properties:\n      apiKey: Key\n      includeHealthWarnings: false\n      name: Example\n      onAuthorDelete: true\n      onBookDelete: false\n      onBookFileDelete: false\n      onBookFileDeleteForUpgrade: true\n      onDownloadFailure: false\n      onGrab: false\n      onHealthIssue: false\n      onImportFailure: false\n      onReleaseImport: false\n      onUpgrade: false\n      priority: 2\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nimport using the API/UI ID\n\n```sh\n $ pulumi import readarr:Notifications/notificationPushover:NotificationPushover example 1\n```\n\n ",
            "properties": {
                "apiKey": {
                    "type": "string",
                    "description": "API key.\n",
                    "secret": true
                },
                "devices": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of devices.\n"
                },
                "expire": {
                    "type": "integer",
                    "description": "Expire.\n"
                },
                "includeHealthWarnings": {
                    "type": "boolean",
                    "description": "Include health warnings.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Notification name.\n"
                },
                "onApplicationUpdate": {
                    "type": "boolean",
                    "description": "On application update flag.\n"
                },
                "onAuthorDelete": {
                    "type": "boolean",
                    "description": "On author deleted flag.\n"
                },
                "onBookDelete": {
                    "type": "boolean",
                    "description": "On book delete flag.\n"
                },
                "onBookFileDelete": {
                    "type": "boolean",
                    "description": "On book file delete flag.\n"
                },
                "onBookFileDeleteForUpgrade": {
                    "type": "boolean",
                    "description": "On book file delete for upgrade flag.\n"
                },
                "onDownloadFailure": {
                    "type": "boolean",
                    "description": "On download failure flag.\n"
                },
                "onGrab": {
                    "type": "boolean",
                    "description": "On grab flag.\n"
                },
                "onHealthIssue": {
                    "type": "boolean",
                    "description": "On health issue flag.\n"
                },
                "onImportFailure": {
                    "type": "boolean",
                    "description": "On import failure flag.\n"
                },
                "onReleaseImport": {
                    "type": "boolean",
                    "description": "On release import flag.\n"
                },
                "onUpgrade": {
                    "type": "boolean",
                    "description": "On upgrade flag.\n"
                },
                "priority": {
                    "type": "integer",
                    "description": "Priority. `-2` Silent, `-1` Quiet, `0` Normal, `1` High, `2` Emergency, `8` High.\n"
                },
                "retry": {
                    "type": "integer",
                    "description": "Retry.\n"
                },
                "sound": {
                    "type": "string",
                    "description": "Sound.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                },
                "userKey": {
                    "type": "string",
                    "description": "User key.\n",
                    "secret": true
                }
            },
            "required": [
                "apiKey",
                "devices",
                "expire",
                "includeHealthWarnings",
                "name",
                "onApplicationUpdate",
                "onAuthorDelete",
                "onBookDelete",
                "onBookFileDelete",
                "onBookFileDeleteForUpgrade",
                "onDownloadFailure",
                "onGrab",
                "onHealthIssue",
                "onImportFailure",
                "onReleaseImport",
                "onUpgrade",
                "priority",
                "retry",
                "sound",
                "tags"
            ],
            "inputProperties": {
                "apiKey": {
                    "type": "string",
                    "description": "API key.\n",
                    "secret": true
                },
                "devices": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of devices.\n"
                },
                "expire": {
                    "type": "integer",
                    "description": "Expire.\n"
                },
                "includeHealthWarnings": {
                    "type": "boolean",
                    "description": "Include health warnings.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Notification name.\n"
                },
                "onApplicationUpdate": {
                    "type": "boolean",
                    "description": "On application update flag.\n"
                },
                "onAuthorDelete": {
                    "type": "boolean",
                    "description": "On author deleted flag.\n"
                },
                "onBookDelete": {
                    "type": "boolean",
                    "description": "On book delete flag.\n"
                },
                "onBookFileDelete": {
                    "type": "boolean",
                    "description": "On book file delete flag.\n"
                },
                "onBookFileDeleteForUpgrade": {
                    "type": "boolean",
                    "description": "On book file delete for upgrade flag.\n"
                },
                "onDownloadFailure": {
                    "type": "boolean",
                    "description": "On download failure flag.\n"
                },
                "onGrab": {
                    "type": "boolean",
                    "description": "On grab flag.\n"
                },
                "onHealthIssue": {
                    "type": "boolean",
                    "description": "On health issue flag.\n"
                },
                "onImportFailure": {
                    "type": "boolean",
                    "description": "On import failure flag.\n"
                },
                "onReleaseImport": {
                    "type": "boolean",
                    "description": "On release import flag.\n"
                },
                "onUpgrade": {
                    "type": "boolean",
                    "description": "On upgrade flag.\n"
                },
                "priority": {
                    "type": "integer",
                    "description": "Priority. `-2` Silent, `-1` Quiet, `0` Normal, `1` High, `2` Emergency, `8` High.\n"
                },
                "retry": {
                    "type": "integer",
                    "description": "Retry.\n"
                },
                "sound": {
                    "type": "string",
                    "description": "Sound.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                },
                "userKey": {
                    "type": "string",
                    "description": "User key.\n",
                    "secret": true
                }
            },
            "requiredInputs": [
                "apiKey",
                "name"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering NotificationPushover resources.\n",
                "properties": {
                    "apiKey": {
                        "type": "string",
                        "description": "API key.\n",
                        "secret": true
                    },
                    "devices": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of devices.\n"
                    },
                    "expire": {
                        "type": "integer",
                        "description": "Expire.\n"
                    },
                    "includeHealthWarnings": {
                        "type": "boolean",
                        "description": "Include health warnings.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Notification name.\n"
                    },
                    "onApplicationUpdate": {
                        "type": "boolean",
                        "description": "On application update flag.\n"
                    },
                    "onAuthorDelete": {
                        "type": "boolean",
                        "description": "On author deleted flag.\n"
                    },
                    "onBookDelete": {
                        "type": "boolean",
                        "description": "On book delete flag.\n"
                    },
                    "onBookFileDelete": {
                        "type": "boolean",
                        "description": "On book file delete flag.\n"
                    },
                    "onBookFileDeleteForUpgrade": {
                        "type": "boolean",
                        "description": "On book file delete for upgrade flag.\n"
                    },
                    "onDownloadFailure": {
                        "type": "boolean",
                        "description": "On download failure flag.\n"
                    },
                    "onGrab": {
                        "type": "boolean",
                        "description": "On grab flag.\n"
                    },
                    "onHealthIssue": {
                        "type": "boolean",
                        "description": "On health issue flag.\n"
                    },
                    "onImportFailure": {
                        "type": "boolean",
                        "description": "On import failure flag.\n"
                    },
                    "onReleaseImport": {
                        "type": "boolean",
                        "description": "On release import flag.\n"
                    },
                    "onUpgrade": {
                        "type": "boolean",
                        "description": "On upgrade flag.\n"
                    },
                    "priority": {
                        "type": "integer",
                        "description": "Priority. `-2` Silent, `-1` Quiet, `0` Normal, `1` High, `2` Emergency, `8` High.\n"
                    },
                    "retry": {
                        "type": "integer",
                        "description": "Retry.\n"
                    },
                    "sound": {
                        "type": "string",
                        "description": "Sound.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "List of associated tags.\n"
                    },
                    "userKey": {
                        "type": "string",
                        "description": "User key.\n",
                        "secret": true
                    }
                },
                "type": "object"
            }
        },
        "readarr:Notifications/notificationSendgrid:NotificationSendgrid": {
            "description": "\u003c!-- subcategory:Notifications --\u003eNotification Sendgrid resource.\nFor more information refer to [Notification](https://wiki.servarr.com/readarr/settings#connect) and [Sendgrid](https://wiki.servarr.com/readarr/supported#sendgrid).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as readarr from \"@maienm/pulumi-readarr\";\n\nconst example = new readarr.notifications.NotificationSendgrid(\"example\", {\n    apiKey: \"APIkey\",\n    from: \"from_sendgrid@example.com\",\n    includeHealthWarnings: false,\n    name: \"Example\",\n    onAuthorDelete: true,\n    onBookDelete: false,\n    onBookFileDelete: true,\n    onBookFileDeleteForUpgrade: false,\n    onDownloadFailure: false,\n    onGrab: false,\n    onHealthIssue: false,\n    onImportFailure: false,\n    onReleaseImport: false,\n    onUpgrade: false,\n    recipients: [\n        \"user1@example.com\",\n        \"user2@example.com\",\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_readarr as readarr\n\nexample = readarr.notifications.NotificationSendgrid(\"example\",\n    api_key=\"APIkey\",\n    from_=\"from_sendgrid@example.com\",\n    include_health_warnings=False,\n    name=\"Example\",\n    on_author_delete=True,\n    on_book_delete=False,\n    on_book_file_delete=True,\n    on_book_file_delete_for_upgrade=False,\n    on_download_failure=False,\n    on_grab=False,\n    on_health_issue=False,\n    on_import_failure=False,\n    on_release_import=False,\n    on_upgrade=False,\n    recipients=[\n        \"user1@example.com\",\n        \"user2@example.com\",\n    ])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Readarr = MaienM.Readarr;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Readarr.Notifications.NotificationSendgrid(\"example\", new()\n    {\n        ApiKey = \"APIkey\",\n        From = \"from_sendgrid@example.com\",\n        IncludeHealthWarnings = false,\n        Name = \"Example\",\n        OnAuthorDelete = true,\n        OnBookDelete = false,\n        OnBookFileDelete = true,\n        OnBookFileDeleteForUpgrade = false,\n        OnDownloadFailure = false,\n        OnGrab = false,\n        OnHealthIssue = false,\n        OnImportFailure = false,\n        OnReleaseImport = false,\n        OnUpgrade = false,\n        Recipients = new[]\n        {\n            \"user1@example.com\",\n            \"user2@example.com\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/MaienM/pulumi-readarr/sdk/v2/go/readarr/Notifications\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := Notifications.NewNotificationSendgrid(ctx, \"example\", \u0026Notifications.NotificationSendgridArgs{\n\t\t\tApiKey:                     pulumi.String(\"APIkey\"),\n\t\t\tFrom:                       pulumi.String(\"from_sendgrid@example.com\"),\n\t\t\tIncludeHealthWarnings:      pulumi.Bool(false),\n\t\t\tName:                       pulumi.String(\"Example\"),\n\t\t\tOnAuthorDelete:             pulumi.Bool(true),\n\t\t\tOnBookDelete:               pulumi.Bool(false),\n\t\t\tOnBookFileDelete:           pulumi.Bool(true),\n\t\t\tOnBookFileDeleteForUpgrade: pulumi.Bool(false),\n\t\t\tOnDownloadFailure:          pulumi.Bool(false),\n\t\t\tOnGrab:                     pulumi.Bool(false),\n\t\t\tOnHealthIssue:              pulumi.Bool(false),\n\t\t\tOnImportFailure:            pulumi.Bool(false),\n\t\t\tOnReleaseImport:            pulumi.Bool(false),\n\t\t\tOnUpgrade:                  pulumi.Bool(false),\n\t\t\tRecipients: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"user1@example.com\"),\n\t\t\t\tpulumi.String(\"user2@example.com\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.readarr.Notifications.NotificationSendgrid;\nimport com.pulumi.readarr.Notifications.NotificationSendgridArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new NotificationSendgrid(\"example\", NotificationSendgridArgs.builder()        \n            .apiKey(\"APIkey\")\n            .from(\"from_sendgrid@example.com\")\n            .includeHealthWarnings(false)\n            .name(\"Example\")\n            .onAuthorDelete(true)\n            .onBookDelete(false)\n            .onBookFileDelete(true)\n            .onBookFileDeleteForUpgrade(false)\n            .onDownloadFailure(false)\n            .onGrab(false)\n            .onHealthIssue(false)\n            .onImportFailure(false)\n            .onReleaseImport(false)\n            .onUpgrade(false)\n            .recipients(            \n                \"user1@example.com\",\n                \"user2@example.com\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: readarr:Notifications:NotificationSendgrid\n    properties:\n      apiKey: APIkey\n      from: from_sendgrid@example.com\n      includeHealthWarnings: false\n      name: Example\n      onAuthorDelete: true\n      onBookDelete: false\n      onBookFileDelete: true\n      onBookFileDeleteForUpgrade: false\n      onDownloadFailure: false\n      onGrab: false\n      onHealthIssue: false\n      onImportFailure: false\n      onReleaseImport: false\n      onUpgrade: false\n      recipients:\n        - user1@example.com\n        - user2@example.com\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nimport using the API/UI ID\n\n```sh\n $ pulumi import readarr:Notifications/notificationSendgrid:NotificationSendgrid example 1\n```\n\n ",
            "properties": {
                "apiKey": {
                    "type": "string",
                    "description": "API key.\n",
                    "secret": true
                },
                "from": {
                    "type": "string",
                    "description": "From.\n"
                },
                "includeHealthWarnings": {
                    "type": "boolean",
                    "description": "Include health warnings.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Notification name.\n"
                },
                "onApplicationUpdate": {
                    "type": "boolean",
                    "description": "On application update flag.\n"
                },
                "onAuthorDelete": {
                    "type": "boolean",
                    "description": "On author deleted flag.\n"
                },
                "onBookDelete": {
                    "type": "boolean",
                    "description": "On book delete flag.\n"
                },
                "onBookFileDelete": {
                    "type": "boolean",
                    "description": "On book file delete flag.\n"
                },
                "onBookFileDeleteForUpgrade": {
                    "type": "boolean",
                    "description": "On book file delete for upgrade flag.\n"
                },
                "onDownloadFailure": {
                    "type": "boolean",
                    "description": "On download failure flag.\n"
                },
                "onGrab": {
                    "type": "boolean",
                    "description": "On grab flag.\n"
                },
                "onHealthIssue": {
                    "type": "boolean",
                    "description": "On health issue flag.\n"
                },
                "onImportFailure": {
                    "type": "boolean",
                    "description": "On import failure flag.\n"
                },
                "onReleaseImport": {
                    "type": "boolean",
                    "description": "On release import flag.\n"
                },
                "onUpgrade": {
                    "type": "boolean",
                    "description": "On upgrade flag.\n"
                },
                "recipients": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Recipients.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                }
            },
            "required": [
                "apiKey",
                "from",
                "includeHealthWarnings",
                "name",
                "onApplicationUpdate",
                "onAuthorDelete",
                "onBookDelete",
                "onBookFileDelete",
                "onBookFileDeleteForUpgrade",
                "onDownloadFailure",
                "onGrab",
                "onHealthIssue",
                "onImportFailure",
                "onReleaseImport",
                "onUpgrade",
                "recipients",
                "tags"
            ],
            "inputProperties": {
                "apiKey": {
                    "type": "string",
                    "description": "API key.\n",
                    "secret": true
                },
                "from": {
                    "type": "string",
                    "description": "From.\n"
                },
                "includeHealthWarnings": {
                    "type": "boolean",
                    "description": "Include health warnings.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Notification name.\n"
                },
                "onApplicationUpdate": {
                    "type": "boolean",
                    "description": "On application update flag.\n"
                },
                "onAuthorDelete": {
                    "type": "boolean",
                    "description": "On author deleted flag.\n"
                },
                "onBookDelete": {
                    "type": "boolean",
                    "description": "On book delete flag.\n"
                },
                "onBookFileDelete": {
                    "type": "boolean",
                    "description": "On book file delete flag.\n"
                },
                "onBookFileDeleteForUpgrade": {
                    "type": "boolean",
                    "description": "On book file delete for upgrade flag.\n"
                },
                "onDownloadFailure": {
                    "type": "boolean",
                    "description": "On download failure flag.\n"
                },
                "onGrab": {
                    "type": "boolean",
                    "description": "On grab flag.\n"
                },
                "onHealthIssue": {
                    "type": "boolean",
                    "description": "On health issue flag.\n"
                },
                "onImportFailure": {
                    "type": "boolean",
                    "description": "On import failure flag.\n"
                },
                "onReleaseImport": {
                    "type": "boolean",
                    "description": "On release import flag.\n"
                },
                "onUpgrade": {
                    "type": "boolean",
                    "description": "On upgrade flag.\n"
                },
                "recipients": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Recipients.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                }
            },
            "requiredInputs": [
                "from",
                "name",
                "recipients"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering NotificationSendgrid resources.\n",
                "properties": {
                    "apiKey": {
                        "type": "string",
                        "description": "API key.\n",
                        "secret": true
                    },
                    "from": {
                        "type": "string",
                        "description": "From.\n"
                    },
                    "includeHealthWarnings": {
                        "type": "boolean",
                        "description": "Include health warnings.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Notification name.\n"
                    },
                    "onApplicationUpdate": {
                        "type": "boolean",
                        "description": "On application update flag.\n"
                    },
                    "onAuthorDelete": {
                        "type": "boolean",
                        "description": "On author deleted flag.\n"
                    },
                    "onBookDelete": {
                        "type": "boolean",
                        "description": "On book delete flag.\n"
                    },
                    "onBookFileDelete": {
                        "type": "boolean",
                        "description": "On book file delete flag.\n"
                    },
                    "onBookFileDeleteForUpgrade": {
                        "type": "boolean",
                        "description": "On book file delete for upgrade flag.\n"
                    },
                    "onDownloadFailure": {
                        "type": "boolean",
                        "description": "On download failure flag.\n"
                    },
                    "onGrab": {
                        "type": "boolean",
                        "description": "On grab flag.\n"
                    },
                    "onHealthIssue": {
                        "type": "boolean",
                        "description": "On health issue flag.\n"
                    },
                    "onImportFailure": {
                        "type": "boolean",
                        "description": "On import failure flag.\n"
                    },
                    "onReleaseImport": {
                        "type": "boolean",
                        "description": "On release import flag.\n"
                    },
                    "onUpgrade": {
                        "type": "boolean",
                        "description": "On upgrade flag.\n"
                    },
                    "recipients": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Recipients.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "List of associated tags.\n"
                    }
                },
                "type": "object"
            }
        },
        "readarr:Notifications/notificationSlack:NotificationSlack": {
            "description": "\u003c!-- subcategory:Notifications --\u003eNotification Slack resource.\nFor more information refer to [Notification](https://wiki.servarr.com/readarr/settings#connect) and [Slack](https://wiki.servarr.com/readarr/supported#slack).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as readarr from \"@maienm/pulumi-readarr\";\n\nconst example = new readarr.notifications.NotificationSlack(\"example\", {\n    channel: \"example-channel\",\n    includeHealthWarnings: false,\n    name: \"Example\",\n    onAuthorDelete: false,\n    onBookDelete: false,\n    onBookFileDelete: false,\n    onBookFileDeleteForUpgrade: false,\n    onBookRetag: true,\n    onDownloadFailure: false,\n    onGrab: false,\n    onHealthIssue: false,\n    onImportFailure: false,\n    onReleaseImport: false,\n    onRename: true,\n    onUpgrade: false,\n    username: \"user\",\n    webHookUrl: \"http://my.slack.com/test\",\n});\n```\n```python\nimport pulumi\nimport pulumi_readarr as readarr\n\nexample = readarr.notifications.NotificationSlack(\"example\",\n    channel=\"example-channel\",\n    include_health_warnings=False,\n    name=\"Example\",\n    on_author_delete=False,\n    on_book_delete=False,\n    on_book_file_delete=False,\n    on_book_file_delete_for_upgrade=False,\n    on_book_retag=True,\n    on_download_failure=False,\n    on_grab=False,\n    on_health_issue=False,\n    on_import_failure=False,\n    on_release_import=False,\n    on_rename=True,\n    on_upgrade=False,\n    username=\"user\",\n    web_hook_url=\"http://my.slack.com/test\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Readarr = MaienM.Readarr;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Readarr.Notifications.NotificationSlack(\"example\", new()\n    {\n        Channel = \"example-channel\",\n        IncludeHealthWarnings = false,\n        Name = \"Example\",\n        OnAuthorDelete = false,\n        OnBookDelete = false,\n        OnBookFileDelete = false,\n        OnBookFileDeleteForUpgrade = false,\n        OnBookRetag = true,\n        OnDownloadFailure = false,\n        OnGrab = false,\n        OnHealthIssue = false,\n        OnImportFailure = false,\n        OnReleaseImport = false,\n        OnRename = true,\n        OnUpgrade = false,\n        Username = \"user\",\n        WebHookUrl = \"http://my.slack.com/test\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/MaienM/pulumi-readarr/sdk/v2/go/readarr/Notifications\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := Notifications.NewNotificationSlack(ctx, \"example\", \u0026Notifications.NotificationSlackArgs{\n\t\t\tChannel:                    pulumi.String(\"example-channel\"),\n\t\t\tIncludeHealthWarnings:      pulumi.Bool(false),\n\t\t\tName:                       pulumi.String(\"Example\"),\n\t\t\tOnAuthorDelete:             pulumi.Bool(false),\n\t\t\tOnBookDelete:               pulumi.Bool(false),\n\t\t\tOnBookFileDelete:           pulumi.Bool(false),\n\t\t\tOnBookFileDeleteForUpgrade: pulumi.Bool(false),\n\t\t\tOnBookRetag:                pulumi.Bool(true),\n\t\t\tOnDownloadFailure:          pulumi.Bool(false),\n\t\t\tOnGrab:                     pulumi.Bool(false),\n\t\t\tOnHealthIssue:              pulumi.Bool(false),\n\t\t\tOnImportFailure:            pulumi.Bool(false),\n\t\t\tOnReleaseImport:            pulumi.Bool(false),\n\t\t\tOnRename:                   pulumi.Bool(true),\n\t\t\tOnUpgrade:                  pulumi.Bool(false),\n\t\t\tUsername:                   pulumi.String(\"user\"),\n\t\t\tWebHookUrl:                 pulumi.String(\"http://my.slack.com/test\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.readarr.Notifications.NotificationSlack;\nimport com.pulumi.readarr.Notifications.NotificationSlackArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new NotificationSlack(\"example\", NotificationSlackArgs.builder()        \n            .channel(\"example-channel\")\n            .includeHealthWarnings(false)\n            .name(\"Example\")\n            .onAuthorDelete(false)\n            .onBookDelete(false)\n            .onBookFileDelete(false)\n            .onBookFileDeleteForUpgrade(false)\n            .onBookRetag(true)\n            .onDownloadFailure(false)\n            .onGrab(false)\n            .onHealthIssue(false)\n            .onImportFailure(false)\n            .onReleaseImport(false)\n            .onRename(true)\n            .onUpgrade(false)\n            .username(\"user\")\n            .webHookUrl(\"http://my.slack.com/test\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: readarr:Notifications:NotificationSlack\n    properties:\n      channel: example-channel\n      includeHealthWarnings: false\n      name: Example\n      onAuthorDelete: false\n      onBookDelete: false\n      onBookFileDelete: false\n      onBookFileDeleteForUpgrade: false\n      onBookRetag: true\n      onDownloadFailure: false\n      onGrab: false\n      onHealthIssue: false\n      onImportFailure: false\n      onReleaseImport: false\n      onRename: true\n      onUpgrade: false\n      username: user\n      webHookUrl: http://my.slack.com/test\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nimport using the API/UI ID\n\n```sh\n $ pulumi import readarr:Notifications/notificationSlack:NotificationSlack example 1\n```\n\n ",
            "properties": {
                "channel": {
                    "type": "string",
                    "description": "Channel.\n"
                },
                "icon": {
                    "type": "string",
                    "description": "Icon.\n"
                },
                "includeHealthWarnings": {
                    "type": "boolean",
                    "description": "Include health warnings.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Notification name.\n"
                },
                "onApplicationUpdate": {
                    "type": "boolean",
                    "description": "On application update flag.\n"
                },
                "onAuthorDelete": {
                    "type": "boolean",
                    "description": "On author deleted flag.\n"
                },
                "onBookDelete": {
                    "type": "boolean",
                    "description": "On book delete flag.\n"
                },
                "onBookFileDelete": {
                    "type": "boolean",
                    "description": "On book file delete flag.\n"
                },
                "onBookFileDeleteForUpgrade": {
                    "type": "boolean",
                    "description": "On book file delete for upgrade flag.\n"
                },
                "onBookRetag": {
                    "type": "boolean",
                    "description": "On book retag flag.\n"
                },
                "onDownloadFailure": {
                    "type": "boolean",
                    "description": "On download failure flag.\n"
                },
                "onGrab": {
                    "type": "boolean",
                    "description": "On grab flag.\n"
                },
                "onHealthIssue": {
                    "type": "boolean",
                    "description": "On health issue flag.\n"
                },
                "onImportFailure": {
                    "type": "boolean",
                    "description": "On import failure flag.\n"
                },
                "onReleaseImport": {
                    "type": "boolean",
                    "description": "On release import flag.\n"
                },
                "onRename": {
                    "type": "boolean",
                    "description": "On rename flag.\n"
                },
                "onUpgrade": {
                    "type": "boolean",
                    "description": "On upgrade flag.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username.\n"
                },
                "webHookUrl": {
                    "type": "string",
                    "description": "URL.\n"
                }
            },
            "required": [
                "channel",
                "icon",
                "includeHealthWarnings",
                "name",
                "onApplicationUpdate",
                "onAuthorDelete",
                "onBookDelete",
                "onBookFileDelete",
                "onBookFileDeleteForUpgrade",
                "onBookRetag",
                "onDownloadFailure",
                "onGrab",
                "onHealthIssue",
                "onImportFailure",
                "onReleaseImport",
                "onRename",
                "onUpgrade",
                "tags",
                "username",
                "webHookUrl"
            ],
            "inputProperties": {
                "channel": {
                    "type": "string",
                    "description": "Channel.\n"
                },
                "icon": {
                    "type": "string",
                    "description": "Icon.\n"
                },
                "includeHealthWarnings": {
                    "type": "boolean",
                    "description": "Include health warnings.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Notification name.\n"
                },
                "onApplicationUpdate": {
                    "type": "boolean",
                    "description": "On application update flag.\n"
                },
                "onAuthorDelete": {
                    "type": "boolean",
                    "description": "On author deleted flag.\n"
                },
                "onBookDelete": {
                    "type": "boolean",
                    "description": "On book delete flag.\n"
                },
                "onBookFileDelete": {
                    "type": "boolean",
                    "description": "On book file delete flag.\n"
                },
                "onBookFileDeleteForUpgrade": {
                    "type": "boolean",
                    "description": "On book file delete for upgrade flag.\n"
                },
                "onBookRetag": {
                    "type": "boolean",
                    "description": "On book retag flag.\n"
                },
                "onDownloadFailure": {
                    "type": "boolean",
                    "description": "On download failure flag.\n"
                },
                "onGrab": {
                    "type": "boolean",
                    "description": "On grab flag.\n"
                },
                "onHealthIssue": {
                    "type": "boolean",
                    "description": "On health issue flag.\n"
                },
                "onImportFailure": {
                    "type": "boolean",
                    "description": "On import failure flag.\n"
                },
                "onReleaseImport": {
                    "type": "boolean",
                    "description": "On release import flag.\n"
                },
                "onRename": {
                    "type": "boolean",
                    "description": "On rename flag.\n"
                },
                "onUpgrade": {
                    "type": "boolean",
                    "description": "On upgrade flag.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username.\n"
                },
                "webHookUrl": {
                    "type": "string",
                    "description": "URL.\n"
                }
            },
            "requiredInputs": [
                "name",
                "username",
                "webHookUrl"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering NotificationSlack resources.\n",
                "properties": {
                    "channel": {
                        "type": "string",
                        "description": "Channel.\n"
                    },
                    "icon": {
                        "type": "string",
                        "description": "Icon.\n"
                    },
                    "includeHealthWarnings": {
                        "type": "boolean",
                        "description": "Include health warnings.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Notification name.\n"
                    },
                    "onApplicationUpdate": {
                        "type": "boolean",
                        "description": "On application update flag.\n"
                    },
                    "onAuthorDelete": {
                        "type": "boolean",
                        "description": "On author deleted flag.\n"
                    },
                    "onBookDelete": {
                        "type": "boolean",
                        "description": "On book delete flag.\n"
                    },
                    "onBookFileDelete": {
                        "type": "boolean",
                        "description": "On book file delete flag.\n"
                    },
                    "onBookFileDeleteForUpgrade": {
                        "type": "boolean",
                        "description": "On book file delete for upgrade flag.\n"
                    },
                    "onBookRetag": {
                        "type": "boolean",
                        "description": "On book retag flag.\n"
                    },
                    "onDownloadFailure": {
                        "type": "boolean",
                        "description": "On download failure flag.\n"
                    },
                    "onGrab": {
                        "type": "boolean",
                        "description": "On grab flag.\n"
                    },
                    "onHealthIssue": {
                        "type": "boolean",
                        "description": "On health issue flag.\n"
                    },
                    "onImportFailure": {
                        "type": "boolean",
                        "description": "On import failure flag.\n"
                    },
                    "onReleaseImport": {
                        "type": "boolean",
                        "description": "On release import flag.\n"
                    },
                    "onRename": {
                        "type": "boolean",
                        "description": "On rename flag.\n"
                    },
                    "onUpgrade": {
                        "type": "boolean",
                        "description": "On upgrade flag.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "List of associated tags.\n"
                    },
                    "username": {
                        "type": "string",
                        "description": "Username.\n"
                    },
                    "webHookUrl": {
                        "type": "string",
                        "description": "URL.\n"
                    }
                },
                "type": "object"
            }
        },
        "readarr:Notifications/notificationSubsonic:NotificationSubsonic": {
            "description": "\u003c!-- subcategory:Notifications --\u003eNotification Subsonic resource.\nFor more information refer to [Notification](https://wiki.servarr.com/readarr/settings#connect) and [Subsonic](https://wiki.servarr.com/readarr/supported#subsonic).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as readarr from \"@maienm/pulumi-readarr\";\n\nconst example = new readarr.notifications.NotificationSubsonic(\"example\", {\n    host: \"http://subsonic.com\",\n    includeHealthWarnings: false,\n    name: \"Example\",\n    notify: true,\n    onAuthorDelete: false,\n    onBookDelete: false,\n    onBookFileDelete: true,\n    onBookFileDeleteForUpgrade: false,\n    onBookRetag: false,\n    onGrab: false,\n    onHealthIssue: false,\n    onReleaseImport: false,\n    onRename: false,\n    onUpgrade: false,\n    password: \"MyPass\",\n    port: 8080,\n    username: \"User\",\n});\n```\n```python\nimport pulumi\nimport pulumi_readarr as readarr\n\nexample = readarr.notifications.NotificationSubsonic(\"example\",\n    host=\"http://subsonic.com\",\n    include_health_warnings=False,\n    name=\"Example\",\n    notify=True,\n    on_author_delete=False,\n    on_book_delete=False,\n    on_book_file_delete=True,\n    on_book_file_delete_for_upgrade=False,\n    on_book_retag=False,\n    on_grab=False,\n    on_health_issue=False,\n    on_release_import=False,\n    on_rename=False,\n    on_upgrade=False,\n    password=\"MyPass\",\n    port=8080,\n    username=\"User\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Readarr = MaienM.Readarr;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Readarr.Notifications.NotificationSubsonic(\"example\", new()\n    {\n        Host = \"http://subsonic.com\",\n        IncludeHealthWarnings = false,\n        Name = \"Example\",\n        Notify = true,\n        OnAuthorDelete = false,\n        OnBookDelete = false,\n        OnBookFileDelete = true,\n        OnBookFileDeleteForUpgrade = false,\n        OnBookRetag = false,\n        OnGrab = false,\n        OnHealthIssue = false,\n        OnReleaseImport = false,\n        OnRename = false,\n        OnUpgrade = false,\n        Password = \"MyPass\",\n        Port = 8080,\n        Username = \"User\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/MaienM/pulumi-readarr/sdk/v2/go/readarr/Notifications\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := Notifications.NewNotificationSubsonic(ctx, \"example\", \u0026Notifications.NotificationSubsonicArgs{\n\t\t\tHost:                       pulumi.String(\"http://subsonic.com\"),\n\t\t\tIncludeHealthWarnings:      pulumi.Bool(false),\n\t\t\tName:                       pulumi.String(\"Example\"),\n\t\t\tNotify:                     pulumi.Bool(true),\n\t\t\tOnAuthorDelete:             pulumi.Bool(false),\n\t\t\tOnBookDelete:               pulumi.Bool(false),\n\t\t\tOnBookFileDelete:           pulumi.Bool(true),\n\t\t\tOnBookFileDeleteForUpgrade: pulumi.Bool(false),\n\t\t\tOnBookRetag:                pulumi.Bool(false),\n\t\t\tOnGrab:                     pulumi.Bool(false),\n\t\t\tOnHealthIssue:              pulumi.Bool(false),\n\t\t\tOnReleaseImport:            pulumi.Bool(false),\n\t\t\tOnRename:                   pulumi.Bool(false),\n\t\t\tOnUpgrade:                  pulumi.Bool(false),\n\t\t\tPassword:                   pulumi.String(\"MyPass\"),\n\t\t\tPort:                       pulumi.Int(8080),\n\t\t\tUsername:                   pulumi.String(\"User\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.readarr.Notifications.NotificationSubsonic;\nimport com.pulumi.readarr.Notifications.NotificationSubsonicArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new NotificationSubsonic(\"example\", NotificationSubsonicArgs.builder()        \n            .host(\"http://subsonic.com\")\n            .includeHealthWarnings(false)\n            .name(\"Example\")\n            .notify(true)\n            .onAuthorDelete(false)\n            .onBookDelete(false)\n            .onBookFileDelete(true)\n            .onBookFileDeleteForUpgrade(false)\n            .onBookRetag(false)\n            .onGrab(false)\n            .onHealthIssue(false)\n            .onReleaseImport(false)\n            .onRename(false)\n            .onUpgrade(false)\n            .password(\"MyPass\")\n            .port(8080)\n            .username(\"User\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: readarr:Notifications:NotificationSubsonic\n    properties:\n      host: http://subsonic.com\n      includeHealthWarnings: false\n      name: Example\n      notify: true\n      onAuthorDelete: false\n      onBookDelete: false\n      onBookFileDelete: true\n      onBookFileDeleteForUpgrade: false\n      onBookRetag: false\n      onGrab: false\n      onHealthIssue: false\n      onReleaseImport: false\n      onRename: false\n      onUpgrade: false\n      password: MyPass\n      port: 8080\n      username: User\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nimport using the API/UI ID\n\n```sh\n $ pulumi import readarr:Notifications/notificationSubsonic:NotificationSubsonic example 1\n```\n\n ",
            "properties": {
                "host": {
                    "type": "string",
                    "description": "Host.\n"
                },
                "includeHealthWarnings": {
                    "type": "boolean",
                    "description": "Include health warnings.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Notification name.\n"
                },
                "notify": {
                    "type": "boolean",
                    "description": "Notification flag.\n"
                },
                "onApplicationUpdate": {
                    "type": "boolean",
                    "description": "On application update flag.\n"
                },
                "onAuthorDelete": {
                    "type": "boolean",
                    "description": "On author deleted flag.\n"
                },
                "onBookDelete": {
                    "type": "boolean",
                    "description": "On book delete flag.\n"
                },
                "onBookFileDelete": {
                    "type": "boolean",
                    "description": "On book file delete flag.\n"
                },
                "onBookFileDeleteForUpgrade": {
                    "type": "boolean",
                    "description": "On book file delete for upgrade flag.\n"
                },
                "onBookRetag": {
                    "type": "boolean",
                    "description": "On book retag flag.\n"
                },
                "onGrab": {
                    "type": "boolean",
                    "description": "On grab flag.\n"
                },
                "onHealthIssue": {
                    "type": "boolean",
                    "description": "On health issue flag.\n"
                },
                "onReleaseImport": {
                    "type": "boolean",
                    "description": "On release import flag.\n"
                },
                "onRename": {
                    "type": "boolean",
                    "description": "On rename flag.\n"
                },
                "onUpgrade": {
                    "type": "boolean",
                    "description": "On upgrade flag.\n"
                },
                "password": {
                    "type": "string",
                    "description": "Password.\n",
                    "secret": true
                },
                "port": {
                    "type": "integer",
                    "description": "Port.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                },
                "updateLibrary": {
                    "type": "boolean",
                    "description": "Update library flag.\n"
                },
                "urlBase": {
                    "type": "string",
                    "description": "URL base.\n"
                },
                "useSsl": {
                    "type": "boolean",
                    "description": "Use SSL flag.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username.\n"
                }
            },
            "required": [
                "host",
                "includeHealthWarnings",
                "name",
                "notify",
                "onApplicationUpdate",
                "onAuthorDelete",
                "onBookDelete",
                "onBookFileDelete",
                "onBookFileDeleteForUpgrade",
                "onBookRetag",
                "onGrab",
                "onHealthIssue",
                "onReleaseImport",
                "onRename",
                "onUpgrade",
                "password",
                "port",
                "tags",
                "updateLibrary",
                "urlBase",
                "useSsl",
                "username"
            ],
            "inputProperties": {
                "host": {
                    "type": "string",
                    "description": "Host.\n"
                },
                "includeHealthWarnings": {
                    "type": "boolean",
                    "description": "Include health warnings.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Notification name.\n"
                },
                "notify": {
                    "type": "boolean",
                    "description": "Notification flag.\n"
                },
                "onApplicationUpdate": {
                    "type": "boolean",
                    "description": "On application update flag.\n"
                },
                "onAuthorDelete": {
                    "type": "boolean",
                    "description": "On author deleted flag.\n"
                },
                "onBookDelete": {
                    "type": "boolean",
                    "description": "On book delete flag.\n"
                },
                "onBookFileDelete": {
                    "type": "boolean",
                    "description": "On book file delete flag.\n"
                },
                "onBookFileDeleteForUpgrade": {
                    "type": "boolean",
                    "description": "On book file delete for upgrade flag.\n"
                },
                "onBookRetag": {
                    "type": "boolean",
                    "description": "On book retag flag.\n"
                },
                "onGrab": {
                    "type": "boolean",
                    "description": "On grab flag.\n"
                },
                "onHealthIssue": {
                    "type": "boolean",
                    "description": "On health issue flag.\n"
                },
                "onReleaseImport": {
                    "type": "boolean",
                    "description": "On release import flag.\n"
                },
                "onRename": {
                    "type": "boolean",
                    "description": "On rename flag.\n"
                },
                "onUpgrade": {
                    "type": "boolean",
                    "description": "On upgrade flag.\n"
                },
                "password": {
                    "type": "string",
                    "description": "Password.\n",
                    "secret": true
                },
                "port": {
                    "type": "integer",
                    "description": "Port.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                },
                "updateLibrary": {
                    "type": "boolean",
                    "description": "Update library flag.\n"
                },
                "urlBase": {
                    "type": "string",
                    "description": "URL base.\n"
                },
                "useSsl": {
                    "type": "boolean",
                    "description": "Use SSL flag.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username.\n"
                }
            },
            "requiredInputs": [
                "host",
                "name",
                "port"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering NotificationSubsonic resources.\n",
                "properties": {
                    "host": {
                        "type": "string",
                        "description": "Host.\n"
                    },
                    "includeHealthWarnings": {
                        "type": "boolean",
                        "description": "Include health warnings.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Notification name.\n"
                    },
                    "notify": {
                        "type": "boolean",
                        "description": "Notification flag.\n"
                    },
                    "onApplicationUpdate": {
                        "type": "boolean",
                        "description": "On application update flag.\n"
                    },
                    "onAuthorDelete": {
                        "type": "boolean",
                        "description": "On author deleted flag.\n"
                    },
                    "onBookDelete": {
                        "type": "boolean",
                        "description": "On book delete flag.\n"
                    },
                    "onBookFileDelete": {
                        "type": "boolean",
                        "description": "On book file delete flag.\n"
                    },
                    "onBookFileDeleteForUpgrade": {
                        "type": "boolean",
                        "description": "On book file delete for upgrade flag.\n"
                    },
                    "onBookRetag": {
                        "type": "boolean",
                        "description": "On book retag flag.\n"
                    },
                    "onGrab": {
                        "type": "boolean",
                        "description": "On grab flag.\n"
                    },
                    "onHealthIssue": {
                        "type": "boolean",
                        "description": "On health issue flag.\n"
                    },
                    "onReleaseImport": {
                        "type": "boolean",
                        "description": "On release import flag.\n"
                    },
                    "onRename": {
                        "type": "boolean",
                        "description": "On rename flag.\n"
                    },
                    "onUpgrade": {
                        "type": "boolean",
                        "description": "On upgrade flag.\n"
                    },
                    "password": {
                        "type": "string",
                        "description": "Password.\n",
                        "secret": true
                    },
                    "port": {
                        "type": "integer",
                        "description": "Port.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "List of associated tags.\n"
                    },
                    "updateLibrary": {
                        "type": "boolean",
                        "description": "Update library flag.\n"
                    },
                    "urlBase": {
                        "type": "string",
                        "description": "URL base.\n"
                    },
                    "useSsl": {
                        "type": "boolean",
                        "description": "Use SSL flag.\n"
                    },
                    "username": {
                        "type": "string",
                        "description": "Username.\n"
                    }
                },
                "type": "object"
            }
        },
        "readarr:Notifications/notificationSynologyIndexer:NotificationSynologyIndexer": {
            "description": "\u003c!-- subcategory:Notifications --\u003eNotification Synology resource.\nFor more information refer to [Notification](https://wiki.servarr.com/readarr/settings#connect) and [Synology](https://wiki.servarr.com/readarr/supported#synologyindexer).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as readarr from \"@maienm/pulumi-readarr\";\n\nconst example = new readarr.notifications.NotificationSynologyIndexer(\"example\", {\n    name: \"Example\",\n    onAuthorDelete: false,\n    onBookDelete: false,\n    onBookFileDelete: true,\n    onBookFileDeleteForUpgrade: false,\n    onBookRetag: true,\n    onReleaseImport: false,\n    onRename: false,\n    onUpgrade: false,\n    updateLibrary: true,\n});\n```\n```python\nimport pulumi\nimport pulumi_readarr as readarr\n\nexample = readarr.notifications.NotificationSynologyIndexer(\"example\",\n    name=\"Example\",\n    on_author_delete=False,\n    on_book_delete=False,\n    on_book_file_delete=True,\n    on_book_file_delete_for_upgrade=False,\n    on_book_retag=True,\n    on_release_import=False,\n    on_rename=False,\n    on_upgrade=False,\n    update_library=True)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Readarr = MaienM.Readarr;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Readarr.Notifications.NotificationSynologyIndexer(\"example\", new()\n    {\n        Name = \"Example\",\n        OnAuthorDelete = false,\n        OnBookDelete = false,\n        OnBookFileDelete = true,\n        OnBookFileDeleteForUpgrade = false,\n        OnBookRetag = true,\n        OnReleaseImport = false,\n        OnRename = false,\n        OnUpgrade = false,\n        UpdateLibrary = true,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/MaienM/pulumi-readarr/sdk/v2/go/readarr/Notifications\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := Notifications.NewNotificationSynologyIndexer(ctx, \"example\", \u0026Notifications.NotificationSynologyIndexerArgs{\n\t\t\tName:                       pulumi.String(\"Example\"),\n\t\t\tOnAuthorDelete:             pulumi.Bool(false),\n\t\t\tOnBookDelete:               pulumi.Bool(false),\n\t\t\tOnBookFileDelete:           pulumi.Bool(true),\n\t\t\tOnBookFileDeleteForUpgrade: pulumi.Bool(false),\n\t\t\tOnBookRetag:                pulumi.Bool(true),\n\t\t\tOnReleaseImport:            pulumi.Bool(false),\n\t\t\tOnRename:                   pulumi.Bool(false),\n\t\t\tOnUpgrade:                  pulumi.Bool(false),\n\t\t\tUpdateLibrary:              pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.readarr.Notifications.NotificationSynologyIndexer;\nimport com.pulumi.readarr.Notifications.NotificationSynologyIndexerArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new NotificationSynologyIndexer(\"example\", NotificationSynologyIndexerArgs.builder()        \n            .name(\"Example\")\n            .onAuthorDelete(false)\n            .onBookDelete(false)\n            .onBookFileDelete(true)\n            .onBookFileDeleteForUpgrade(false)\n            .onBookRetag(true)\n            .onReleaseImport(false)\n            .onRename(false)\n            .onUpgrade(false)\n            .updateLibrary(true)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: readarr:Notifications:NotificationSynologyIndexer\n    properties:\n      name: Example\n      onAuthorDelete: false\n      onBookDelete: false\n      onBookFileDelete: true\n      onBookFileDeleteForUpgrade: false\n      onBookRetag: true\n      onReleaseImport: false\n      onRename: false\n      onUpgrade: false\n      updateLibrary: true\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nimport using the API/UI ID\n\n```sh\n $ pulumi import readarr:Notifications/notificationSynologyIndexer:NotificationSynologyIndexer example 1\n```\n\n ",
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Notification name.\n"
                },
                "onAuthorDelete": {
                    "type": "boolean",
                    "description": "On author deleted flag.\n"
                },
                "onBookDelete": {
                    "type": "boolean",
                    "description": "On book delete flag.\n"
                },
                "onBookFileDelete": {
                    "type": "boolean",
                    "description": "On book file delete flag.\n"
                },
                "onBookFileDeleteForUpgrade": {
                    "type": "boolean",
                    "description": "On book file delete for upgrade flag.\n"
                },
                "onBookRetag": {
                    "type": "boolean",
                    "description": "On book retag flag.\n"
                },
                "onReleaseImport": {
                    "type": "boolean",
                    "description": "On release import flag.\n"
                },
                "onRename": {
                    "type": "boolean",
                    "description": "On rename flag.\n"
                },
                "onUpgrade": {
                    "type": "boolean",
                    "description": "On upgrade flag.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                },
                "updateLibrary": {
                    "type": "boolean",
                    "description": "Update library flag.\n"
                }
            },
            "required": [
                "name",
                "onAuthorDelete",
                "onBookDelete",
                "onBookFileDelete",
                "onBookFileDeleteForUpgrade",
                "onBookRetag",
                "onReleaseImport",
                "onRename",
                "onUpgrade",
                "tags",
                "updateLibrary"
            ],
            "inputProperties": {
                "name": {
                    "type": "string",
                    "description": "Notification name.\n"
                },
                "onAuthorDelete": {
                    "type": "boolean",
                    "description": "On author deleted flag.\n"
                },
                "onBookDelete": {
                    "type": "boolean",
                    "description": "On book delete flag.\n"
                },
                "onBookFileDelete": {
                    "type": "boolean",
                    "description": "On book file delete flag.\n"
                },
                "onBookFileDeleteForUpgrade": {
                    "type": "boolean",
                    "description": "On book file delete for upgrade flag.\n"
                },
                "onBookRetag": {
                    "type": "boolean",
                    "description": "On book retag flag.\n"
                },
                "onReleaseImport": {
                    "type": "boolean",
                    "description": "On release import flag.\n"
                },
                "onRename": {
                    "type": "boolean",
                    "description": "On rename flag.\n"
                },
                "onUpgrade": {
                    "type": "boolean",
                    "description": "On upgrade flag.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                },
                "updateLibrary": {
                    "type": "boolean",
                    "description": "Update library flag.\n"
                }
            },
            "requiredInputs": [
                "name"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering NotificationSynologyIndexer resources.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Notification name.\n"
                    },
                    "onAuthorDelete": {
                        "type": "boolean",
                        "description": "On author deleted flag.\n"
                    },
                    "onBookDelete": {
                        "type": "boolean",
                        "description": "On book delete flag.\n"
                    },
                    "onBookFileDelete": {
                        "type": "boolean",
                        "description": "On book file delete flag.\n"
                    },
                    "onBookFileDeleteForUpgrade": {
                        "type": "boolean",
                        "description": "On book file delete for upgrade flag.\n"
                    },
                    "onBookRetag": {
                        "type": "boolean",
                        "description": "On book retag flag.\n"
                    },
                    "onReleaseImport": {
                        "type": "boolean",
                        "description": "On release import flag.\n"
                    },
                    "onRename": {
                        "type": "boolean",
                        "description": "On rename flag.\n"
                    },
                    "onUpgrade": {
                        "type": "boolean",
                        "description": "On upgrade flag.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "List of associated tags.\n"
                    },
                    "updateLibrary": {
                        "type": "boolean",
                        "description": "Update library flag.\n"
                    }
                },
                "type": "object"
            }
        },
        "readarr:Notifications/notificationTelegram:NotificationTelegram": {
            "description": "\u003c!-- subcategory:Notifications --\u003eNotification Telegram resource.\nFor more information refer to [Notification](https://wiki.servarr.com/readarr/settings#connect) and [Telegram](https://wiki.servarr.com/readarr/supported#telegram).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as readarr from \"@maienm/pulumi-readarr\";\n\nconst example = new readarr.notifications.NotificationTelegram(\"example\", {\n    botToken: \"Token\",\n    chatId: \"ChatID01\",\n    includeHealthWarnings: false,\n    name: \"Example\",\n    onAuthorDelete: false,\n    onBookDelete: false,\n    onBookFileDelete: true,\n    onBookFileDeleteForUpgrade: false,\n    onDownloadFailure: false,\n    onGrab: false,\n    onHealthIssue: false,\n    onImportFailure: true,\n    onReleaseImport: false,\n    onUpgrade: false,\n});\n```\n```python\nimport pulumi\nimport pulumi_readarr as readarr\n\nexample = readarr.notifications.NotificationTelegram(\"example\",\n    bot_token=\"Token\",\n    chat_id=\"ChatID01\",\n    include_health_warnings=False,\n    name=\"Example\",\n    on_author_delete=False,\n    on_book_delete=False,\n    on_book_file_delete=True,\n    on_book_file_delete_for_upgrade=False,\n    on_download_failure=False,\n    on_grab=False,\n    on_health_issue=False,\n    on_import_failure=True,\n    on_release_import=False,\n    on_upgrade=False)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Readarr = MaienM.Readarr;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Readarr.Notifications.NotificationTelegram(\"example\", new()\n    {\n        BotToken = \"Token\",\n        ChatId = \"ChatID01\",\n        IncludeHealthWarnings = false,\n        Name = \"Example\",\n        OnAuthorDelete = false,\n        OnBookDelete = false,\n        OnBookFileDelete = true,\n        OnBookFileDeleteForUpgrade = false,\n        OnDownloadFailure = false,\n        OnGrab = false,\n        OnHealthIssue = false,\n        OnImportFailure = true,\n        OnReleaseImport = false,\n        OnUpgrade = false,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/MaienM/pulumi-readarr/sdk/v2/go/readarr/Notifications\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := Notifications.NewNotificationTelegram(ctx, \"example\", \u0026Notifications.NotificationTelegramArgs{\n\t\t\tBotToken:                   pulumi.String(\"Token\"),\n\t\t\tChatId:                     pulumi.String(\"ChatID01\"),\n\t\t\tIncludeHealthWarnings:      pulumi.Bool(false),\n\t\t\tName:                       pulumi.String(\"Example\"),\n\t\t\tOnAuthorDelete:             pulumi.Bool(false),\n\t\t\tOnBookDelete:               pulumi.Bool(false),\n\t\t\tOnBookFileDelete:           pulumi.Bool(true),\n\t\t\tOnBookFileDeleteForUpgrade: pulumi.Bool(false),\n\t\t\tOnDownloadFailure:          pulumi.Bool(false),\n\t\t\tOnGrab:                     pulumi.Bool(false),\n\t\t\tOnHealthIssue:              pulumi.Bool(false),\n\t\t\tOnImportFailure:            pulumi.Bool(true),\n\t\t\tOnReleaseImport:            pulumi.Bool(false),\n\t\t\tOnUpgrade:                  pulumi.Bool(false),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.readarr.Notifications.NotificationTelegram;\nimport com.pulumi.readarr.Notifications.NotificationTelegramArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new NotificationTelegram(\"example\", NotificationTelegramArgs.builder()        \n            .botToken(\"Token\")\n            .chatId(\"ChatID01\")\n            .includeHealthWarnings(false)\n            .name(\"Example\")\n            .onAuthorDelete(false)\n            .onBookDelete(false)\n            .onBookFileDelete(true)\n            .onBookFileDeleteForUpgrade(false)\n            .onDownloadFailure(false)\n            .onGrab(false)\n            .onHealthIssue(false)\n            .onImportFailure(true)\n            .onReleaseImport(false)\n            .onUpgrade(false)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: readarr:Notifications:NotificationTelegram\n    properties:\n      botToken: Token\n      chatId: ChatID01\n      includeHealthWarnings: false\n      name: Example\n      onAuthorDelete: false\n      onBookDelete: false\n      onBookFileDelete: true\n      onBookFileDeleteForUpgrade: false\n      onDownloadFailure: false\n      onGrab: false\n      onHealthIssue: false\n      onImportFailure: true\n      onReleaseImport: false\n      onUpgrade: false\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nimport using the API/UI ID\n\n```sh\n $ pulumi import readarr:Notifications/notificationTelegram:NotificationTelegram example 1\n```\n\n ",
            "properties": {
                "botToken": {
                    "type": "string",
                    "description": "Bot token.\n",
                    "secret": true
                },
                "chatId": {
                    "type": "string",
                    "description": "Chat ID.\n"
                },
                "includeHealthWarnings": {
                    "type": "boolean",
                    "description": "Include health warnings.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Notification name.\n"
                },
                "onApplicationUpdate": {
                    "type": "boolean",
                    "description": "On application update flag.\n"
                },
                "onAuthorDelete": {
                    "type": "boolean",
                    "description": "On author deleted flag.\n"
                },
                "onBookDelete": {
                    "type": "boolean",
                    "description": "On book delete flag.\n"
                },
                "onBookFileDelete": {
                    "type": "boolean",
                    "description": "On book file delete flag.\n"
                },
                "onBookFileDeleteForUpgrade": {
                    "type": "boolean",
                    "description": "On book file delete for upgrade flag.\n"
                },
                "onDownloadFailure": {
                    "type": "boolean",
                    "description": "On download failure flag.\n"
                },
                "onGrab": {
                    "type": "boolean",
                    "description": "On grab flag.\n"
                },
                "onHealthIssue": {
                    "type": "boolean",
                    "description": "On health issue flag.\n"
                },
                "onImportFailure": {
                    "type": "boolean",
                    "description": "On import failure flag.\n"
                },
                "onReleaseImport": {
                    "type": "boolean",
                    "description": "On release import flag.\n"
                },
                "onUpgrade": {
                    "type": "boolean",
                    "description": "On upgrade flag.\n"
                },
                "sendSilently": {
                    "type": "boolean",
                    "description": "Send silently flag.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                }
            },
            "required": [
                "botToken",
                "chatId",
                "includeHealthWarnings",
                "name",
                "onApplicationUpdate",
                "onAuthorDelete",
                "onBookDelete",
                "onBookFileDelete",
                "onBookFileDeleteForUpgrade",
                "onDownloadFailure",
                "onGrab",
                "onHealthIssue",
                "onImportFailure",
                "onReleaseImport",
                "onUpgrade",
                "sendSilently",
                "tags"
            ],
            "inputProperties": {
                "botToken": {
                    "type": "string",
                    "description": "Bot token.\n",
                    "secret": true
                },
                "chatId": {
                    "type": "string",
                    "description": "Chat ID.\n"
                },
                "includeHealthWarnings": {
                    "type": "boolean",
                    "description": "Include health warnings.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Notification name.\n"
                },
                "onApplicationUpdate": {
                    "type": "boolean",
                    "description": "On application update flag.\n"
                },
                "onAuthorDelete": {
                    "type": "boolean",
                    "description": "On author deleted flag.\n"
                },
                "onBookDelete": {
                    "type": "boolean",
                    "description": "On book delete flag.\n"
                },
                "onBookFileDelete": {
                    "type": "boolean",
                    "description": "On book file delete flag.\n"
                },
                "onBookFileDeleteForUpgrade": {
                    "type": "boolean",
                    "description": "On book file delete for upgrade flag.\n"
                },
                "onDownloadFailure": {
                    "type": "boolean",
                    "description": "On download failure flag.\n"
                },
                "onGrab": {
                    "type": "boolean",
                    "description": "On grab flag.\n"
                },
                "onHealthIssue": {
                    "type": "boolean",
                    "description": "On health issue flag.\n"
                },
                "onImportFailure": {
                    "type": "boolean",
                    "description": "On import failure flag.\n"
                },
                "onReleaseImport": {
                    "type": "boolean",
                    "description": "On release import flag.\n"
                },
                "onUpgrade": {
                    "type": "boolean",
                    "description": "On upgrade flag.\n"
                },
                "sendSilently": {
                    "type": "boolean",
                    "description": "Send silently flag.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                }
            },
            "requiredInputs": [
                "botToken",
                "chatId",
                "name"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering NotificationTelegram resources.\n",
                "properties": {
                    "botToken": {
                        "type": "string",
                        "description": "Bot token.\n",
                        "secret": true
                    },
                    "chatId": {
                        "type": "string",
                        "description": "Chat ID.\n"
                    },
                    "includeHealthWarnings": {
                        "type": "boolean",
                        "description": "Include health warnings.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Notification name.\n"
                    },
                    "onApplicationUpdate": {
                        "type": "boolean",
                        "description": "On application update flag.\n"
                    },
                    "onAuthorDelete": {
                        "type": "boolean",
                        "description": "On author deleted flag.\n"
                    },
                    "onBookDelete": {
                        "type": "boolean",
                        "description": "On book delete flag.\n"
                    },
                    "onBookFileDelete": {
                        "type": "boolean",
                        "description": "On book file delete flag.\n"
                    },
                    "onBookFileDeleteForUpgrade": {
                        "type": "boolean",
                        "description": "On book file delete for upgrade flag.\n"
                    },
                    "onDownloadFailure": {
                        "type": "boolean",
                        "description": "On download failure flag.\n"
                    },
                    "onGrab": {
                        "type": "boolean",
                        "description": "On grab flag.\n"
                    },
                    "onHealthIssue": {
                        "type": "boolean",
                        "description": "On health issue flag.\n"
                    },
                    "onImportFailure": {
                        "type": "boolean",
                        "description": "On import failure flag.\n"
                    },
                    "onReleaseImport": {
                        "type": "boolean",
                        "description": "On release import flag.\n"
                    },
                    "onUpgrade": {
                        "type": "boolean",
                        "description": "On upgrade flag.\n"
                    },
                    "sendSilently": {
                        "type": "boolean",
                        "description": "Send silently flag.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "List of associated tags.\n"
                    }
                },
                "type": "object"
            }
        },
        "readarr:Notifications/notificationTwitter:NotificationTwitter": {
            "description": "\u003c!-- subcategory:Notifications --\u003eNotification Twitter resource.\nFor more information refer to [Notification](https://wiki.servarr.com/readarr/settings#connect) and [Twitter](https://wiki.servarr.com/readarr/supported#twitter).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as readarr from \"@maienm/pulumi-readarr\";\n\nconst example = new readarr.notifications.NotificationTwitter(\"example\", {\n    accessToken: \"Token\",\n    accessTokenSecret: \"TokenSecret\",\n    consumerKey: \"Key\",\n    consumerSecret: \"Secret\",\n    includeHealthWarnings: false,\n    mention: \"someone\",\n    name: \"Example\",\n    onAuthorDelete: true,\n    onBookDelete: true,\n    onBookFileDelete: false,\n    onBookFileDeleteForUpgrade: false,\n    onDownloadFailure: false,\n    onGrab: false,\n    onHealthIssue: false,\n    onImportFailure: false,\n    onReleaseImport: false,\n    onUpgrade: false,\n});\n```\n```python\nimport pulumi\nimport pulumi_readarr as readarr\n\nexample = readarr.notifications.NotificationTwitter(\"example\",\n    access_token=\"Token\",\n    access_token_secret=\"TokenSecret\",\n    consumer_key=\"Key\",\n    consumer_secret=\"Secret\",\n    include_health_warnings=False,\n    mention=\"someone\",\n    name=\"Example\",\n    on_author_delete=True,\n    on_book_delete=True,\n    on_book_file_delete=False,\n    on_book_file_delete_for_upgrade=False,\n    on_download_failure=False,\n    on_grab=False,\n    on_health_issue=False,\n    on_import_failure=False,\n    on_release_import=False,\n    on_upgrade=False)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Readarr = MaienM.Readarr;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Readarr.Notifications.NotificationTwitter(\"example\", new()\n    {\n        AccessToken = \"Token\",\n        AccessTokenSecret = \"TokenSecret\",\n        ConsumerKey = \"Key\",\n        ConsumerSecret = \"Secret\",\n        IncludeHealthWarnings = false,\n        Mention = \"someone\",\n        Name = \"Example\",\n        OnAuthorDelete = true,\n        OnBookDelete = true,\n        OnBookFileDelete = false,\n        OnBookFileDeleteForUpgrade = false,\n        OnDownloadFailure = false,\n        OnGrab = false,\n        OnHealthIssue = false,\n        OnImportFailure = false,\n        OnReleaseImport = false,\n        OnUpgrade = false,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/MaienM/pulumi-readarr/sdk/v2/go/readarr/Notifications\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := Notifications.NewNotificationTwitter(ctx, \"example\", \u0026Notifications.NotificationTwitterArgs{\n\t\t\tAccessToken:                pulumi.String(\"Token\"),\n\t\t\tAccessTokenSecret:          pulumi.String(\"TokenSecret\"),\n\t\t\tConsumerKey:                pulumi.String(\"Key\"),\n\t\t\tConsumerSecret:             pulumi.String(\"Secret\"),\n\t\t\tIncludeHealthWarnings:      pulumi.Bool(false),\n\t\t\tMention:                    pulumi.String(\"someone\"),\n\t\t\tName:                       pulumi.String(\"Example\"),\n\t\t\tOnAuthorDelete:             pulumi.Bool(true),\n\t\t\tOnBookDelete:               pulumi.Bool(true),\n\t\t\tOnBookFileDelete:           pulumi.Bool(false),\n\t\t\tOnBookFileDeleteForUpgrade: pulumi.Bool(false),\n\t\t\tOnDownloadFailure:          pulumi.Bool(false),\n\t\t\tOnGrab:                     pulumi.Bool(false),\n\t\t\tOnHealthIssue:              pulumi.Bool(false),\n\t\t\tOnImportFailure:            pulumi.Bool(false),\n\t\t\tOnReleaseImport:            pulumi.Bool(false),\n\t\t\tOnUpgrade:                  pulumi.Bool(false),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.readarr.Notifications.NotificationTwitter;\nimport com.pulumi.readarr.Notifications.NotificationTwitterArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new NotificationTwitter(\"example\", NotificationTwitterArgs.builder()        \n            .accessToken(\"Token\")\n            .accessTokenSecret(\"TokenSecret\")\n            .consumerKey(\"Key\")\n            .consumerSecret(\"Secret\")\n            .includeHealthWarnings(false)\n            .mention(\"someone\")\n            .name(\"Example\")\n            .onAuthorDelete(true)\n            .onBookDelete(true)\n            .onBookFileDelete(false)\n            .onBookFileDeleteForUpgrade(false)\n            .onDownloadFailure(false)\n            .onGrab(false)\n            .onHealthIssue(false)\n            .onImportFailure(false)\n            .onReleaseImport(false)\n            .onUpgrade(false)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: readarr:Notifications:NotificationTwitter\n    properties:\n      accessToken: Token\n      accessTokenSecret: TokenSecret\n      consumerKey: Key\n      consumerSecret: Secret\n      includeHealthWarnings: false\n      mention: someone\n      name: Example\n      onAuthorDelete: true\n      onBookDelete: true\n      onBookFileDelete: false\n      onBookFileDeleteForUpgrade: false\n      onDownloadFailure: false\n      onGrab: false\n      onHealthIssue: false\n      onImportFailure: false\n      onReleaseImport: false\n      onUpgrade: false\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nimport using the API/UI ID\n\n```sh\n $ pulumi import readarr:Notifications/notificationTwitter:NotificationTwitter example 1\n```\n\n ",
            "properties": {
                "accessToken": {
                    "type": "string",
                    "description": "Access token.\n",
                    "secret": true
                },
                "accessTokenSecret": {
                    "type": "string",
                    "description": "Access token secret.\n",
                    "secret": true
                },
                "consumerKey": {
                    "type": "string",
                    "description": "Consumer Key.\n",
                    "secret": true
                },
                "consumerSecret": {
                    "type": "string",
                    "description": "Consumer Secret.\n",
                    "secret": true
                },
                "directMessage": {
                    "type": "boolean",
                    "description": "Direct message flag.\n"
                },
                "includeHealthWarnings": {
                    "type": "boolean",
                    "description": "Include health warnings.\n"
                },
                "mention": {
                    "type": "string",
                    "description": "Mention.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Notification name.\n"
                },
                "onApplicationUpdate": {
                    "type": "boolean",
                    "description": "On application update flag.\n"
                },
                "onAuthorDelete": {
                    "type": "boolean",
                    "description": "On author deleted flag.\n"
                },
                "onBookDelete": {
                    "type": "boolean",
                    "description": "On book delete flag.\n"
                },
                "onBookFileDelete": {
                    "type": "boolean",
                    "description": "On book file delete flag.\n"
                },
                "onBookFileDeleteForUpgrade": {
                    "type": "boolean",
                    "description": "On book file delete for upgrade flag.\n"
                },
                "onDownloadFailure": {
                    "type": "boolean",
                    "description": "On download failure flag.\n"
                },
                "onGrab": {
                    "type": "boolean",
                    "description": "On grab flag.\n"
                },
                "onHealthIssue": {
                    "type": "boolean",
                    "description": "On health issue flag.\n"
                },
                "onImportFailure": {
                    "type": "boolean",
                    "description": "On import failure flag.\n"
                },
                "onReleaseImport": {
                    "type": "boolean",
                    "description": "On release import flag.\n"
                },
                "onUpgrade": {
                    "type": "boolean",
                    "description": "On upgrade flag.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                }
            },
            "required": [
                "accessToken",
                "accessTokenSecret",
                "consumerKey",
                "consumerSecret",
                "directMessage",
                "includeHealthWarnings",
                "mention",
                "name",
                "onApplicationUpdate",
                "onAuthorDelete",
                "onBookDelete",
                "onBookFileDelete",
                "onBookFileDeleteForUpgrade",
                "onDownloadFailure",
                "onGrab",
                "onHealthIssue",
                "onImportFailure",
                "onReleaseImport",
                "onUpgrade",
                "tags"
            ],
            "inputProperties": {
                "accessToken": {
                    "type": "string",
                    "description": "Access token.\n",
                    "secret": true
                },
                "accessTokenSecret": {
                    "type": "string",
                    "description": "Access token secret.\n",
                    "secret": true
                },
                "consumerKey": {
                    "type": "string",
                    "description": "Consumer Key.\n",
                    "secret": true
                },
                "consumerSecret": {
                    "type": "string",
                    "description": "Consumer Secret.\n",
                    "secret": true
                },
                "directMessage": {
                    "type": "boolean",
                    "description": "Direct message flag.\n"
                },
                "includeHealthWarnings": {
                    "type": "boolean",
                    "description": "Include health warnings.\n"
                },
                "mention": {
                    "type": "string",
                    "description": "Mention.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Notification name.\n"
                },
                "onApplicationUpdate": {
                    "type": "boolean",
                    "description": "On application update flag.\n"
                },
                "onAuthorDelete": {
                    "type": "boolean",
                    "description": "On author deleted flag.\n"
                },
                "onBookDelete": {
                    "type": "boolean",
                    "description": "On book delete flag.\n"
                },
                "onBookFileDelete": {
                    "type": "boolean",
                    "description": "On book file delete flag.\n"
                },
                "onBookFileDeleteForUpgrade": {
                    "type": "boolean",
                    "description": "On book file delete for upgrade flag.\n"
                },
                "onDownloadFailure": {
                    "type": "boolean",
                    "description": "On download failure flag.\n"
                },
                "onGrab": {
                    "type": "boolean",
                    "description": "On grab flag.\n"
                },
                "onHealthIssue": {
                    "type": "boolean",
                    "description": "On health issue flag.\n"
                },
                "onImportFailure": {
                    "type": "boolean",
                    "description": "On import failure flag.\n"
                },
                "onReleaseImport": {
                    "type": "boolean",
                    "description": "On release import flag.\n"
                },
                "onUpgrade": {
                    "type": "boolean",
                    "description": "On upgrade flag.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                }
            },
            "requiredInputs": [
                "accessToken",
                "accessTokenSecret",
                "consumerKey",
                "consumerSecret",
                "mention",
                "name"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering NotificationTwitter resources.\n",
                "properties": {
                    "accessToken": {
                        "type": "string",
                        "description": "Access token.\n",
                        "secret": true
                    },
                    "accessTokenSecret": {
                        "type": "string",
                        "description": "Access token secret.\n",
                        "secret": true
                    },
                    "consumerKey": {
                        "type": "string",
                        "description": "Consumer Key.\n",
                        "secret": true
                    },
                    "consumerSecret": {
                        "type": "string",
                        "description": "Consumer Secret.\n",
                        "secret": true
                    },
                    "directMessage": {
                        "type": "boolean",
                        "description": "Direct message flag.\n"
                    },
                    "includeHealthWarnings": {
                        "type": "boolean",
                        "description": "Include health warnings.\n"
                    },
                    "mention": {
                        "type": "string",
                        "description": "Mention.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Notification name.\n"
                    },
                    "onApplicationUpdate": {
                        "type": "boolean",
                        "description": "On application update flag.\n"
                    },
                    "onAuthorDelete": {
                        "type": "boolean",
                        "description": "On author deleted flag.\n"
                    },
                    "onBookDelete": {
                        "type": "boolean",
                        "description": "On book delete flag.\n"
                    },
                    "onBookFileDelete": {
                        "type": "boolean",
                        "description": "On book file delete flag.\n"
                    },
                    "onBookFileDeleteForUpgrade": {
                        "type": "boolean",
                        "description": "On book file delete for upgrade flag.\n"
                    },
                    "onDownloadFailure": {
                        "type": "boolean",
                        "description": "On download failure flag.\n"
                    },
                    "onGrab": {
                        "type": "boolean",
                        "description": "On grab flag.\n"
                    },
                    "onHealthIssue": {
                        "type": "boolean",
                        "description": "On health issue flag.\n"
                    },
                    "onImportFailure": {
                        "type": "boolean",
                        "description": "On import failure flag.\n"
                    },
                    "onReleaseImport": {
                        "type": "boolean",
                        "description": "On release import flag.\n"
                    },
                    "onUpgrade": {
                        "type": "boolean",
                        "description": "On upgrade flag.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "List of associated tags.\n"
                    }
                },
                "type": "object"
            }
        },
        "readarr:Notifications/notificationWebhook:NotificationWebhook": {
            "description": "\u003c!-- subcategory:Notifications --\u003eNotification Webhook resource.\nFor more information refer to [Notification](https://wiki.servarr.com/readarr/settings#connect) and [Webhook](https://wiki.servarr.com/readarr/supported#webhook).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as readarr from \"@maienm/pulumi-readarr\";\n\nconst example = new readarr.notifications.NotificationWebhook(\"example\", {\n    includeHealthWarnings: false,\n    method: 1,\n    name: \"Example\",\n    onAuthorDelete: false,\n    onBookDelete: false,\n    onBookFileDelete: false,\n    onBookFileDeleteForUpgrade: true,\n    onBookRetag: true,\n    onGrab: false,\n    onHealthIssue: false,\n    onReleaseImport: false,\n    onRename: false,\n    onUpgrade: false,\n    password: \"examplePass\",\n    url: \"https://example.webhook.com/example\",\n    username: \"exampleUser\",\n});\n```\n```python\nimport pulumi\nimport pulumi_readarr as readarr\n\nexample = readarr.notifications.NotificationWebhook(\"example\",\n    include_health_warnings=False,\n    method=1,\n    name=\"Example\",\n    on_author_delete=False,\n    on_book_delete=False,\n    on_book_file_delete=False,\n    on_book_file_delete_for_upgrade=True,\n    on_book_retag=True,\n    on_grab=False,\n    on_health_issue=False,\n    on_release_import=False,\n    on_rename=False,\n    on_upgrade=False,\n    password=\"examplePass\",\n    url=\"https://example.webhook.com/example\",\n    username=\"exampleUser\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Readarr = MaienM.Readarr;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Readarr.Notifications.NotificationWebhook(\"example\", new()\n    {\n        IncludeHealthWarnings = false,\n        Method = 1,\n        Name = \"Example\",\n        OnAuthorDelete = false,\n        OnBookDelete = false,\n        OnBookFileDelete = false,\n        OnBookFileDeleteForUpgrade = true,\n        OnBookRetag = true,\n        OnGrab = false,\n        OnHealthIssue = false,\n        OnReleaseImport = false,\n        OnRename = false,\n        OnUpgrade = false,\n        Password = \"examplePass\",\n        Url = \"https://example.webhook.com/example\",\n        Username = \"exampleUser\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/MaienM/pulumi-readarr/sdk/v2/go/readarr/Notifications\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := Notifications.NewNotificationWebhook(ctx, \"example\", \u0026Notifications.NotificationWebhookArgs{\n\t\t\tIncludeHealthWarnings:      pulumi.Bool(false),\n\t\t\tMethod:                     pulumi.Int(1),\n\t\t\tName:                       pulumi.String(\"Example\"),\n\t\t\tOnAuthorDelete:             pulumi.Bool(false),\n\t\t\tOnBookDelete:               pulumi.Bool(false),\n\t\t\tOnBookFileDelete:           pulumi.Bool(false),\n\t\t\tOnBookFileDeleteForUpgrade: pulumi.Bool(true),\n\t\t\tOnBookRetag:                pulumi.Bool(true),\n\t\t\tOnGrab:                     pulumi.Bool(false),\n\t\t\tOnHealthIssue:              pulumi.Bool(false),\n\t\t\tOnReleaseImport:            pulumi.Bool(false),\n\t\t\tOnRename:                   pulumi.Bool(false),\n\t\t\tOnUpgrade:                  pulumi.Bool(false),\n\t\t\tPassword:                   pulumi.String(\"examplePass\"),\n\t\t\tUrl:                        pulumi.String(\"https://example.webhook.com/example\"),\n\t\t\tUsername:                   pulumi.String(\"exampleUser\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.readarr.Notifications.NotificationWebhook;\nimport com.pulumi.readarr.Notifications.NotificationWebhookArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new NotificationWebhook(\"example\", NotificationWebhookArgs.builder()        \n            .includeHealthWarnings(false)\n            .method(1)\n            .name(\"Example\")\n            .onAuthorDelete(false)\n            .onBookDelete(false)\n            .onBookFileDelete(false)\n            .onBookFileDeleteForUpgrade(true)\n            .onBookRetag(true)\n            .onGrab(false)\n            .onHealthIssue(false)\n            .onReleaseImport(false)\n            .onRename(false)\n            .onUpgrade(false)\n            .password(\"examplePass\")\n            .url(\"https://example.webhook.com/example\")\n            .username(\"exampleUser\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: readarr:Notifications:NotificationWebhook\n    properties:\n      includeHealthWarnings: false\n      method: 1\n      name: Example\n      onAuthorDelete: false\n      onBookDelete: false\n      onBookFileDelete: false\n      onBookFileDeleteForUpgrade: true\n      onBookRetag: true\n      onGrab: false\n      onHealthIssue: false\n      onReleaseImport: false\n      onRename: false\n      onUpgrade: false\n      password: examplePass\n      url: https://example.webhook.com/example\n      username: exampleUser\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nimport using the API/UI ID\n\n```sh\n $ pulumi import readarr:Notifications/notificationWebhook:NotificationWebhook example 1\n```\n\n ",
            "properties": {
                "includeHealthWarnings": {
                    "type": "boolean",
                    "description": "Include health warnings.\n"
                },
                "method": {
                    "type": "integer",
                    "description": "Method. `1` POST, `2` PUT.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Notification name.\n"
                },
                "onApplicationUpdate": {
                    "type": "boolean",
                    "description": "On application update flag.\n"
                },
                "onAuthorDelete": {
                    "type": "boolean",
                    "description": "On author deleted flag.\n"
                },
                "onBookDelete": {
                    "type": "boolean",
                    "description": "On book delete flag.\n"
                },
                "onBookFileDelete": {
                    "type": "boolean",
                    "description": "On book file delete flag.\n"
                },
                "onBookFileDeleteForUpgrade": {
                    "type": "boolean",
                    "description": "On book file delete for upgrade flag.\n"
                },
                "onBookRetag": {
                    "type": "boolean",
                    "description": "On book retag flag.\n"
                },
                "onGrab": {
                    "type": "boolean",
                    "description": "On grab flag.\n"
                },
                "onHealthIssue": {
                    "type": "boolean",
                    "description": "On health issue flag.\n"
                },
                "onReleaseImport": {
                    "type": "boolean",
                    "description": "On release import flag.\n"
                },
                "onRename": {
                    "type": "boolean",
                    "description": "On rename flag.\n"
                },
                "onUpgrade": {
                    "type": "boolean",
                    "description": "On upgrade flag.\n"
                },
                "password": {
                    "type": "string",
                    "description": "Password.\n",
                    "secret": true
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                },
                "url": {
                    "type": "string",
                    "description": "URL.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username.\n"
                }
            },
            "required": [
                "includeHealthWarnings",
                "method",
                "name",
                "onApplicationUpdate",
                "onAuthorDelete",
                "onBookDelete",
                "onBookFileDelete",
                "onBookFileDeleteForUpgrade",
                "onBookRetag",
                "onGrab",
                "onHealthIssue",
                "onReleaseImport",
                "onRename",
                "onUpgrade",
                "password",
                "tags",
                "url",
                "username"
            ],
            "inputProperties": {
                "includeHealthWarnings": {
                    "type": "boolean",
                    "description": "Include health warnings.\n"
                },
                "method": {
                    "type": "integer",
                    "description": "Method. `1` POST, `2` PUT.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Notification name.\n"
                },
                "onApplicationUpdate": {
                    "type": "boolean",
                    "description": "On application update flag.\n"
                },
                "onAuthorDelete": {
                    "type": "boolean",
                    "description": "On author deleted flag.\n"
                },
                "onBookDelete": {
                    "type": "boolean",
                    "description": "On book delete flag.\n"
                },
                "onBookFileDelete": {
                    "type": "boolean",
                    "description": "On book file delete flag.\n"
                },
                "onBookFileDeleteForUpgrade": {
                    "type": "boolean",
                    "description": "On book file delete for upgrade flag.\n"
                },
                "onBookRetag": {
                    "type": "boolean",
                    "description": "On book retag flag.\n"
                },
                "onGrab": {
                    "type": "boolean",
                    "description": "On grab flag.\n"
                },
                "onHealthIssue": {
                    "type": "boolean",
                    "description": "On health issue flag.\n"
                },
                "onReleaseImport": {
                    "type": "boolean",
                    "description": "On release import flag.\n"
                },
                "onRename": {
                    "type": "boolean",
                    "description": "On rename flag.\n"
                },
                "onUpgrade": {
                    "type": "boolean",
                    "description": "On upgrade flag.\n"
                },
                "password": {
                    "type": "string",
                    "description": "Password.\n",
                    "secret": true
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                },
                "url": {
                    "type": "string",
                    "description": "URL.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username.\n"
                }
            },
            "requiredInputs": [
                "method",
                "name",
                "url"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering NotificationWebhook resources.\n",
                "properties": {
                    "includeHealthWarnings": {
                        "type": "boolean",
                        "description": "Include health warnings.\n"
                    },
                    "method": {
                        "type": "integer",
                        "description": "Method. `1` POST, `2` PUT.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Notification name.\n"
                    },
                    "onApplicationUpdate": {
                        "type": "boolean",
                        "description": "On application update flag.\n"
                    },
                    "onAuthorDelete": {
                        "type": "boolean",
                        "description": "On author deleted flag.\n"
                    },
                    "onBookDelete": {
                        "type": "boolean",
                        "description": "On book delete flag.\n"
                    },
                    "onBookFileDelete": {
                        "type": "boolean",
                        "description": "On book file delete flag.\n"
                    },
                    "onBookFileDeleteForUpgrade": {
                        "type": "boolean",
                        "description": "On book file delete for upgrade flag.\n"
                    },
                    "onBookRetag": {
                        "type": "boolean",
                        "description": "On book retag flag.\n"
                    },
                    "onGrab": {
                        "type": "boolean",
                        "description": "On grab flag.\n"
                    },
                    "onHealthIssue": {
                        "type": "boolean",
                        "description": "On health issue flag.\n"
                    },
                    "onReleaseImport": {
                        "type": "boolean",
                        "description": "On release import flag.\n"
                    },
                    "onRename": {
                        "type": "boolean",
                        "description": "On rename flag.\n"
                    },
                    "onUpgrade": {
                        "type": "boolean",
                        "description": "On upgrade flag.\n"
                    },
                    "password": {
                        "type": "string",
                        "description": "Password.\n",
                        "secret": true
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "List of associated tags.\n"
                    },
                    "url": {
                        "type": "string",
                        "description": "URL.\n"
                    },
                    "username": {
                        "type": "string",
                        "description": "Username.\n"
                    }
                },
                "type": "object"
            }
        },
        "readarr:Profiles/customFormat:CustomFormat": {
            "description": "\u003c!-- subcategory:Profiles --\u003eCustom Format resource.\nFor more information refer to [Custom Format](https://wiki.servarr.com/readarr/settings#custom-formats).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as readarr from \"@maienm/pulumi-readarr\";\n\nconst example = new readarr.profiles.CustomFormat(\"example\", {\n    includeCustomFormatWhenRenaming: true,\n    name: \"Example\",\n    specifications: [\n        {\n            implementation: \"ReleaseTitleSpecification\",\n            name: \"Preferred Words\",\n            negate: false,\n            required: false,\n            value: \"\\\\b(SPARKS|Framestor)\\\\b\",\n        },\n        {\n            implementation: \"SizeSpecification\",\n            max: 100,\n            min: 0,\n            name: \"Size\",\n            negate: false,\n            required: false,\n        },\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_readarr as readarr\n\nexample = readarr.profiles.CustomFormat(\"example\",\n    include_custom_format_when_renaming=True,\n    name=\"Example\",\n    specifications=[\n        readarr.profiles.CustomFormatSpecificationArgs(\n            implementation=\"ReleaseTitleSpecification\",\n            name=\"Preferred Words\",\n            negate=False,\n            required=False,\n            value=\"\\\\b(SPARKS|Framestor)\\\\b\",\n        ),\n        readarr.profiles.CustomFormatSpecificationArgs(\n            implementation=\"SizeSpecification\",\n            max=100,\n            min=0,\n            name=\"Size\",\n            negate=False,\n            required=False,\n        ),\n    ])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Readarr = MaienM.Readarr;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Readarr.Profiles.CustomFormat(\"example\", new()\n    {\n        IncludeCustomFormatWhenRenaming = true,\n        Name = \"Example\",\n        Specifications = new[]\n        {\n            new Readarr.Profiles.Inputs.CustomFormatSpecificationArgs\n            {\n                Implementation = \"ReleaseTitleSpecification\",\n                Name = \"Preferred Words\",\n                Negate = false,\n                Required = false,\n                Value = \"\\\\b(SPARKS|Framestor)\\\\b\",\n            },\n            new Readarr.Profiles.Inputs.CustomFormatSpecificationArgs\n            {\n                Implementation = \"SizeSpecification\",\n                Max = 100,\n                Min = 0,\n                Name = \"Size\",\n                Negate = false,\n                Required = false,\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/MaienM/pulumi-readarr/sdk/v2/go/readarr/Profiles\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := Profiles.NewCustomFormat(ctx, \"example\", \u0026Profiles.CustomFormatArgs{\n\t\t\tIncludeCustomFormatWhenRenaming: pulumi.Bool(true),\n\t\t\tName:                            pulumi.String(\"Example\"),\n\t\t\tSpecifications: profiles.CustomFormatSpecificationArray{\n\t\t\t\t\u0026profiles.CustomFormatSpecificationArgs{\n\t\t\t\t\tImplementation: pulumi.String(\"ReleaseTitleSpecification\"),\n\t\t\t\t\tName:           pulumi.String(\"Preferred Words\"),\n\t\t\t\t\tNegate:         pulumi.Bool(false),\n\t\t\t\t\tRequired:       pulumi.Bool(false),\n\t\t\t\t\tValue:          pulumi.String(\"\\\\b(SPARKS|Framestor)\\\\b\"),\n\t\t\t\t},\n\t\t\t\t\u0026profiles.CustomFormatSpecificationArgs{\n\t\t\t\t\tImplementation: pulumi.String(\"SizeSpecification\"),\n\t\t\t\t\tMax:            pulumi.Int(100),\n\t\t\t\t\tMin:            pulumi.Int(0),\n\t\t\t\t\tName:           pulumi.String(\"Size\"),\n\t\t\t\t\tNegate:         pulumi.Bool(false),\n\t\t\t\t\tRequired:       pulumi.Bool(false),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.readarr.Profiles.CustomFormat;\nimport com.pulumi.readarr.Profiles.CustomFormatArgs;\nimport com.pulumi.readarr.Profiles.inputs.CustomFormatSpecificationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new CustomFormat(\"example\", CustomFormatArgs.builder()        \n            .includeCustomFormatWhenRenaming(true)\n            .name(\"Example\")\n            .specifications(            \n                CustomFormatSpecificationArgs.builder()\n                    .implementation(\"ReleaseTitleSpecification\")\n                    .name(\"Preferred Words\")\n                    .negate(false)\n                    .required(false)\n                    .value(\"\\\\b(SPARKS|Framestor)\\\\b\")\n                    .build(),\n                CustomFormatSpecificationArgs.builder()\n                    .implementation(\"SizeSpecification\")\n                    .max(100)\n                    .min(0)\n                    .name(\"Size\")\n                    .negate(false)\n                    .required(false)\n                    .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: readarr:Profiles:CustomFormat\n    properties:\n      includeCustomFormatWhenRenaming: true\n      name: Example\n      specifications:\n        - implementation: ReleaseTitleSpecification\n          name: Preferred Words\n          negate: false\n          required: false\n          value: \\b(SPARKS|Framestor)\\b\n        - implementation: SizeSpecification\n          max: 100\n          min: 0\n          name: Size\n          negate: false\n          required: false\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nimport using the API/UI ID\n\n```sh\n $ pulumi import readarr:Profiles/customFormat:CustomFormat example 1\n```\n\n ",
            "properties": {
                "includeCustomFormatWhenRenaming": {
                    "type": "boolean",
                    "description": "Include custom format when renaming flag.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Custom Format name.\n"
                },
                "specifications": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/readarr:Profiles/CustomFormatSpecification:CustomFormatSpecification"
                    },
                    "description": "Specifications.\n"
                }
            },
            "required": [
                "includeCustomFormatWhenRenaming",
                "name",
                "specifications"
            ],
            "inputProperties": {
                "includeCustomFormatWhenRenaming": {
                    "type": "boolean",
                    "description": "Include custom format when renaming flag.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Custom Format name.\n"
                },
                "specifications": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/readarr:Profiles/CustomFormatSpecification:CustomFormatSpecification"
                    },
                    "description": "Specifications.\n"
                }
            },
            "requiredInputs": [
                "name",
                "specifications"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering CustomFormat resources.\n",
                "properties": {
                    "includeCustomFormatWhenRenaming": {
                        "type": "boolean",
                        "description": "Include custom format when renaming flag.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Custom Format name.\n"
                    },
                    "specifications": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/readarr:Profiles/CustomFormatSpecification:CustomFormatSpecification"
                        },
                        "description": "Specifications.\n"
                    }
                },
                "type": "object"
            }
        },
        "readarr:Profiles/delayProfile:DelayProfile": {
            "description": "\u003c!-- subcategory:Profiles --\u003eDelay Profile resource.\nFor more information refer to [Delay Profiles](https://wiki.servarr.com/readarr/settings#delay-profiles) documentation.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as readarr from \"@maienm/pulumi-readarr\";\n\nconst example = new readarr.profiles.DelayProfile(\"example\", {\n    enableTorrent: true,\n    enableUsenet: true,\n    preferredProtocol: \"torrent\",\n    tags: [\n        1,\n        2,\n    ],\n    torrentDelay: 0,\n    usenetDelay: 0,\n});\n```\n```python\nimport pulumi\nimport pulumi_readarr as readarr\n\nexample = readarr.profiles.DelayProfile(\"example\",\n    enable_torrent=True,\n    enable_usenet=True,\n    preferred_protocol=\"torrent\",\n    tags=[\n        1,\n        2,\n    ],\n    torrent_delay=0,\n    usenet_delay=0)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Readarr = MaienM.Readarr;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Readarr.Profiles.DelayProfile(\"example\", new()\n    {\n        EnableTorrent = true,\n        EnableUsenet = true,\n        PreferredProtocol = \"torrent\",\n        Tags = new[]\n        {\n            1,\n            2,\n        },\n        TorrentDelay = 0,\n        UsenetDelay = 0,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/MaienM/pulumi-readarr/sdk/v2/go/readarr/Profiles\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := Profiles.NewDelayProfile(ctx, \"example\", \u0026Profiles.DelayProfileArgs{\n\t\t\tEnableTorrent:     pulumi.Bool(true),\n\t\t\tEnableUsenet:      pulumi.Bool(true),\n\t\t\tPreferredProtocol: pulumi.String(\"torrent\"),\n\t\t\tTags: pulumi.IntArray{\n\t\t\t\tpulumi.Int(1),\n\t\t\t\tpulumi.Int(2),\n\t\t\t},\n\t\t\tTorrentDelay: pulumi.Int(0),\n\t\t\tUsenetDelay:  pulumi.Int(0),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.readarr.Profiles.DelayProfile;\nimport com.pulumi.readarr.Profiles.DelayProfileArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new DelayProfile(\"example\", DelayProfileArgs.builder()        \n            .enableTorrent(true)\n            .enableUsenet(true)\n            .preferredProtocol(\"torrent\")\n            .tags(            \n                1,\n                2)\n            .torrentDelay(0)\n            .usenetDelay(0)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: readarr:Profiles:DelayProfile\n    properties:\n      enableTorrent: true\n      enableUsenet: true\n      preferredProtocol: torrent\n      tags:\n        - 1\n        - 2\n      torrentDelay: 0\n      usenetDelay: 0\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nimport using the API/UI ID\n\n```sh\n $ pulumi import readarr:Profiles/delayProfile:DelayProfile example 10\n```\n\n ",
            "properties": {
                "enableTorrent": {
                    "type": "boolean",
                    "description": "Torrent allowed flag at least one of `enable_usenet` and `enable_torrent` must be defined.\n"
                },
                "enableUsenet": {
                    "type": "boolean",
                    "description": "Usenet allowed flag at least one of `enable_usenet` and `enable_torrent` must be defined.\n"
                },
                "order": {
                    "type": "integer",
                    "description": "Order.\n"
                },
                "preferredProtocol": {
                    "type": "string",
                    "description": "Preferred protocol.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                },
                "torrentDelay": {
                    "type": "integer",
                    "description": "Torrent Delay.\n"
                },
                "usenetDelay": {
                    "type": "integer",
                    "description": "Usenet delay.\n"
                }
            },
            "required": [
                "enableTorrent",
                "enableUsenet",
                "order",
                "preferredProtocol",
                "tags",
                "torrentDelay",
                "usenetDelay"
            ],
            "inputProperties": {
                "enableTorrent": {
                    "type": "boolean",
                    "description": "Torrent allowed flag at least one of `enable_usenet` and `enable_torrent` must be defined.\n"
                },
                "enableUsenet": {
                    "type": "boolean",
                    "description": "Usenet allowed flag at least one of `enable_usenet` and `enable_torrent` must be defined.\n"
                },
                "order": {
                    "type": "integer",
                    "description": "Order.\n"
                },
                "preferredProtocol": {
                    "type": "string",
                    "description": "Preferred protocol.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                },
                "torrentDelay": {
                    "type": "integer",
                    "description": "Torrent Delay.\n"
                },
                "usenetDelay": {
                    "type": "integer",
                    "description": "Usenet delay.\n"
                }
            },
            "requiredInputs": [
                "tags"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DelayProfile resources.\n",
                "properties": {
                    "enableTorrent": {
                        "type": "boolean",
                        "description": "Torrent allowed flag at least one of `enable_usenet` and `enable_torrent` must be defined.\n"
                    },
                    "enableUsenet": {
                        "type": "boolean",
                        "description": "Usenet allowed flag at least one of `enable_usenet` and `enable_torrent` must be defined.\n"
                    },
                    "order": {
                        "type": "integer",
                        "description": "Order.\n"
                    },
                    "preferredProtocol": {
                        "type": "string",
                        "description": "Preferred protocol.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "List of associated tags.\n"
                    },
                    "torrentDelay": {
                        "type": "integer",
                        "description": "Torrent Delay.\n"
                    },
                    "usenetDelay": {
                        "type": "integer",
                        "description": "Usenet delay.\n"
                    }
                },
                "type": "object"
            }
        },
        "readarr:Profiles/metadataProfile:MetadataProfile": {
            "description": "\u003c!-- subcategory:Profiles --\u003eMetadata Profile resource.\nFor more information refer to [Metadata Profile](https://wiki.servarr.com/readarr/settings#metadata-profiles) documentation.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as readarr from \"@maienm/pulumi-readarr\";\n\nconst example = new readarr.profiles.MetadataProfile(\"example\", {\n    allowedLanguages: \"eng,ita\",\n    minPages: 10,\n    minPopularity: 3.5,\n    name: \"Example\",\n    skipMissingDate: false,\n    skipMissingIsbn: true,\n    skipPartsAndSets: false,\n    skipSeriesSecondary: false,\n});\n```\n```python\nimport pulumi\nimport pulumi_readarr as readarr\n\nexample = readarr.profiles.MetadataProfile(\"example\",\n    allowed_languages=\"eng,ita\",\n    min_pages=10,\n    min_popularity=3.5,\n    name=\"Example\",\n    skip_missing_date=False,\n    skip_missing_isbn=True,\n    skip_parts_and_sets=False,\n    skip_series_secondary=False)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Readarr = MaienM.Readarr;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Readarr.Profiles.MetadataProfile(\"example\", new()\n    {\n        AllowedLanguages = \"eng,ita\",\n        MinPages = 10,\n        MinPopularity = 3.5,\n        Name = \"Example\",\n        SkipMissingDate = false,\n        SkipMissingIsbn = true,\n        SkipPartsAndSets = false,\n        SkipSeriesSecondary = false,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/MaienM/pulumi-readarr/sdk/v2/go/readarr/Profiles\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := Profiles.NewMetadataProfile(ctx, \"example\", \u0026Profiles.MetadataProfileArgs{\n\t\t\tAllowedLanguages:    pulumi.String(\"eng,ita\"),\n\t\t\tMinPages:            pulumi.Int(10),\n\t\t\tMinPopularity:       pulumi.Float64(3.5),\n\t\t\tName:                pulumi.String(\"Example\"),\n\t\t\tSkipMissingDate:     pulumi.Bool(false),\n\t\t\tSkipMissingIsbn:     pulumi.Bool(true),\n\t\t\tSkipPartsAndSets:    pulumi.Bool(false),\n\t\t\tSkipSeriesSecondary: pulumi.Bool(false),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.readarr.Profiles.MetadataProfile;\nimport com.pulumi.readarr.Profiles.MetadataProfileArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new MetadataProfile(\"example\", MetadataProfileArgs.builder()        \n            .allowedLanguages(\"eng,ita\")\n            .minPages(10)\n            .minPopularity(3.5)\n            .name(\"Example\")\n            .skipMissingDate(false)\n            .skipMissingIsbn(true)\n            .skipPartsAndSets(false)\n            .skipSeriesSecondary(false)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: readarr:Profiles:MetadataProfile\n    properties:\n      allowedLanguages: eng,ita\n      minPages: 10\n      minPopularity: 3.5\n      name: Example\n      skipMissingDate: false\n      skipMissingIsbn: true\n      skipPartsAndSets: false\n      skipSeriesSecondary: false\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nimport using the API/UI ID\n\n```sh\n $ pulumi import readarr:Profiles/metadataProfile:MetadataProfile example 10\n```\n\n ",
            "properties": {
                "allowedLanguages": {
                    "type": "string",
                    "description": "Allowed languages. Comma separated list of ISO 639-3 language codes.\n"
                },
                "ignored": {
                    "type": "string",
                    "description": "Terms to ignore. Comma separated list.\n"
                },
                "minPages": {
                    "type": "integer",
                    "description": "Minimum pages.\n"
                },
                "minPopularity": {
                    "type": "number",
                    "description": "Minimum popularity.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Metadata Profile name.\n"
                },
                "skipMissingDate": {
                    "type": "boolean",
                    "description": "Skip missing date.\n"
                },
                "skipMissingIsbn": {
                    "type": "boolean",
                    "description": "Skip missing ISBN.\n"
                },
                "skipPartsAndSets": {
                    "type": "boolean",
                    "description": "Skip parts and sets.\n"
                },
                "skipSeriesSecondary": {
                    "type": "boolean",
                    "description": "Skip secondary series books.\n"
                }
            },
            "required": [
                "allowedLanguages",
                "ignored",
                "minPages",
                "minPopularity",
                "name",
                "skipMissingDate",
                "skipMissingIsbn",
                "skipPartsAndSets",
                "skipSeriesSecondary"
            ],
            "inputProperties": {
                "allowedLanguages": {
                    "type": "string",
                    "description": "Allowed languages. Comma separated list of ISO 639-3 language codes.\n"
                },
                "ignored": {
                    "type": "string",
                    "description": "Terms to ignore. Comma separated list.\n"
                },
                "minPages": {
                    "type": "integer",
                    "description": "Minimum pages.\n"
                },
                "minPopularity": {
                    "type": "number",
                    "description": "Minimum popularity.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Metadata Profile name.\n"
                },
                "skipMissingDate": {
                    "type": "boolean",
                    "description": "Skip missing date.\n"
                },
                "skipMissingIsbn": {
                    "type": "boolean",
                    "description": "Skip missing ISBN.\n"
                },
                "skipPartsAndSets": {
                    "type": "boolean",
                    "description": "Skip parts and sets.\n"
                },
                "skipSeriesSecondary": {
                    "type": "boolean",
                    "description": "Skip secondary series books.\n"
                }
            },
            "requiredInputs": [
                "name"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering MetadataProfile resources.\n",
                "properties": {
                    "allowedLanguages": {
                        "type": "string",
                        "description": "Allowed languages. Comma separated list of ISO 639-3 language codes.\n"
                    },
                    "ignored": {
                        "type": "string",
                        "description": "Terms to ignore. Comma separated list.\n"
                    },
                    "minPages": {
                        "type": "integer",
                        "description": "Minimum pages.\n"
                    },
                    "minPopularity": {
                        "type": "number",
                        "description": "Minimum popularity.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Metadata Profile name.\n"
                    },
                    "skipMissingDate": {
                        "type": "boolean",
                        "description": "Skip missing date.\n"
                    },
                    "skipMissingIsbn": {
                        "type": "boolean",
                        "description": "Skip missing ISBN.\n"
                    },
                    "skipPartsAndSets": {
                        "type": "boolean",
                        "description": "Skip parts and sets.\n"
                    },
                    "skipSeriesSecondary": {
                        "type": "boolean",
                        "description": "Skip secondary series books.\n"
                    }
                },
                "type": "object"
            }
        },
        "readarr:Profiles/qualityDefinition:QualityDefinition": {
            "description": "\u003c!-- subcategory:Profiles --\u003eQuality Definition resource.\nFor more information refer to [Quality Definition](https://wiki.servarr.com/readarr/settings#quality-1) documentation.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.readarr.Profiles.MetadataProfile;\nimport com.pulumi.readarr.Profiles.MetadataProfileArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new MetadataProfile(\"example\", MetadataProfileArgs.builder()        \n            .id(2)\n            .maxSize(400)\n            .minSize(35)\n            .title(\"PDF\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: readarr:Profiles:MetadataProfile\n    properties:\n      id: 2\n      maxSize: 400\n      minSize: 35\n      title: PDF\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nimport using the API/UI ID\n\n```sh\n $ pulumi import readarr:Profiles/qualityDefinition:QualityDefinition example 10\n```\n\n ",
            "properties": {
                "maxSize": {
                    "type": "number",
                    "description": "Maximum size MB/min.\n"
                },
                "minSize": {
                    "type": "number",
                    "description": "Minimum size MB/min.\n"
                },
                "qualityId": {
                    "type": "integer",
                    "description": "Quality ID.\n"
                },
                "qualityName": {
                    "type": "string",
                    "description": "Quality Name.\n"
                },
                "title": {
                    "type": "string",
                    "description": "Quality Definition Title.\n"
                }
            },
            "required": [
                "maxSize",
                "minSize",
                "qualityId",
                "qualityName",
                "title"
            ],
            "inputProperties": {
                "maxSize": {
                    "type": "number",
                    "description": "Maximum size MB/min.\n"
                },
                "minSize": {
                    "type": "number",
                    "description": "Minimum size MB/min.\n"
                },
                "title": {
                    "type": "string",
                    "description": "Quality Definition Title.\n"
                }
            },
            "requiredInputs": [
                "title"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering QualityDefinition resources.\n",
                "properties": {
                    "maxSize": {
                        "type": "number",
                        "description": "Maximum size MB/min.\n"
                    },
                    "minSize": {
                        "type": "number",
                        "description": "Minimum size MB/min.\n"
                    },
                    "qualityId": {
                        "type": "integer",
                        "description": "Quality ID.\n"
                    },
                    "qualityName": {
                        "type": "string",
                        "description": "Quality Name.\n"
                    },
                    "title": {
                        "type": "string",
                        "description": "Quality Definition Title.\n"
                    }
                },
                "type": "object"
            }
        },
        "readarr:Profiles/qualityProfile:QualityProfile": {
            "description": "\u003c!-- subcategory:Profiles --\u003eQuality Profile resource.\nFor more information refer to [Quality Profile](https://wiki.servarr.com/readarr/settings#quality-profiles) documentation.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as readarr from \"@maienm/pulumi-readarr\";\n\nconst example = new readarr.profiles.QualityProfile(\"example\", {\n    cutoff: 1100,\n    name: \"example-native\",\n    qualityGroups: [{\n        id: 1100,\n        name: \"native\",\n        qualities: [\n            {\n                id: 3,\n                name: \"EPUB\",\n            },\n            {\n                id: 2,\n                name: \"MOBI\",\n            },\n        ],\n    }],\n    upgradeAllowed: true,\n});\n```\n```python\nimport pulumi\nimport pulumi_readarr as readarr\n\nexample = readarr.profiles.QualityProfile(\"example\",\n    cutoff=1100,\n    name=\"example-native\",\n    quality_groups=[readarr.profiles.QualityProfileQualityGroupArgs(\n        id=1100,\n        name=\"native\",\n        qualities=[\n            readarr.profiles.QualityProfileQualityGroupQualityArgs(\n                id=3,\n                name=\"EPUB\",\n            ),\n            readarr.profiles.QualityProfileQualityGroupQualityArgs(\n                id=2,\n                name=\"MOBI\",\n            ),\n        ],\n    )],\n    upgrade_allowed=True)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Readarr = MaienM.Readarr;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Readarr.Profiles.QualityProfile(\"example\", new()\n    {\n        Cutoff = 1100,\n        Name = \"example-native\",\n        QualityGroups = new[]\n        {\n            new Readarr.Profiles.Inputs.QualityProfileQualityGroupArgs\n            {\n                Id = 1100,\n                Name = \"native\",\n                Qualities = new[]\n                {\n                    new Readarr.Profiles.Inputs.QualityProfileQualityGroupQualityArgs\n                    {\n                        Id = 3,\n                        Name = \"EPUB\",\n                    },\n                    new Readarr.Profiles.Inputs.QualityProfileQualityGroupQualityArgs\n                    {\n                        Id = 2,\n                        Name = \"MOBI\",\n                    },\n                },\n            },\n        },\n        UpgradeAllowed = true,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/MaienM/pulumi-readarr/sdk/v2/go/readarr/Profiles\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := Profiles.NewQualityProfile(ctx, \"example\", \u0026Profiles.QualityProfileArgs{\n\t\t\tCutoff: pulumi.Int(1100),\n\t\t\tName:   pulumi.String(\"example-native\"),\n\t\t\tQualityGroups: profiles.QualityProfileQualityGroupArray{\n\t\t\t\t\u0026profiles.QualityProfileQualityGroupArgs{\n\t\t\t\t\tId:   pulumi.Int(1100),\n\t\t\t\t\tName: pulumi.String(\"native\"),\n\t\t\t\t\tQualities: profiles.QualityProfileQualityGroupQualityArray{\n\t\t\t\t\t\t\u0026profiles.QualityProfileQualityGroupQualityArgs{\n\t\t\t\t\t\t\tId:   pulumi.Int(3),\n\t\t\t\t\t\t\tName: pulumi.String(\"EPUB\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\u0026profiles.QualityProfileQualityGroupQualityArgs{\n\t\t\t\t\t\t\tId:   pulumi.Int(2),\n\t\t\t\t\t\t\tName: pulumi.String(\"MOBI\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tUpgradeAllowed: pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.readarr.Profiles.QualityProfile;\nimport com.pulumi.readarr.Profiles.QualityProfileArgs;\nimport com.pulumi.readarr.Profiles.inputs.QualityProfileQualityGroupArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new QualityProfile(\"example\", QualityProfileArgs.builder()        \n            .cutoff(1100)\n            .name(\"example-native\")\n            .qualityGroups(QualityProfileQualityGroupArgs.builder()\n                .id(1100)\n                .name(\"native\")\n                .qualities(                \n                    QualityProfileQualityGroupQualityArgs.builder()\n                        .id(3)\n                        .name(\"EPUB\")\n                        .build(),\n                    QualityProfileQualityGroupQualityArgs.builder()\n                        .id(2)\n                        .name(\"MOBI\")\n                        .build())\n                .build())\n            .upgradeAllowed(true)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: readarr:Profiles:QualityProfile\n    properties:\n      cutoff: 1100\n      name: example-native\n      qualityGroups:\n        - id: 1100\n          name: native\n          qualities:\n            - id: 3\n              name: EPUB\n            - id: 2\n              name: MOBI\n      upgradeAllowed: true\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nimport using the API/UI ID\n\n```sh\n $ pulumi import readarr:Profiles/qualityProfile:QualityProfile example 10\n```\n\n ",
            "properties": {
                "cutoff": {
                    "type": "integer",
                    "description": "Quality ID to which cutoff.\n"
                },
                "cutoffFormatScore": {
                    "type": "integer",
                    "description": "Cutoff format score.\n"
                },
                "formatItems": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/readarr:Profiles/QualityProfileFormatItem:QualityProfileFormatItem"
                    },
                    "description": "Format items.\n"
                },
                "minFormatScore": {
                    "type": "integer",
                    "description": "Min format score.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Quality Profile Name.\n"
                },
                "qualityGroups": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/readarr:Profiles/QualityProfileQualityGroup:QualityProfileQualityGroup"
                    },
                    "description": "Quality groups.\n"
                },
                "upgradeAllowed": {
                    "type": "boolean",
                    "description": "Upgrade allowed flag.\n"
                }
            },
            "required": [
                "cutoff",
                "cutoffFormatScore",
                "formatItems",
                "minFormatScore",
                "name",
                "qualityGroups",
                "upgradeAllowed"
            ],
            "inputProperties": {
                "cutoff": {
                    "type": "integer",
                    "description": "Quality ID to which cutoff.\n"
                },
                "cutoffFormatScore": {
                    "type": "integer",
                    "description": "Cutoff format score.\n"
                },
                "formatItems": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/readarr:Profiles/QualityProfileFormatItem:QualityProfileFormatItem"
                    },
                    "description": "Format items.\n"
                },
                "minFormatScore": {
                    "type": "integer",
                    "description": "Min format score.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Quality Profile Name.\n"
                },
                "qualityGroups": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/readarr:Profiles/QualityProfileQualityGroup:QualityProfileQualityGroup"
                    },
                    "description": "Quality groups.\n"
                },
                "upgradeAllowed": {
                    "type": "boolean",
                    "description": "Upgrade allowed flag.\n"
                }
            },
            "requiredInputs": [
                "name",
                "qualityGroups"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering QualityProfile resources.\n",
                "properties": {
                    "cutoff": {
                        "type": "integer",
                        "description": "Quality ID to which cutoff.\n"
                    },
                    "cutoffFormatScore": {
                        "type": "integer",
                        "description": "Cutoff format score.\n"
                    },
                    "formatItems": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/readarr:Profiles/QualityProfileFormatItem:QualityProfileFormatItem"
                        },
                        "description": "Format items.\n"
                    },
                    "minFormatScore": {
                        "type": "integer",
                        "description": "Min format score.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Quality Profile Name.\n"
                    },
                    "qualityGroups": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/readarr:Profiles/QualityProfileQualityGroup:QualityProfileQualityGroup"
                        },
                        "description": "Quality groups.\n"
                    },
                    "upgradeAllowed": {
                        "type": "boolean",
                        "description": "Upgrade allowed flag.\n"
                    }
                },
                "type": "object"
            }
        },
        "readarr:Profiles/releaseProfile:ReleaseProfile": {
            "description": "\u003c!-- subcategory:Profiles --\u003eRelease Profile resource.\nFor more information refer to [Release Profiles](https://wiki.servarr.com/readarr/settings#release-profiles) documentation.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.readarr.Profiles.ReleaseProfile;\nimport com.pulumi.readarr.Profiles.ReleaseProfileArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new ReleaseProfile(\"example\", ReleaseProfileArgs.builder()        \n            .enabled(true)\n            .ignoreds(\"pdf\")\n            .includePreferredWhenRenaming(true)\n            .indexerId(0)\n            .preferred(            \n                %!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference),\n                %!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))\n            .requireds(\"epub,isdn\")\n            .build());\n\n    }\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nimport using the API/UI ID\n\n```sh\n $ pulumi import readarr:Profiles/releaseProfile:ReleaseProfile example 10\n```\n\n ",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enabled.\n"
                },
                "ignoreds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Ignored terms. At least one of `required` and `ignored` must be set.\n"
                },
                "indexerId": {
                    "type": "integer",
                    "description": "Indexer ID. Set `0` for all.\n"
                },
                "requireds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Required terms. At least one of `required` and `ignored` must be set.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                }
            },
            "required": [
                "enabled",
                "ignoreds",
                "indexerId",
                "requireds",
                "tags"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enabled.\n"
                },
                "ignoreds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Ignored terms. At least one of `required` and `ignored` must be set.\n"
                },
                "indexerId": {
                    "type": "integer",
                    "description": "Indexer ID. Set `0` for all.\n"
                },
                "requireds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Required terms. At least one of `required` and `ignored` must be set.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "List of associated tags.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ReleaseProfile resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Enabled.\n"
                    },
                    "ignoreds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Ignored terms. At least one of `required` and `ignored` must be set.\n"
                    },
                    "indexerId": {
                        "type": "integer",
                        "description": "Indexer ID. Set `0` for all.\n"
                    },
                    "requireds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Required terms. At least one of `required` and `ignored` must be set.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "List of associated tags.\n"
                    }
                },
                "type": "object"
            }
        },
        "readarr:Tags/tag:Tag": {
            "description": "\u003c!-- subcategory:Tags --\u003eTag resource.\nFor more information refer to [Tags](https://wiki.servarr.com/readarr/settings#tags) documentation.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as readarr from \"@maienm/pulumi-readarr\";\n\nconst example = new readarr.tags.Tag(\"example\", {label: \"some-value\"});\n```\n```python\nimport pulumi\nimport pulumi_readarr as readarr\n\nexample = readarr.tags.Tag(\"example\", label=\"some-value\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Readarr = MaienM.Readarr;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Readarr.Tags.Tag(\"example\", new()\n    {\n        Label = \"some-value\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/MaienM/pulumi-readarr/sdk/v2/go/readarr/Tags\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := Tags.NewTag(ctx, \"example\", \u0026Tags.TagArgs{\n\t\t\tLabel: pulumi.String(\"some-value\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.readarr.Tags.Tag;\nimport com.pulumi.readarr.Tags.TagArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new Tag(\"example\", TagArgs.builder()        \n            .label(\"some-value\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: readarr:Tags:Tag\n    properties:\n      label: some-value\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nimport using the API/UI ID\n\n```sh\n $ pulumi import readarr:Tags/tag:Tag example 10\n```\n\n ",
            "properties": {
                "label": {
                    "type": "string",
                    "description": "Tag label. It must be lowercase.\n"
                }
            },
            "required": [
                "label"
            ],
            "inputProperties": {
                "label": {
                    "type": "string",
                    "description": "Tag label. It must be lowercase.\n"
                }
            },
            "requiredInputs": [
                "label"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Tag resources.\n",
                "properties": {
                    "label": {
                        "type": "string",
                        "description": "Tag label. It must be lowercase.\n"
                    }
                },
                "type": "object"
            }
        }
    },
    "functions": {
        "readarr:Authors/getAuthor:getAuthor": {
            "description": "\u003c!-- subcategory:Authors --\u003eSingle Author.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as readarr from \"@pulumi/readarr\";\n\nconst example = readarr.Authors.getAuthor({\n    foreignAuthorId: \"123715\",\n});\n```\n```python\nimport pulumi\nimport pulumi_readarr as readarr\n\nexample = readarr.Authors.get_author(foreign_author_id=\"123715\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Readarr = Pulumi.Readarr;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Readarr.Authors.GetAuthor.Invoke(new()\n    {\n        ForeignAuthorId = \"123715\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/MaienM/pulumi-readarr/sdk/v2/go/readarr/Authors\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := Authors.GetAuthor(ctx, \u0026authors.GetAuthorArgs{\n\t\t\tForeignAuthorId: \"123715\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.readarr.Authors.AuthorsFunctions;\nimport com.pulumi.readarr.Authors.inputs.GetAuthorArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = AuthorsFunctions.getAuthor(GetAuthorArgs.builder()\n            .foreignAuthorId(\"123715\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: readarr:Authors:getAuthor\n      Arguments:\n        foreignAuthorId: '123715'\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getAuthor.\n",
                "properties": {
                    "foreignAuthorId": {
                        "type": "string",
                        "description": "Foreign author ID.\n"
                    }
                },
                "type": "object",
                "required": [
                    "foreignAuthorId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getAuthor.\n",
                "properties": {
                    "authorName": {
                        "type": "string",
                        "description": "Author name.\n"
                    },
                    "foreignAuthorId": {
                        "type": "string",
                        "description": "Foreign author ID.\n"
                    },
                    "genres": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List genres.\n"
                    },
                    "id": {
                        "type": "integer",
                        "description": "Author ID.\n"
                    },
                    "monitored": {
                        "type": "boolean",
                        "description": "Monitored flag.\n"
                    },
                    "overview": {
                        "type": "string",
                        "description": "Overview.\n"
                    },
                    "path": {
                        "type": "string",
                        "description": "Full author path.\n"
                    },
                    "qualityProfileId": {
                        "type": "integer",
                        "description": "Quality profile ID.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "Author status.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "List of associated tags.\n"
                    }
                },
                "type": "object",
                "required": [
                    "authorName",
                    "foreignAuthorId",
                    "genres",
                    "id",
                    "monitored",
                    "overview",
                    "path",
                    "qualityProfileId",
                    "status",
                    "tags"
                ]
            }
        },
        "readarr:Authors/getAuthors:getAuthors": {
            "description": "\u003c!-- subcategory:Authors --\u003eList all available Authors.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as readarr from \"@pulumi/readarr\";\n\nconst example = readarr.Authors.getAuthors({});\n```\n```python\nimport pulumi\nimport pulumi_readarr as readarr\n\nexample = readarr.Authors.get_authors()\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Readarr = Pulumi.Readarr;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Readarr.Authors.GetAuthors.Invoke();\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/MaienM/pulumi-readarr/sdk/v2/go/readarr/Authors\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := Authors.GetAuthors(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.readarr.Authors.AuthorsFunctions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = AuthorsFunctions.getAuthors();\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: readarr:Authors:getAuthors\n      Arguments: {}\n```\n{{% /example %}}\n{{% /examples %}}",
            "outputs": {
                "description": "A collection of values returned by getAuthors.\n",
                "properties": {
                    "authors": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/readarr:Authors/getAuthorsAuthor:getAuthorsAuthor"
                        },
                        "description": "Author list.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The ID of this resource.\n"
                    }
                },
                "type": "object",
                "required": [
                    "authors",
                    "id"
                ]
            }
        },
        "readarr:DownloadClients/getDownloadClient:getDownloadClient": {
            "description": "\u003c!-- subcategory:Download Clients --\u003eSingle Download Client.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as readarr from \"@pulumi/readarr\";\n\nconst test = readarr.DownloadClients.getDownloadClient({\n    name: \"Example\",\n});\n```\n```python\nimport pulumi\nimport pulumi_readarr as readarr\n\ntest = readarr.DownloadClients.get_download_client(name=\"Example\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Readarr = Pulumi.Readarr;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var test = Readarr.DownloadClients.GetDownloadClient.Invoke(new()\n    {\n        Name = \"Example\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/MaienM/pulumi-readarr/sdk/v2/go/readarr/DownloadClients\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := DownloadClients.GetDownloadClient(ctx, \u0026downloadclients.GetDownloadClientArgs{\n\t\t\tName: \"Example\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.readarr.DownloadClients.DownloadClientsFunctions;\nimport com.pulumi.readarr.DownloadClients.inputs.GetDownloadClientArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var test = DownloadClientsFunctions.getDownloadClient(GetDownloadClientArgs.builder()\n            .name(\"Example\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  test:\n    fn::invoke:\n      Function: readarr:DownloadClients:getDownloadClient\n      Arguments:\n        name: Example\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getDownloadClient.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Download Client name.\n"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getDownloadClient.\n",
                "properties": {
                    "addPaused": {
                        "type": "boolean",
                        "description": "Add paused flag.\n"
                    },
                    "addStopped": {
                        "type": "boolean",
                        "description": "Add stopped flag.\n"
                    },
                    "additionalTags": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "Additional tags, `0` TitleSlug, `1` Quality, `2` Language, `3` ReleaseGroup, `4` Year, `5` Indexer, `6` Network.\n"
                    },
                    "apiKey": {
                        "type": "string",
                        "description": "API key.\n"
                    },
                    "bookCategory": {
                        "type": "string",
                        "description": "Book category.\n"
                    },
                    "bookDirectory": {
                        "type": "string",
                        "description": "Book directory.\n"
                    },
                    "bookImportedCategory": {
                        "type": "string",
                        "description": "Book imported category.\n"
                    },
                    "bookdirectory": {
                        "type": "string",
                        "description": "Book directory.\n"
                    },
                    "category": {
                        "type": "string",
                        "description": "Category.\n"
                    },
                    "configContract": {
                        "type": "string",
                        "description": "DownloadClient configuration template.\n"
                    },
                    "destination": {
                        "type": "string",
                        "description": "Destination.\n"
                    },
                    "enable": {
                        "type": "boolean",
                        "description": "Enable flag.\n"
                    },
                    "fieldTags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Field tags.\n"
                    },
                    "firstAndLast": {
                        "type": "boolean",
                        "description": "First and last flag.\n"
                    },
                    "host": {
                        "type": "string",
                        "description": "host.\n"
                    },
                    "id": {
                        "type": "integer",
                        "description": "Download Client ID.\n"
                    },
                    "implementation": {
                        "type": "string",
                        "description": "DownloadClient implementation name.\n"
                    },
                    "initialState": {
                        "type": "integer",
                        "description": "Initial state. `0` Start, `1` ForceStart, `2` Pause.\n"
                    },
                    "intialState": {
                        "type": "integer",
                        "description": "Initial state, with Stop support. `0` Start, `1` ForceStart, `2` Pause, `3` Stop.\n"
                    },
                    "magnetFileExtension": {
                        "type": "string",
                        "description": "Magnet file extension.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Download Client name.\n"
                    },
                    "nzbFolder": {
                        "type": "string",
                        "description": "NZB folder.\n"
                    },
                    "olderBookPriority": {
                        "type": "integer",
                        "description": "Older Book priority. `0` Last, `1` First.\n"
                    },
                    "password": {
                        "type": "string",
                        "description": "Password.\n"
                    },
                    "port": {
                        "type": "integer",
                        "description": "Port.\n"
                    },
                    "postImportTags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Post import tags.\n"
                    },
                    "priority": {
                        "type": "integer",
                        "description": "Priority.\n"
                    },
                    "protocol": {
                        "type": "string",
                        "description": "Protocol. Valid values are 'usenet' and 'torrent'.\n"
                    },
                    "readOnly": {
                        "type": "boolean",
                        "description": "Read only flag.\n"
                    },
                    "recentBookPriority": {
                        "type": "integer",
                        "description": "Recent Book priority. `0` Last, `1` First.\n"
                    },
                    "rpcPath": {
                        "type": "string",
                        "description": "RPC path.\n"
                    },
                    "saveMagnetFiles": {
                        "type": "boolean",
                        "description": "Save magnet files flag.\n"
                    },
                    "secretToken": {
                        "type": "string",
                        "description": "Secret token.\n"
                    },
                    "sequentialOrder": {
                        "type": "boolean",
                        "description": "Sequential order flag.\n"
                    },
                    "startOnAdd": {
                        "type": "boolean",
                        "description": "Start on add flag.\n"
                    },
                    "strmFolder": {
                        "type": "string",
                        "description": "STRM folder.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "List of associated tags.\n"
                    },
                    "torrentFolder": {
                        "type": "string",
                        "description": "Torrent folder.\n"
                    },
                    "urlBase": {
                        "type": "string",
                        "description": "Base URL.\n"
                    },
                    "useSsl": {
                        "type": "boolean",
                        "description": "Use SSL flag.\n"
                    },
                    "username": {
                        "type": "string",
                        "description": "Username.\n"
                    },
                    "watchFolder": {
                        "type": "string",
                        "description": "Watch folder flag.\n"
                    }
                },
                "type": "object",
                "required": [
                    "addPaused",
                    "addStopped",
                    "additionalTags",
                    "apiKey",
                    "bookCategory",
                    "bookDirectory",
                    "bookImportedCategory",
                    "bookdirectory",
                    "category",
                    "configContract",
                    "destination",
                    "enable",
                    "fieldTags",
                    "firstAndLast",
                    "host",
                    "id",
                    "implementation",
                    "initialState",
                    "intialState",
                    "magnetFileExtension",
                    "name",
                    "nzbFolder",
                    "olderBookPriority",
                    "password",
                    "port",
                    "postImportTags",
                    "priority",
                    "protocol",
                    "readOnly",
                    "recentBookPriority",
                    "rpcPath",
                    "saveMagnetFiles",
                    "secretToken",
                    "sequentialOrder",
                    "startOnAdd",
                    "strmFolder",
                    "tags",
                    "torrentFolder",
                    "urlBase",
                    "useSsl",
                    "username",
                    "watchFolder"
                ]
            }
        },
        "readarr:DownloadClients/getDownloadClientConfig:getDownloadClientConfig": {
            "description": "\u003c!-- subcategory:Download Clients --\u003eDownload Client Config.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as readarr from \"@pulumi/readarr\";\n\nconst example = readarr.DownloadClients.getDownloadClientConfig({});\n```\n```python\nimport pulumi\nimport pulumi_readarr as readarr\n\nexample = readarr.DownloadClients.get_download_client_config()\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Readarr = Pulumi.Readarr;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Readarr.DownloadClients.GetDownloadClientConfig.Invoke();\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/MaienM/pulumi-readarr/sdk/v2/go/readarr/DownloadClients\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := DownloadClients.GetDownloadClientConfig(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.readarr.DownloadClients.DownloadClientsFunctions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = DownloadClientsFunctions.getDownloadClientConfig();\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: readarr:DownloadClients:getDownloadClientConfig\n      Arguments: {}\n```\n{{% /example %}}\n{{% /examples %}}",
            "outputs": {
                "description": "A collection of values returned by getDownloadClientConfig.\n",
                "properties": {
                    "autoRedownloadFailed": {
                        "type": "boolean",
                        "description": "Auto Redownload Failed flag.\n"
                    },
                    "downloadClientWorkingFolders": {
                        "type": "string",
                        "description": "Download Client Working Folders.\n"
                    },
                    "enableCompletedDownloadHandling": {
                        "type": "boolean",
                        "description": "Enable Completed Download Handling flag.\n"
                    },
                    "id": {
                        "type": "integer",
                        "description": "Download Client Config ID.\n"
                    },
                    "removeCompletedDownloads": {
                        "type": "boolean",
                        "description": "Remove completed downloads flag.\n"
                    },
                    "removeFailedDownloads": {
                        "type": "boolean",
                        "description": "Remove failed downloads flag.\n"
                    }
                },
                "type": "object",
                "required": [
                    "autoRedownloadFailed",
                    "downloadClientWorkingFolders",
                    "enableCompletedDownloadHandling",
                    "id",
                    "removeCompletedDownloads",
                    "removeFailedDownloads"
                ]
            }
        },
        "readarr:DownloadClients/getDownloadClients:getDownloadClients": {
            "description": "\u003c!-- subcategory:Download Clients --\u003eList all available DownloadClients.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as readarr from \"@pulumi/readarr\";\n\nconst example = readarr.DownloadClients.getDownloadClients({});\n```\n```python\nimport pulumi\nimport pulumi_readarr as readarr\n\nexample = readarr.DownloadClients.get_download_clients()\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Readarr = Pulumi.Readarr;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Readarr.DownloadClients.GetDownloadClients.Invoke();\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/MaienM/pulumi-readarr/sdk/v2/go/readarr/DownloadClients\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := DownloadClients.GetDownloadClients(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.readarr.DownloadClients.DownloadClientsFunctions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = DownloadClientsFunctions.getDownloadClients();\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: readarr:DownloadClients:getDownloadClients\n      Arguments: {}\n```\n{{% /example %}}\n{{% /examples %}}",
            "outputs": {
                "description": "A collection of values returned by getDownloadClients.\n",
                "properties": {
                    "downloadClients": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/readarr:DownloadClients/getDownloadClientsDownloadClient:getDownloadClientsDownloadClient"
                        },
                        "description": "Download Client list..\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The ID of this resource.\n"
                    }
                },
                "type": "object",
                "required": [
                    "downloadClients",
                    "id"
                ]
            }
        },
        "readarr:DownloadClients/getRemotePathMapping:getRemotePathMapping": {
            "description": "\u003c!-- subcategory:Download Clients --\u003eSingle Remote Path Mapping.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as readarr from \"@pulumi/readarr\";\n\nconst example = readarr.DownloadClients.getRemotePathMapping({\n    id: 1,\n});\n```\n```python\nimport pulumi\nimport pulumi_readarr as readarr\n\nexample = readarr.DownloadClients.get_remote_path_mapping(id=1)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Readarr = Pulumi.Readarr;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Readarr.DownloadClients.GetRemotePathMapping.Invoke(new()\n    {\n        Id = 1,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/MaienM/pulumi-readarr/sdk/v2/go/readarr/DownloadClients\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := DownloadClients.GetRemotePathMapping(ctx, \u0026downloadclients.GetRemotePathMappingArgs{\n\t\t\tId: 1,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.readarr.DownloadClients.DownloadClientsFunctions;\nimport com.pulumi.readarr.DownloadClients.inputs.GetRemotePathMappingArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = DownloadClientsFunctions.getRemotePathMapping(GetRemotePathMappingArgs.builder()\n            .id(1)\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: readarr:DownloadClients:getRemotePathMapping\n      Arguments:\n        id: 1\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getRemotePathMapping.\n",
                "properties": {
                    "id": {
                        "type": "integer",
                        "description": "Remote Path Mapping ID.\n"
                    }
                },
                "type": "object",
                "required": [
                    "id"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getRemotePathMapping.\n",
                "properties": {
                    "host": {
                        "type": "string",
                        "description": "Download Client host.\n"
                    },
                    "id": {
                        "type": "integer",
                        "description": "Remote Path Mapping ID.\n"
                    },
                    "localPath": {
                        "type": "string",
                        "description": "Local path.\n"
                    },
                    "remotePath": {
                        "type": "string",
                        "description": "Download Client remote path.\n"
                    }
                },
                "type": "object",
                "required": [
                    "host",
                    "id",
                    "localPath",
                    "remotePath"
                ]
            }
        },
        "readarr:DownloadClients/getRemotePathMappings:getRemotePathMappings": {
            "description": "\u003c!-- subcategory:Download Clients --\u003eList all available Remote Path Mappings.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as readarr from \"@pulumi/readarr\";\n\nconst example = readarr.DownloadClients.getRemotePathMappings({});\n```\n```python\nimport pulumi\nimport pulumi_readarr as readarr\n\nexample = readarr.DownloadClients.get_remote_path_mappings()\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Readarr = Pulumi.Readarr;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Readarr.DownloadClients.GetRemotePathMappings.Invoke();\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/MaienM/pulumi-readarr/sdk/v2/go/readarr/DownloadClients\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := DownloadClients.GetRemotePathMappings(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.readarr.DownloadClients.DownloadClientsFunctions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = DownloadClientsFunctions.getRemotePathMappings();\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: readarr:DownloadClients:getRemotePathMappings\n      Arguments: {}\n```\n{{% /example %}}\n{{% /examples %}}",
            "outputs": {
                "description": "A collection of values returned by getRemotePathMappings.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The ID of this resource.\n"
                    },
                    "remotePathMappings": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/readarr:DownloadClients/getRemotePathMappingsRemotePathMapping:getRemotePathMappingsRemotePathMapping"
                        },
                        "description": "Remote Path Mapping list.\n"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "remotePathMappings"
                ]
            }
        },
        "readarr:ImportLists/getImportList:getImportList": {
            "description": "\u003c!-- subcategory:Import Lists --\u003eSingle Import List.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as readarr from \"@pulumi/readarr\";\n\nconst example = readarr.ImportLists.getImportList({\n    name: \"Example\",\n});\n```\n```python\nimport pulumi\nimport pulumi_readarr as readarr\n\nexample = readarr.ImportLists.get_import_list(name=\"Example\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Readarr = Pulumi.Readarr;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Readarr.ImportLists.GetImportList.Invoke(new()\n    {\n        Name = \"Example\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/MaienM/pulumi-readarr/sdk/v2/go/readarr/ImportLists\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := ImportLists.GetImportList(ctx, \u0026importlists.GetImportListArgs{\n\t\t\tName: \"Example\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.readarr.ImportLists.ImportListsFunctions;\nimport com.pulumi.readarr.ImportLists.inputs.GetImportListArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = ImportListsFunctions.getImportList(GetImportListArgs.builder()\n            .name(\"Example\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: readarr:ImportLists:getImportList\n      Arguments:\n        name: Example\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getImportList.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Import List name.\n"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getImportList.\n",
                "properties": {
                    "accessToken": {
                        "type": "string",
                        "description": "Access token.\n",
                        "secret": true
                    },
                    "accessTokenSecret": {
                        "type": "string",
                        "description": "Access token secret.\n",
                        "secret": true
                    },
                    "apiKey": {
                        "type": "string",
                        "description": "API key.\n",
                        "secret": true
                    },
                    "baseUrl": {
                        "type": "string",
                        "description": "Base URL.\n"
                    },
                    "bookshelfIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Bookshelf IDs.\n"
                    },
                    "configContract": {
                        "type": "string",
                        "description": "ImportList configuration template.\n"
                    },
                    "enableAutomaticAdd": {
                        "type": "boolean",
                        "description": "Enable automatic add flag.\n"
                    },
                    "id": {
                        "type": "integer",
                        "description": "Import List ID.\n"
                    },
                    "implementation": {
                        "type": "string",
                        "description": "ImportList implementation name.\n"
                    },
                    "listId": {
                        "type": "integer",
                        "description": "List ID.\n"
                    },
                    "listOrder": {
                        "type": "integer",
                        "description": "List order.\n"
                    },
                    "listType": {
                        "type": "string",
                        "description": "List type.\n"
                    },
                    "metadataProfileId": {
                        "type": "integer",
                        "description": "Metadata profile ID.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Import List name.\n"
                    },
                    "profileIds": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "Profile IDs.\n"
                    },
                    "qualityProfileId": {
                        "type": "integer",
                        "description": "Quality profile ID.\n"
                    },
                    "requestTokenSecret": {
                        "type": "string",
                        "description": "Request token secret.\n",
                        "secret": true
                    },
                    "rootFolderPath": {
                        "type": "string",
                        "description": "Root folder path.\n"
                    },
                    "seriesId": {
                        "type": "integer",
                        "description": "Series ID.\n"
                    },
                    "shouldMonitor": {
                        "type": "string",
                        "description": "Should monitor.\n"
                    },
                    "shouldSearch": {
                        "type": "boolean",
                        "description": "Should search flag.\n"
                    },
                    "tagIds": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "Tag IDs.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "List of associated tags.\n"
                    },
                    "userId": {
                        "type": "string",
                        "description": "User ID.\n"
                    },
                    "username": {
                        "type": "string",
                        "description": "Username.\n"
                    }
                },
                "type": "object",
                "required": [
                    "accessToken",
                    "accessTokenSecret",
                    "apiKey",
                    "baseUrl",
                    "bookshelfIds",
                    "configContract",
                    "enableAutomaticAdd",
                    "id",
                    "implementation",
                    "listId",
                    "listOrder",
                    "listType",
                    "metadataProfileId",
                    "name",
                    "profileIds",
                    "qualityProfileId",
                    "requestTokenSecret",
                    "rootFolderPath",
                    "seriesId",
                    "shouldMonitor",
                    "shouldSearch",
                    "tagIds",
                    "tags",
                    "userId",
                    "username"
                ]
            }
        },
        "readarr:ImportLists/getImportListExclusion:getImportListExclusion": {
            "description": "\u003c!-- subcategory:Import Lists --\u003eSingle Import List Exclusion.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as readarr from \"@pulumi/readarr\";\n\nconst example = readarr.ImportLists.getImportListExclusion({\n    foreignId: \"987\",\n});\n```\n```python\nimport pulumi\nimport pulumi_readarr as readarr\n\nexample = readarr.ImportLists.get_import_list_exclusion(foreign_id=\"987\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Readarr = Pulumi.Readarr;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Readarr.ImportLists.GetImportListExclusion.Invoke(new()\n    {\n        ForeignId = \"987\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/MaienM/pulumi-readarr/sdk/v2/go/readarr/ImportLists\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := ImportLists.GetImportListExclusion(ctx, \u0026importlists.GetImportListExclusionArgs{\n\t\t\tForeignId: \"987\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.readarr.ImportLists.ImportListsFunctions;\nimport com.pulumi.readarr.ImportLists.inputs.GetImportListExclusionArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = ImportListsFunctions.getImportListExclusion(GetImportListExclusionArgs.builder()\n            .foreignId(987)\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: readarr:ImportLists:getImportListExclusion\n      Arguments:\n        foreignId: 987\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getImportListExclusion.\n",
                "properties": {
                    "foreignId": {
                        "type": "string",
                        "description": "Musicbrainz ID.\n"
                    }
                },
                "type": "object",
                "required": [
                    "foreignId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getImportListExclusion.\n",
                "properties": {
                    "authorName": {
                        "type": "string",
                        "description": "Author to be excluded.\n"
                    },
                    "foreignId": {
                        "type": "string",
                        "description": "Musicbrainz ID.\n"
                    },
                    "id": {
                        "type": "integer",
                        "description": "ImportListExclusion ID.\n"
                    }
                },
                "type": "object",
                "required": [
                    "authorName",
                    "foreignId",
                    "id"
                ]
            }
        },
        "readarr:ImportLists/getImportListExclusions:getImportListExclusions": {
            "description": "\u003c!-- subcategory:Import Lists --\u003eList all available Import List Exclusions.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as readarr from \"@pulumi/readarr\";\n\nconst example = readarr.ImportLists.getImportListExclusions({});\n```\n```python\nimport pulumi\nimport pulumi_readarr as readarr\n\nexample = readarr.ImportLists.get_import_list_exclusions()\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Readarr = Pulumi.Readarr;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Readarr.ImportLists.GetImportListExclusions.Invoke();\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/MaienM/pulumi-readarr/sdk/v2/go/readarr/ImportLists\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := ImportLists.GetImportListExclusions(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.readarr.ImportLists.ImportListsFunctions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = ImportListsFunctions.getImportListExclusions();\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: readarr:ImportLists:getImportListExclusions\n      Arguments: {}\n```\n{{% /example %}}\n{{% /examples %}}",
            "outputs": {
                "description": "A collection of values returned by getImportListExclusions.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The ID of this resource.\n"
                    },
                    "importListExclusions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/readarr:ImportLists/getImportListExclusionsImportListExclusion:getImportListExclusionsImportListExclusion"
                        },
                        "description": "ImportListExclusion list.\n"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "importListExclusions"
                ]
            }
        },
        "readarr:ImportLists/getImportLists:getImportLists": {
            "description": "\u003c!-- subcategory:Import Lists --\u003eList all available Import Lists.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as readarr from \"@pulumi/readarr\";\n\nconst example = readarr.ImportLists.getImportLists({});\n```\n```python\nimport pulumi\nimport pulumi_readarr as readarr\n\nexample = readarr.ImportLists.get_import_lists()\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Readarr = Pulumi.Readarr;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Readarr.ImportLists.GetImportLists.Invoke();\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/MaienM/pulumi-readarr/sdk/v2/go/readarr/ImportLists\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := ImportLists.GetImportLists(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.readarr.ImportLists.ImportListsFunctions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = ImportListsFunctions.getImportLists();\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: readarr:ImportLists:getImportLists\n      Arguments: {}\n```\n{{% /example %}}\n{{% /examples %}}",
            "outputs": {
                "description": "A collection of values returned by getImportLists.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The ID of this resource.\n"
                    },
                    "importLists": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/readarr:ImportLists/getImportListsImportList:getImportListsImportList"
                        },
                        "description": "Import List list.\n"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "importLists"
                ]
            }
        },
        "readarr:Indexers/getIndexer:getIndexer": {
            "description": "\u003c!-- subcategory:Indexers --\u003eSingle Indexer.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as readarr from \"@pulumi/readarr\";\n\nconst example = readarr.Indexers.getIndexer({\n    name: \"Example\",\n});\n```\n```python\nimport pulumi\nimport pulumi_readarr as readarr\n\nexample = readarr.Indexers.get_indexer(name=\"Example\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Readarr = Pulumi.Readarr;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Readarr.Indexers.GetIndexer.Invoke(new()\n    {\n        Name = \"Example\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/MaienM/pulumi-readarr/sdk/v2/go/readarr/Indexers\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := Indexers.GetIndexer(ctx, \u0026indexers.GetIndexerArgs{\n\t\t\tName: \"Example\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.readarr.Indexers.IndexersFunctions;\nimport com.pulumi.readarr.Indexers.inputs.GetIndexerArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = IndexersFunctions.getIndexer(GetIndexerArgs.builder()\n            .name(\"Example\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: readarr:Indexers:getIndexer\n      Arguments:\n        name: Example\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getIndexer.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Indexer name.\n"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getIndexer.\n",
                "properties": {
                    "additionalParameters": {
                        "type": "string",
                        "description": "Additional parameters.\n"
                    },
                    "allowZeroSize": {
                        "type": "boolean",
                        "description": "Allow zero size files.\n"
                    },
                    "apiKey": {
                        "type": "string",
                        "description": "API key.\n"
                    },
                    "apiPath": {
                        "type": "string",
                        "description": "API path.\n"
                    },
                    "apiUser": {
                        "type": "string",
                        "description": "API User.\n"
                    },
                    "authorSeedTime": {
                        "type": "integer",
                        "description": "Author seed time.\n"
                    },
                    "baseUrl": {
                        "type": "string",
                        "description": "Base URL.\n"
                    },
                    "captchaToken": {
                        "type": "string",
                        "description": "Captcha token.\n"
                    },
                    "categories": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "Series list.\n"
                    },
                    "configContract": {
                        "type": "string",
                        "description": "Indexer configuration template.\n"
                    },
                    "cookie": {
                        "type": "string",
                        "description": "Cookie.\n"
                    },
                    "delay": {
                        "type": "integer",
                        "description": "Delay before grabbing.\n"
                    },
                    "earlyReleaseLimit": {
                        "type": "integer",
                        "description": "Early release limit.\n"
                    },
                    "enableAutomaticSearch": {
                        "type": "boolean",
                        "description": "Enable automatic search flag.\n"
                    },
                    "enableInteractiveSearch": {
                        "type": "boolean",
                        "description": "Enable interactive search flag.\n"
                    },
                    "enableRss": {
                        "type": "boolean",
                        "description": "Enable RSS flag.\n"
                    },
                    "id": {
                        "type": "integer",
                        "description": "Indexer ID.\n"
                    },
                    "implementation": {
                        "type": "string",
                        "description": "Indexer implementation name.\n"
                    },
                    "minimumSeeders": {
                        "type": "integer",
                        "description": "Minimum seeders.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Indexer name.\n"
                    },
                    "passkey": {
                        "type": "string",
                        "description": "Passkey.\n",
                        "secret": true
                    },
                    "password": {
                        "type": "string",
                        "description": "Password.\n",
                        "secret": true
                    },
                    "priority": {
                        "type": "integer",
                        "description": "Priority.\n"
                    },
                    "protocol": {
                        "type": "string",
                        "description": "Protocol. Valid values are 'usenet' and 'torrent'.\n"
                    },
                    "rankedOnly": {
                        "type": "boolean",
                        "description": "Allow ranked only.\n"
                    },
                    "seedRatio": {
                        "type": "number",
                        "description": "Seed ratio.\n"
                    },
                    "seedTime": {
                        "type": "integer",
                        "description": "Seed time.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "List of associated tags.\n"
                    },
                    "username": {
                        "type": "string",
                        "description": "Username.\n"
                    }
                },
                "type": "object",
                "required": [
                    "additionalParameters",
                    "allowZeroSize",
                    "apiKey",
                    "apiPath",
                    "apiUser",
                    "authorSeedTime",
                    "baseUrl",
                    "captchaToken",
                    "categories",
                    "configContract",
                    "cookie",
                    "delay",
                    "earlyReleaseLimit",
                    "enableAutomaticSearch",
                    "enableInteractiveSearch",
                    "enableRss",
                    "id",
                    "implementation",
                    "minimumSeeders",
                    "name",
                    "passkey",
                    "password",
                    "priority",
                    "protocol",
                    "rankedOnly",
                    "seedRatio",
                    "seedTime",
                    "tags",
                    "username"
                ]
            }
        },
        "readarr:Indexers/getIndexerConfig:getIndexerConfig": {
            "description": "\u003c!-- subcategory:Indexers --\u003eIndexer Config.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as readarr from \"@pulumi/readarr\";\n\nconst example = readarr.Indexers.getIndexerConfig({});\n```\n```python\nimport pulumi\nimport pulumi_readarr as readarr\n\nexample = readarr.Indexers.get_indexer_config()\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Readarr = Pulumi.Readarr;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Readarr.Indexers.GetIndexerConfig.Invoke();\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/MaienM/pulumi-readarr/sdk/v2/go/readarr/Indexers\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := Indexers.GetIndexerConfig(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.readarr.Indexers.IndexersFunctions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = IndexersFunctions.getIndexerConfig();\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: readarr:Indexers:getIndexerConfig\n      Arguments: {}\n```\n{{% /example %}}\n{{% /examples %}}",
            "outputs": {
                "description": "A collection of values returned by getIndexerConfig.\n",
                "properties": {
                    "id": {
                        "type": "integer",
                        "description": "Delay Profile ID.\n"
                    },
                    "maximumSize": {
                        "type": "integer",
                        "description": "Maximum size.\n"
                    },
                    "minimumAge": {
                        "type": "integer",
                        "description": "Minimum age.\n"
                    },
                    "retention": {
                        "type": "integer",
                        "description": "Retention.\n"
                    },
                    "rssSyncInterval": {
                        "type": "integer",
                        "description": "RSS sync interval.\n"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "maximumSize",
                    "minimumAge",
                    "retention",
                    "rssSyncInterval"
                ]
            }
        },
        "readarr:Indexers/getIndexers:getIndexers": {
            "description": "\u003c!-- subcategory:Indexers --\u003eList all available Indexers.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as readarr from \"@pulumi/readarr\";\n\nconst example = readarr.Indexers.getIndexers({});\n```\n```python\nimport pulumi\nimport pulumi_readarr as readarr\n\nexample = readarr.Indexers.get_indexers()\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Readarr = Pulumi.Readarr;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Readarr.Indexers.GetIndexers.Invoke();\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/MaienM/pulumi-readarr/sdk/v2/go/readarr/Indexers\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := Indexers.GetIndexers(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.readarr.Indexers.IndexersFunctions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = IndexersFunctions.getIndexers();\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: readarr:Indexers:getIndexers\n      Arguments: {}\n```\n{{% /example %}}\n{{% /examples %}}",
            "outputs": {
                "description": "A collection of values returned by getIndexers.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The ID of this resource.\n"
                    },
                    "indexers": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/readarr:Indexers/getIndexersIndexer:getIndexersIndexer"
                        },
                        "description": "Indexer list.\n"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "indexers"
                ]
            }
        },
        "readarr:MediaManagement/getMediaManagement:getMediaManagement": {
            "description": "\u003c!-- subcategory:Media Management --\u003eMedia Management.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as readarr from \"@pulumi/readarr\";\n\nconst example = readarr.MediaManagement.getMediaManagement({});\n```\n```python\nimport pulumi\nimport pulumi_readarr as readarr\n\nexample = readarr.MediaManagement.get_media_management()\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Readarr = Pulumi.Readarr;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Readarr.MediaManagement.GetMediaManagement.Invoke();\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/MaienM/pulumi-readarr/sdk/v2/go/readarr/MediaManagement\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := MediaManagement.GetMediaManagement(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.readarr.MediaManagement.MediaManagementFunctions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = MediaManagementFunctions.getMediaManagement();\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: readarr:MediaManagement:getMediaManagement\n      Arguments: {}\n```\n{{% /example %}}\n{{% /examples %}}",
            "outputs": {
                "description": "A collection of values returned by getMediaManagement.\n",
                "properties": {
                    "allowFingerprinting": {
                        "type": "string",
                        "description": "Allow fingerprinting. valid inputs are: 'newFiles', 'allFiles' and 'never'.\n"
                    },
                    "chmodFolder": {
                        "type": "string",
                        "description": "Permission in linux format.\n"
                    },
                    "chownGroup": {
                        "type": "string",
                        "description": "Group used for permission.\n"
                    },
                    "createEmptyAuthorFolders": {
                        "type": "boolean",
                        "description": "Create empty author directories.\n"
                    },
                    "deleteEmptyFolders": {
                        "type": "boolean",
                        "description": "Delete empty directories.\n"
                    },
                    "downloadPropersRepacks": {
                        "type": "string",
                        "description": "Download proper and repack policy. valid inputs are: 'preferAndUpgrade', 'doNotUpgrade', and 'doNotPrefer'.\n"
                    },
                    "extraFileExtensions": {
                        "type": "string",
                        "description": "Comma separated list of extra files to import (.nfo will be imported as .nfo-orig).\n"
                    },
                    "fileDate": {
                        "type": "string",
                        "description": "Define the file date modification. valid inputs are: 'none', and 'bookReleaseDate'.\n"
                    },
                    "hardlinksCopy": {
                        "type": "boolean",
                        "description": "Use hardlinks instead of copy.\n"
                    },
                    "id": {
                        "type": "integer",
                        "description": "Media Management ID.\n"
                    },
                    "importExtraFiles": {
                        "type": "boolean",
                        "description": "Import extra files. If enabled it will leverage 'extra*file*extensions'.\n"
                    },
                    "minimumFreeSpace": {
                        "type": "integer",
                        "description": "Minimum free space in MB to allow import.\n"
                    },
                    "recycleBinDays": {
                        "type": "integer",
                        "description": "Recyle bin days of retention.\n"
                    },
                    "recycleBinPath": {
                        "type": "string",
                        "description": "Recycle bin absolute path.\n"
                    },
                    "rescanAfterRefresh": {
                        "type": "string",
                        "description": "Rescan after refresh policy. valid inputs are: 'always', 'afterManual' and 'never'.\n"
                    },
                    "setPermissions": {
                        "type": "boolean",
                        "description": "Set permission for imported files.\n"
                    },
                    "skipFreeSpaceCheck": {
                        "type": "boolean",
                        "description": "Skip free space check before importing.\n"
                    },
                    "unmonitorPreviousBooks": {
                        "type": "boolean",
                        "description": "Unmonitor deleted files.\n"
                    },
                    "watchIbraryForChanges": {
                        "type": "boolean",
                        "description": "Watch library for changes.\n"
                    }
                },
                "type": "object",
                "required": [
                    "allowFingerprinting",
                    "chmodFolder",
                    "chownGroup",
                    "createEmptyAuthorFolders",
                    "deleteEmptyFolders",
                    "downloadPropersRepacks",
                    "extraFileExtensions",
                    "fileDate",
                    "hardlinksCopy",
                    "id",
                    "importExtraFiles",
                    "minimumFreeSpace",
                    "recycleBinDays",
                    "recycleBinPath",
                    "rescanAfterRefresh",
                    "setPermissions",
                    "skipFreeSpaceCheck",
                    "unmonitorPreviousBooks",
                    "watchIbraryForChanges"
                ]
            }
        },
        "readarr:MediaManagement/getNaming:getNaming": {
            "description": "\u003c!-- subcategory:Media Management --\u003eNaming.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as readarr from \"@pulumi/readarr\";\n\nconst example = readarr.MediaManagement.getNaming({});\n```\n```python\nimport pulumi\nimport pulumi_readarr as readarr\n\nexample = readarr.MediaManagement.get_naming()\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Readarr = Pulumi.Readarr;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Readarr.MediaManagement.GetNaming.Invoke();\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/MaienM/pulumi-readarr/sdk/v2/go/readarr/MediaManagement\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := MediaManagement.GetNaming(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.readarr.MediaManagement.MediaManagementFunctions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = MediaManagementFunctions.getNaming();\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: readarr:MediaManagement:getNaming\n      Arguments: {}\n```\n{{% /example %}}\n{{% /examples %}}",
            "outputs": {
                "description": "A collection of values returned by getNaming.\n",
                "properties": {
                    "authorFolderFormat": {
                        "type": "string",
                        "description": "Author folder format.\n"
                    },
                    "id": {
                        "type": "integer",
                        "description": "Naming ID.\n"
                    },
                    "renameBooks": {
                        "type": "boolean",
                        "description": "Readarr will use the existing file name if false.\n"
                    },
                    "replaceIllegalCharacters": {
                        "type": "boolean",
                        "description": "Replace illegal characters. They will be removed if false.\n"
                    },
                    "standardBookFormat": {
                        "type": "string",
                        "description": "Standard book formatss.\n"
                    }
                },
                "type": "object",
                "required": [
                    "authorFolderFormat",
                    "id",
                    "renameBooks",
                    "replaceIllegalCharacters",
                    "standardBookFormat"
                ]
            }
        },
        "readarr:MediaManagement/getRootFolder:getRootFolder": {
            "description": "\u003c!-- subcategory:Media Management --\u003eSingle Root Folder.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as readarr from \"@pulumi/readarr\";\n\nconst example = readarr.MediaManagement.getRootFolder({\n    path: \"/example\",\n});\n```\n```python\nimport pulumi\nimport pulumi_readarr as readarr\n\nexample = readarr.MediaManagement.get_root_folder(path=\"/example\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Readarr = Pulumi.Readarr;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Readarr.MediaManagement.GetRootFolder.Invoke(new()\n    {\n        Path = \"/example\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/MaienM/pulumi-readarr/sdk/v2/go/readarr/MediaManagement\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := MediaManagement.GetRootFolder(ctx, \u0026mediamanagement.GetRootFolderArgs{\n\t\t\tPath: \"/example\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.readarr.MediaManagement.MediaManagementFunctions;\nimport com.pulumi.readarr.MediaManagement.inputs.GetRootFolderArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = MediaManagementFunctions.getRootFolder(GetRootFolderArgs.builder()\n            .path(\"/example\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: readarr:MediaManagement:getRootFolder\n      Arguments:\n        path: /example\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getRootFolder.\n",
                "properties": {
                    "path": {
                        "type": "string",
                        "description": "Root Folder absolute path.\n"
                    }
                },
                "type": "object",
                "required": [
                    "path"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getRootFolder.\n",
                "properties": {
                    "accessible": {
                        "type": "boolean",
                        "description": "Access flag.\n"
                    },
                    "defaultMetadataProfileId": {
                        "type": "integer",
                        "description": "Default metadata profile ID.\n"
                    },
                    "defaultMonitorOption": {
                        "type": "string",
                        "description": "Default monitor option.\n"
                    },
                    "defaultQualityProfileId": {
                        "type": "integer",
                        "description": "Default metadata profile ID.\n"
                    },
                    "defaultTags": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "List of associated tags.\n"
                    },
                    "host": {
                        "type": "string",
                        "description": "Calibre host.\n"
                    },
                    "id": {
                        "type": "integer",
                        "description": "Root Folder ID.\n"
                    },
                    "isCalibreLibrary": {
                        "type": "boolean",
                        "description": "Is calibre library flag.\n"
                    },
                    "library": {
                        "type": "string",
                        "description": "Calibre library.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Root Folder name.\n"
                    },
                    "outputProfile": {
                        "type": "string",
                        "description": "Calibre output profile.\n"
                    },
                    "password": {
                        "type": "string",
                        "description": "Calibre password.\n",
                        "secret": true
                    },
                    "path": {
                        "type": "string",
                        "description": "Root Folder absolute path.\n"
                    },
                    "port": {
                        "type": "integer",
                        "description": "Calibre Port.\n"
                    },
                    "useSsl": {
                        "type": "boolean",
                        "description": "Use SSL for calibre connection.\n"
                    },
                    "username": {
                        "type": "string",
                        "description": "Calibre username.\n"
                    }
                },
                "type": "object",
                "required": [
                    "accessible",
                    "defaultMetadataProfileId",
                    "defaultMonitorOption",
                    "defaultQualityProfileId",
                    "defaultTags",
                    "host",
                    "id",
                    "isCalibreLibrary",
                    "library",
                    "name",
                    "outputProfile",
                    "password",
                    "path",
                    "port",
                    "useSsl",
                    "username"
                ]
            }
        },
        "readarr:MediaManagement/getRootFolders:getRootFolders": {
            "description": "\u003c!-- subcategory:Media Management --\u003eList all available Root Folders.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as readarr from \"@pulumi/readarr\";\n\nconst example = readarr.MediaManagement.getRootFolders({});\n```\n```python\nimport pulumi\nimport pulumi_readarr as readarr\n\nexample = readarr.MediaManagement.get_root_folders()\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Readarr = Pulumi.Readarr;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Readarr.MediaManagement.GetRootFolders.Invoke();\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/MaienM/pulumi-readarr/sdk/v2/go/readarr/MediaManagement\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := MediaManagement.GetRootFolders(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.readarr.MediaManagement.MediaManagementFunctions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = MediaManagementFunctions.getRootFolders();\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: readarr:MediaManagement:getRootFolders\n      Arguments: {}\n```\n{{% /example %}}\n{{% /examples %}}",
            "outputs": {
                "description": "A collection of values returned by getRootFolders.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The ID of this resource.\n"
                    },
                    "rootFolders": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/readarr:MediaManagement/getRootFoldersRootFolder:getRootFoldersRootFolder"
                        },
                        "description": "Root Folder list.\n"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "rootFolders"
                ]
            }
        },
        "readarr:Metadata/getMetadataConfig:getMetadataConfig": {
            "description": "\u003c!-- subcategory:Metadata --\u003eMetadata Config.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as readarr from \"@pulumi/readarr\";\n\nconst example = readarr.Metadata.getMetadataConfig({});\n```\n```python\nimport pulumi\nimport pulumi_readarr as readarr\n\nexample = readarr.Metadata.get_metadata_config()\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Readarr = Pulumi.Readarr;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Readarr.Metadata.GetMetadataConfig.Invoke();\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/MaienM/pulumi-readarr/sdk/v2/go/readarr/Metadata\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := Metadata.GetMetadataConfig(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.readarr.Metadata.MetadataFunctions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = MetadataFunctions.getMetadataConfig();\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: readarr:Metadata:getMetadataConfig\n      Arguments: {}\n```\n{{% /example %}}\n{{% /examples %}}",
            "outputs": {
                "description": "A collection of values returned by getMetadataConfig.\n",
                "properties": {
                    "embedMetadata": {
                        "type": "boolean",
                        "description": "Embed metadata in book files.\n"
                    },
                    "id": {
                        "type": "integer",
                        "description": "Metadata Config ID.\n"
                    },
                    "scrubAudioTags": {
                        "type": "boolean",
                        "description": "Scrub audio tags.\n"
                    },
                    "updateCovers": {
                        "type": "boolean",
                        "description": "Update covers.\n"
                    },
                    "writeAudioTags": {
                        "type": "string",
                        "description": "Write audio tags.\n"
                    },
                    "writeBookTags": {
                        "type": "string",
                        "description": "Write book tags.\n"
                    }
                },
                "type": "object",
                "required": [
                    "embedMetadata",
                    "id",
                    "scrubAudioTags",
                    "updateCovers",
                    "writeAudioTags",
                    "writeBookTags"
                ]
            }
        },
        "readarr:Notifications/getNotification:getNotification": {
            "description": "\u003c!-- subcategory:Notifications --\u003eSingle Notification.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as readarr from \"@pulumi/readarr\";\n\nconst example = readarr.Notifications.getNotification({\n    name: \"Example\",\n});\n```\n```python\nimport pulumi\nimport pulumi_readarr as readarr\n\nexample = readarr.Notifications.get_notification(name=\"Example\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Readarr = Pulumi.Readarr;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Readarr.Notifications.GetNotification.Invoke(new()\n    {\n        Name = \"Example\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/MaienM/pulumi-readarr/sdk/v2/go/readarr/Notifications\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := Notifications.GetNotification(ctx, \u0026notifications.GetNotificationArgs{\n\t\t\tName: \"Example\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.readarr.Notifications.NotificationsFunctions;\nimport com.pulumi.readarr.Notifications.inputs.GetNotificationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = NotificationsFunctions.getNotification(GetNotificationArgs.builder()\n            .name(\"Example\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: readarr:Notifications:getNotification\n      Arguments:\n        name: Example\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getNotification.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Notification name.\n"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getNotification.\n",
                "properties": {
                    "accessToken": {
                        "type": "string",
                        "description": "Access token.\n"
                    },
                    "accessTokenSecret": {
                        "type": "string",
                        "description": "Access token secret.\n"
                    },
                    "addIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Add IDs.\n"
                    },
                    "apiKey": {
                        "type": "string",
                        "description": "API key.\n"
                    },
                    "appToken": {
                        "type": "string",
                        "description": "App token.\n"
                    },
                    "arguments": {
                        "type": "string",
                        "description": "Arguments.\n"
                    },
                    "attachFiles": {
                        "type": "boolean",
                        "description": "Attach files flag.\n"
                    },
                    "authUser": {
                        "type": "string",
                        "description": "Auth user.\n"
                    },
                    "author": {
                        "type": "string",
                        "description": "Author.\n"
                    },
                    "avatar": {
                        "type": "string",
                        "description": "Avatar.\n"
                    },
                    "bccs": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Bcc.\n"
                    },
                    "botToken": {
                        "type": "string",
                        "description": "Bot token.\n"
                    },
                    "ccs": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Cc.\n"
                    },
                    "channel": {
                        "type": "string",
                        "description": "Channel.\n"
                    },
                    "channelTags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Channel tags.\n"
                    },
                    "chatId": {
                        "type": "string",
                        "description": "Chat ID.\n"
                    },
                    "clickUrl": {
                        "type": "string",
                        "description": "Click URL.\n"
                    },
                    "condition": {
                        "type": "integer",
                        "description": "Condition. `10` BrandNew, `20` LikeNew, `30` VeryGood, `40` Good, `50` Acceptable, `60` Poor.\n"
                    },
                    "configContract": {
                        "type": "string",
                        "description": "Notification configuration template.\n"
                    },
                    "consumerKey": {
                        "type": "string",
                        "description": "Consumer key.\n"
                    },
                    "consumerSecret": {
                        "type": "string",
                        "description": "Consumer secret.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Condition description.\n"
                    },
                    "deviceIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Device IDs.\n"
                    },
                    "deviceNames": {
                        "type": "string",
                        "description": "Device names.\n"
                    },
                    "devices": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Devices.\n"
                    },
                    "directMessage": {
                        "type": "boolean",
                        "description": "Direct message flag.\n"
                    },
                    "event": {
                        "type": "string",
                        "description": "Event.\n"
                    },
                    "expire": {
                        "type": "integer",
                        "description": "Expire.\n"
                    },
                    "fieldTags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Devices.\n"
                    },
                    "from": {
                        "type": "string",
                        "description": "From.\n"
                    },
                    "grabFields": {
                        "type": "integer",
                        "description": "Grab fields. `0` Overview, `1` Rating, `2` Genres, `3` Quality, `4` Group, `5` Size, `6` Links, `7` Release, `8` Poster, `9` Fanart, `10` CustomFormats, `11` CustomFormatScore.\n"
                    },
                    "host": {
                        "type": "string",
                        "description": "Host.\n"
                    },
                    "icon": {
                        "type": "string",
                        "description": "Icon.\n"
                    },
                    "id": {
                        "type": "integer",
                        "description": "Notification ID.\n"
                    },
                    "implementation": {
                        "type": "string",
                        "description": "Notification implementation name.\n"
                    },
                    "importFields": {
                        "type": "integer",
                        "description": "Import fields. `0` Overview, `1` Rating, `2` Genres, `3` Quality, `4` Codecs, `5` Group, `6` Size, `7` Languages, `8` Subtitles, `9` Links, `10` Release, `11` Poster, `12` Fanart.\n"
                    },
                    "includeHealthWarnings": {
                        "type": "boolean",
                        "description": "Include health warnings.\n"
                    },
                    "instanceName": {
                        "type": "string",
                        "description": "Instance name.\n"
                    },
                    "key": {
                        "type": "string",
                        "description": "Key.\n"
                    },
                    "location": {
                        "type": "string",
                        "description": "Purchase location.\n"
                    },
                    "mapFrom": {
                        "type": "string",
                        "description": "Map From.\n"
                    },
                    "mapTo": {
                        "type": "string",
                        "description": "Map To.\n"
                    },
                    "mention": {
                        "type": "string",
                        "description": "Mention.\n"
                    },
                    "method": {
                        "type": "integer",
                        "description": "Method. `1` POST, `2` PUT.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Notification name.\n"
                    },
                    "notify": {
                        "type": "boolean",
                        "description": "Notify flag.\n"
                    },
                    "onApplicationUpdate": {
                        "type": "boolean",
                        "description": "On application update flag.\n"
                    },
                    "onAuthorDelete": {
                        "type": "boolean",
                        "description": "On author deleted flag.\n"
                    },
                    "onBookDelete": {
                        "type": "boolean",
                        "description": "On book delete flag.\n"
                    },
                    "onBookFileDelete": {
                        "type": "boolean",
                        "description": "On book file delete flag.\n"
                    },
                    "onBookFileDeleteForUpgrade": {
                        "type": "boolean",
                        "description": "On book file delete for upgrade flag.\n"
                    },
                    "onBookRetag": {
                        "type": "boolean",
                        "description": "On book retag flag.\n"
                    },
                    "onDownloadFailure": {
                        "type": "boolean",
                        "description": "On download failure flag.\n"
                    },
                    "onGrab": {
                        "type": "boolean",
                        "description": "On grab flag.\n"
                    },
                    "onHealthIssue": {
                        "type": "boolean",
                        "description": "On health issue flag.\n"
                    },
                    "onImportFailure": {
                        "type": "boolean",
                        "description": "On import failure flag.\n"
                    },
                    "onReleaseImport": {
                        "type": "boolean",
                        "description": "On release import flag.\n"
                    },
                    "onRename": {
                        "type": "boolean",
                        "description": "On rename flag.\n"
                    },
                    "onUpgrade": {
                        "type": "boolean",
                        "description": "On upgrade flag.\n"
                    },
                    "password": {
                        "type": "string",
                        "description": "password.\n"
                    },
                    "path": {
                        "type": "string",
                        "description": "Path.\n"
                    },
                    "port": {
                        "type": "integer",
                        "description": "Port.\n"
                    },
                    "priority": {
                        "type": "integer",
                        "description": "Priority.\n"
                    },
                    "recipients": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Recipients.\n"
                    },
                    "refreshToken": {
                        "type": "string",
                        "description": "Refresh token.\n"
                    },
                    "removeIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Remove IDs.\n"
                    },
                    "requestTokenSecret": {
                        "type": "string",
                        "description": "Request token secret.\n",
                        "secret": true
                    },
                    "requireEncryption": {
                        "type": "boolean",
                        "description": "Require encryption flag.\n"
                    },
                    "retry": {
                        "type": "integer",
                        "description": "Retry.\n"
                    },
                    "sendSilently": {
                        "type": "boolean",
                        "description": "Add silently flag.\n"
                    },
                    "senderDomain": {
                        "type": "string",
                        "description": "Sender domain.\n"
                    },
                    "senderId": {
                        "type": "string",
                        "description": "Sender ID.\n"
                    },
                    "server": {
                        "type": "string",
                        "description": "server.\n"
                    },
                    "serverUrl": {
                        "type": "string",
                        "description": "Server url.\n"
                    },
                    "signIn": {
                        "type": "string",
                        "description": "Sign in.\n"
                    },
                    "sound": {
                        "type": "string",
                        "description": "Sound.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "List of associated tags.\n"
                    },
                    "token": {
                        "type": "string",
                        "description": "Token.\n",
                        "secret": true
                    },
                    "topics": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Devices.\n"
                    },
                    "tos": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "To.\n"
                    },
                    "updateLibrary": {
                        "type": "boolean",
                        "description": "Update library flag.\n"
                    },
                    "url": {
                        "type": "string",
                        "description": "URL.\n"
                    },
                    "urlBase": {
                        "type": "string",
                        "description": "URL base.\n"
                    },
                    "useEuEndpoint": {
                        "type": "boolean",
                        "description": "Use EU endpoint flag.\n"
                    },
                    "useSsl": {
                        "type": "boolean",
                        "description": "Use SSL flag.\n"
                    },
                    "userId": {
                        "type": "string",
                        "description": "User ID.\n"
                    },
                    "userKey": {
                        "type": "string",
                        "description": "User key.\n"
                    },
                    "username": {
                        "type": "string",
                        "description": "Username.\n"
                    },
                    "webHookUrl": {
                        "type": "string",
                        "description": "Web hook url.\n"
                    }
                },
                "type": "object",
                "required": [
                    "accessToken",
                    "accessTokenSecret",
                    "addIds",
                    "apiKey",
                    "appToken",
                    "arguments",
                    "attachFiles",
                    "authUser",
                    "author",
                    "avatar",
                    "bccs",
                    "botToken",
                    "ccs",
                    "channel",
                    "channelTags",
                    "chatId",
                    "clickUrl",
                    "condition",
                    "configContract",
                    "consumerKey",
                    "consumerSecret",
                    "description",
                    "deviceIds",
                    "deviceNames",
                    "devices",
                    "directMessage",
                    "event",
                    "expire",
                    "fieldTags",
                    "from",
                    "grabFields",
                    "host",
                    "icon",
                    "id",
                    "implementation",
                    "importFields",
                    "includeHealthWarnings",
                    "instanceName",
                    "key",
                    "location",
                    "mapFrom",
                    "mapTo",
                    "mention",
                    "method",
                    "name",
                    "notify",
                    "onApplicationUpdate",
                    "onAuthorDelete",
                    "onBookDelete",
                    "onBookFileDelete",
                    "onBookFileDeleteForUpgrade",
                    "onBookRetag",
                    "onDownloadFailure",
                    "onGrab",
                    "onHealthIssue",
                    "onImportFailure",
                    "onReleaseImport",
                    "onRename",
                    "onUpgrade",
                    "password",
                    "path",
                    "port",
                    "priority",
                    "recipients",
                    "refreshToken",
                    "removeIds",
                    "requestTokenSecret",
                    "requireEncryption",
                    "retry",
                    "sendSilently",
                    "senderDomain",
                    "senderId",
                    "server",
                    "serverUrl",
                    "signIn",
                    "sound",
                    "tags",
                    "tos",
                    "token",
                    "topics",
                    "updateLibrary",
                    "url",
                    "urlBase",
                    "useEuEndpoint",
                    "useSsl",
                    "userId",
                    "userKey",
                    "username",
                    "webHookUrl"
                ]
            }
        },
        "readarr:Notifications/getNotifications:getNotifications": {
            "description": "\u003c!-- subcategory:Notifications --\u003eList all available Notifications.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as readarr from \"@pulumi/readarr\";\n\nconst example = readarr.Notifications.getNotifications({});\n```\n```python\nimport pulumi\nimport pulumi_readarr as readarr\n\nexample = readarr.Notifications.get_notifications()\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Readarr = Pulumi.Readarr;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Readarr.Notifications.GetNotifications.Invoke();\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/MaienM/pulumi-readarr/sdk/v2/go/readarr/Notifications\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := Notifications.GetNotifications(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.readarr.Notifications.NotificationsFunctions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = NotificationsFunctions.getNotifications();\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: readarr:Notifications:getNotifications\n      Arguments: {}\n```\n{{% /example %}}\n{{% /examples %}}",
            "outputs": {
                "description": "A collection of values returned by getNotifications.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The ID of this resource.\n"
                    },
                    "notifications": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/readarr:Notifications/getNotificationsNotification:getNotificationsNotification"
                        },
                        "description": "Notification list.\n"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "notifications"
                ]
            }
        },
        "readarr:Profiles/getCustomFormat:getCustomFormat": {
            "description": "\u003c!-- subcategory:Profiles --\u003eSingle Custom Format.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as readarr from \"@pulumi/readarr\";\n\nconst example = readarr.Profiles.getCustomFormat({\n    name: \"Example\",\n});\n```\n```python\nimport pulumi\nimport pulumi_readarr as readarr\n\nexample = readarr.Profiles.get_custom_format(name=\"Example\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Readarr = Pulumi.Readarr;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Readarr.Profiles.GetCustomFormat.Invoke(new()\n    {\n        Name = \"Example\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/MaienM/pulumi-readarr/sdk/v2/go/readarr/Profiles\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := Profiles.GetCustomFormat(ctx, \u0026profiles.GetCustomFormatArgs{\n\t\t\tName: \"Example\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.readarr.Profiles.ProfilesFunctions;\nimport com.pulumi.readarr.Profiles.inputs.GetCustomFormatArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = ProfilesFunctions.getCustomFormat(GetCustomFormatArgs.builder()\n            .name(\"Example\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: readarr:Profiles:getCustomFormat\n      Arguments:\n        name: Example\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getCustomFormat.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Custom Format name.\n"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getCustomFormat.\n",
                "properties": {
                    "id": {
                        "type": "integer",
                        "description": "Custom Format ID.\n"
                    },
                    "includeCustomFormatWhenRenaming": {
                        "type": "boolean",
                        "description": "Include custom format when renaming flag.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Custom Format name.\n"
                    },
                    "specifications": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/readarr:Profiles/getCustomFormatSpecification:getCustomFormatSpecification"
                        },
                        "description": "Specifications.\n"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "includeCustomFormatWhenRenaming",
                    "name",
                    "specifications"
                ]
            }
        },
        "readarr:Profiles/getCustomFormatCondition:getCustomFormatCondition": {
            "description": "\u003c!-- subcategory:Profiles -\u003e Generic Custom Format Condition data source. When possible use a specific data source instead.\nFor more information refer to [Custom Format Conditions](https://wiki.servarr.com/readarr/settings#conditions).\n To be used in conjunction with Custom Format.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as readarr from \"@maienm/pulumi-readarr\";\nimport * as readarr from \"@pulumi/readarr\";\n\nconst exampleCustomFormatCondition = readarr.Profiles.getCustomFormatCondition({\n    name: \"Example\",\n    implementation: \"SizeSpecification\",\n    negate: false,\n    required: false,\n    min: 0,\n    max: 100,\n});\nconst exampleCustomFormat = new readarr.profiles.CustomFormat(\"exampleCustomFormat\", {\n    includeCustomFormatWhenRenaming: false,\n    name: \"Example\",\n    specifications: [exampleCustomFormatCondition],\n});\n```\n```python\nimport pulumi\nimport pulumi_readarr as readarr\n\nexample_custom_format_condition = readarr.Profiles.get_custom_format_condition(name=\"Example\",\n    implementation=\"SizeSpecification\",\n    negate=False,\n    required=False,\n    min=0,\n    max=100)\nexample_custom_format = readarr.profiles.CustomFormat(\"exampleCustomFormat\",\n    include_custom_format_when_renaming=False,\n    name=\"Example\",\n    specifications=[example_custom_format_condition])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Readarr = MaienM.Readarr;\nusing Readarr = Pulumi.Readarr;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleCustomFormatCondition = Readarr.Profiles.GetCustomFormatCondition.Invoke(new()\n    {\n        Name = \"Example\",\n        Implementation = \"SizeSpecification\",\n        Negate = false,\n        Required = false,\n        Min = 0,\n        Max = 100,\n    });\n\n    var exampleCustomFormat = new Readarr.Profiles.CustomFormat(\"exampleCustomFormat\", new()\n    {\n        IncludeCustomFormatWhenRenaming = false,\n        Name = \"Example\",\n        Specifications = new[]\n        {\n            exampleCustomFormatCondition,\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/MaienM/pulumi-readarr/sdk/v2/go/readarr/Profiles\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleCustomFormatCondition, err := Profiles.GetCustomFormatCondition(ctx, \u0026profiles.GetCustomFormatConditionArgs{\n\t\t\tName:           \"Example\",\n\t\t\tImplementation: \"SizeSpecification\",\n\t\t\tNegate:         false,\n\t\t\tRequired:       false,\n\t\t\tMin:            pulumi.IntRef(0),\n\t\t\tMax:            pulumi.IntRef(100),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = Profiles.NewCustomFormat(ctx, \"exampleCustomFormat\", \u0026Profiles.CustomFormatArgs{\n\t\t\tIncludeCustomFormatWhenRenaming: pulumi.Bool(false),\n\t\t\tName:                            pulumi.String(\"Example\"),\n\t\t\tSpecifications: profiles.CustomFormatSpecificationArray{\n\t\t\t\tprofiles.GetCustomFormatConditionResult(exampleCustomFormatCondition),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.readarr.Profiles.ProfilesFunctions;\nimport com.pulumi.readarr.Profiles.inputs.GetCustomFormatConditionArgs;\nimport com.pulumi.readarr.Profiles.CustomFormat;\nimport com.pulumi.readarr.Profiles.CustomFormatArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var exampleCustomFormatCondition = ProfilesFunctions.getCustomFormatCondition(GetCustomFormatConditionArgs.builder()\n            .name(\"Example\")\n            .implementation(\"SizeSpecification\")\n            .negate(false)\n            .required(false)\n            .min(0)\n            .max(100)\n            .build());\n\n        var exampleCustomFormat = new CustomFormat(\"exampleCustomFormat\", CustomFormatArgs.builder()        \n            .includeCustomFormatWhenRenaming(false)\n            .name(\"Example\")\n            .specifications(exampleCustomFormatCondition.applyValue(getCustomFormatConditionResult -\u003e getCustomFormatConditionResult))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleCustomFormat:\n    type: readarr:Profiles:CustomFormat\n    properties:\n      includeCustomFormatWhenRenaming: false\n      name: Example\n      specifications:\n        - ${exampleCustomFormatCondition}\nvariables:\n  exampleCustomFormatCondition:\n    fn::invoke:\n      Function: readarr:Profiles:getCustomFormatCondition\n      Arguments:\n        name: Example\n        implementation: SizeSpecification\n        negate: false\n        required: false\n        min: 0\n        max: 100\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getCustomFormatCondition.\n",
                "properties": {
                    "implementation": {
                        "type": "string",
                        "description": "Implementation.\n"
                    },
                    "max": {
                        "type": "integer",
                        "description": "Max.\n"
                    },
                    "min": {
                        "type": "integer",
                        "description": "Min.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Specification name.\n"
                    },
                    "negate": {
                        "type": "boolean",
                        "description": "Negate flag.\n"
                    },
                    "required": {
                        "type": "boolean",
                        "description": "Computed flag.\n"
                    },
                    "value": {
                        "type": "string",
                        "description": "Value.\n"
                    }
                },
                "type": "object",
                "required": [
                    "implementation",
                    "name",
                    "negate",
                    "required"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getCustomFormatCondition.\n",
                "properties": {
                    "id": {
                        "type": "integer",
                        "description": "Custom format condition ID.\n"
                    },
                    "implementation": {
                        "type": "string",
                        "description": "Implementation.\n"
                    },
                    "max": {
                        "type": "integer",
                        "description": "Max.\n"
                    },
                    "min": {
                        "type": "integer",
                        "description": "Min.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Specification name.\n"
                    },
                    "negate": {
                        "type": "boolean",
                        "description": "Negate flag.\n"
                    },
                    "required": {
                        "type": "boolean",
                        "description": "Computed flag.\n"
                    },
                    "value": {
                        "type": "string",
                        "description": "Value.\n"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "implementation",
                    "max",
                    "min",
                    "name",
                    "negate",
                    "required",
                    "value"
                ]
            }
        },
        "readarr:Profiles/getCustomFormatConditionReleaseGroup:getCustomFormatConditionReleaseGroup": {
            "description": "\u003c!-- subcategory:Profiles -\u003e Custom Format Condition Release Group data source.\nFor more information refer to [Custom Format Conditions](https://wiki.servarr.com/readarr/settings#conditions).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as readarr from \"@maienm/pulumi-readarr\";\nimport * as readarr from \"@pulumi/readarr\";\n\nconst exampleCustomFormatConditionReleaseGroup = readarr.Profiles.getCustomFormatConditionReleaseGroup({\n    name: \"HDBits\",\n    negate: false,\n    required: false,\n    value: \".*HDBits.*\",\n});\nconst exampleCustomFormat = new readarr.profiles.CustomFormat(\"exampleCustomFormat\", {\n    includeCustomFormatWhenRenaming: false,\n    name: \"Example\",\n    specifications: [exampleCustomFormatConditionReleaseGroup],\n});\n```\n```python\nimport pulumi\nimport pulumi_readarr as readarr\n\nexample_custom_format_condition_release_group = readarr.Profiles.get_custom_format_condition_release_group(name=\"HDBits\",\n    negate=False,\n    required=False,\n    value=\".*HDBits.*\")\nexample_custom_format = readarr.profiles.CustomFormat(\"exampleCustomFormat\",\n    include_custom_format_when_renaming=False,\n    name=\"Example\",\n    specifications=[example_custom_format_condition_release_group])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Readarr = MaienM.Readarr;\nusing Readarr = Pulumi.Readarr;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleCustomFormatConditionReleaseGroup = Readarr.Profiles.GetCustomFormatConditionReleaseGroup.Invoke(new()\n    {\n        Name = \"HDBits\",\n        Negate = false,\n        Required = false,\n        Value = \".*HDBits.*\",\n    });\n\n    var exampleCustomFormat = new Readarr.Profiles.CustomFormat(\"exampleCustomFormat\", new()\n    {\n        IncludeCustomFormatWhenRenaming = false,\n        Name = \"Example\",\n        Specifications = new[]\n        {\n            exampleCustomFormatConditionReleaseGroup,\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/MaienM/pulumi-readarr/sdk/v2/go/readarr/Profiles\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleCustomFormatConditionReleaseGroup, err := Profiles.GetCustomFormatConditionReleaseGroup(ctx, \u0026profiles.GetCustomFormatConditionReleaseGroupArgs{\n\t\t\tName:     \"HDBits\",\n\t\t\tNegate:   false,\n\t\t\tRequired: false,\n\t\t\tValue:    \".*HDBits.*\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = Profiles.NewCustomFormat(ctx, \"exampleCustomFormat\", \u0026Profiles.CustomFormatArgs{\n\t\t\tIncludeCustomFormatWhenRenaming: pulumi.Bool(false),\n\t\t\tName:                            pulumi.String(\"Example\"),\n\t\t\tSpecifications: profiles.CustomFormatSpecificationArray{\n\t\t\t\tprofiles.GetCustomFormatConditionReleaseGroupResult(exampleCustomFormatConditionReleaseGroup),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.readarr.Profiles.ProfilesFunctions;\nimport com.pulumi.readarr.Profiles.inputs.GetCustomFormatConditionReleaseGroupArgs;\nimport com.pulumi.readarr.Profiles.CustomFormat;\nimport com.pulumi.readarr.Profiles.CustomFormatArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var exampleCustomFormatConditionReleaseGroup = ProfilesFunctions.getCustomFormatConditionReleaseGroup(GetCustomFormatConditionReleaseGroupArgs.builder()\n            .name(\"HDBits\")\n            .negate(false)\n            .required(false)\n            .value(\".*HDBits.*\")\n            .build());\n\n        var exampleCustomFormat = new CustomFormat(\"exampleCustomFormat\", CustomFormatArgs.builder()        \n            .includeCustomFormatWhenRenaming(false)\n            .name(\"Example\")\n            .specifications(exampleCustomFormatConditionReleaseGroup.applyValue(getCustomFormatConditionReleaseGroupResult -\u003e getCustomFormatConditionReleaseGroupResult))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleCustomFormat:\n    type: readarr:Profiles:CustomFormat\n    properties:\n      includeCustomFormatWhenRenaming: false\n      name: Example\n      specifications:\n        - ${exampleCustomFormatConditionReleaseGroup}\nvariables:\n  exampleCustomFormatConditionReleaseGroup:\n    fn::invoke:\n      Function: readarr:Profiles:getCustomFormatConditionReleaseGroup\n      Arguments:\n        name: HDBits\n        negate: false\n        required: false\n        value: .*HDBits.*\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getCustomFormatConditionReleaseGroup.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Specification name.\n"
                    },
                    "negate": {
                        "type": "boolean",
                        "description": "Negate flag.\n"
                    },
                    "required": {
                        "type": "boolean",
                        "description": "Computed flag.\n"
                    },
                    "value": {
                        "type": "string",
                        "description": "Release group RegEx.\n"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "negate",
                    "required",
                    "value"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getCustomFormatConditionReleaseGroup.\n",
                "properties": {
                    "id": {
                        "type": "integer",
                        "description": "Custom format condition release group ID.\n"
                    },
                    "implementation": {
                        "type": "string",
                        "description": "Implementation.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Specification name.\n"
                    },
                    "negate": {
                        "type": "boolean",
                        "description": "Negate flag.\n"
                    },
                    "required": {
                        "type": "boolean",
                        "description": "Computed flag.\n"
                    },
                    "value": {
                        "type": "string",
                        "description": "Release group RegEx.\n"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "implementation",
                    "name",
                    "negate",
                    "required",
                    "value"
                ]
            }
        },
        "readarr:Profiles/getCustomFormatConditionReleaseTitle:getCustomFormatConditionReleaseTitle": {
            "description": "\u003c!-- subcategory:Profiles -\u003e Custom Format Condition Release Title data source.\nFor more information refer to [Custom Format Conditions](https://wiki.servarr.com/readarr/settings#conditions).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as readarr from \"@maienm/pulumi-readarr\";\nimport * as readarr from \"@pulumi/readarr\";\n\nconst exampleCustomFormatConditionReleaseTitle = readarr.Profiles.getCustomFormatConditionReleaseTitle({\n    name: \"x265\",\n    negate: false,\n    required: false,\n    value: \"(((x|h)\\\\.?265)|(HEVC))\",\n});\nconst exampleCustomFormat = new readarr.profiles.CustomFormat(\"exampleCustomFormat\", {\n    includeCustomFormatWhenRenaming: false,\n    name: \"Example\",\n    specifications: [exampleCustomFormatConditionReleaseTitle],\n});\n```\n```python\nimport pulumi\nimport pulumi_readarr as readarr\n\nexample_custom_format_condition_release_title = readarr.Profiles.get_custom_format_condition_release_title(name=\"x265\",\n    negate=False,\n    required=False,\n    value=\"(((x|h)\\\\.?265)|(HEVC))\")\nexample_custom_format = readarr.profiles.CustomFormat(\"exampleCustomFormat\",\n    include_custom_format_when_renaming=False,\n    name=\"Example\",\n    specifications=[example_custom_format_condition_release_title])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Readarr = MaienM.Readarr;\nusing Readarr = Pulumi.Readarr;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleCustomFormatConditionReleaseTitle = Readarr.Profiles.GetCustomFormatConditionReleaseTitle.Invoke(new()\n    {\n        Name = \"x265\",\n        Negate = false,\n        Required = false,\n        Value = \"(((x|h)\\\\.?265)|(HEVC))\",\n    });\n\n    var exampleCustomFormat = new Readarr.Profiles.CustomFormat(\"exampleCustomFormat\", new()\n    {\n        IncludeCustomFormatWhenRenaming = false,\n        Name = \"Example\",\n        Specifications = new[]\n        {\n            exampleCustomFormatConditionReleaseTitle,\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/MaienM/pulumi-readarr/sdk/v2/go/readarr/Profiles\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleCustomFormatConditionReleaseTitle, err := Profiles.GetCustomFormatConditionReleaseTitle(ctx, \u0026profiles.GetCustomFormatConditionReleaseTitleArgs{\n\t\t\tName:     \"x265\",\n\t\t\tNegate:   false,\n\t\t\tRequired: false,\n\t\t\tValue:    \"(((x|h)\\\\.?265)|(HEVC))\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = Profiles.NewCustomFormat(ctx, \"exampleCustomFormat\", \u0026Profiles.CustomFormatArgs{\n\t\t\tIncludeCustomFormatWhenRenaming: pulumi.Bool(false),\n\t\t\tName:                            pulumi.String(\"Example\"),\n\t\t\tSpecifications: profiles.CustomFormatSpecificationArray{\n\t\t\t\tprofiles.GetCustomFormatConditionReleaseTitleResult(exampleCustomFormatConditionReleaseTitle),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.readarr.Profiles.ProfilesFunctions;\nimport com.pulumi.readarr.Profiles.inputs.GetCustomFormatConditionReleaseTitleArgs;\nimport com.pulumi.readarr.Profiles.CustomFormat;\nimport com.pulumi.readarr.Profiles.CustomFormatArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var exampleCustomFormatConditionReleaseTitle = ProfilesFunctions.getCustomFormatConditionReleaseTitle(GetCustomFormatConditionReleaseTitleArgs.builder()\n            .name(\"x265\")\n            .negate(false)\n            .required(false)\n            .value(\"(((x|h)\\\\.?265)|(HEVC))\")\n            .build());\n\n        var exampleCustomFormat = new CustomFormat(\"exampleCustomFormat\", CustomFormatArgs.builder()        \n            .includeCustomFormatWhenRenaming(false)\n            .name(\"Example\")\n            .specifications(exampleCustomFormatConditionReleaseTitle.applyValue(getCustomFormatConditionReleaseTitleResult -\u003e getCustomFormatConditionReleaseTitleResult))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleCustomFormat:\n    type: readarr:Profiles:CustomFormat\n    properties:\n      includeCustomFormatWhenRenaming: false\n      name: Example\n      specifications:\n        - ${exampleCustomFormatConditionReleaseTitle}\nvariables:\n  exampleCustomFormatConditionReleaseTitle:\n    fn::invoke:\n      Function: readarr:Profiles:getCustomFormatConditionReleaseTitle\n      Arguments:\n        name: x265\n        negate: false\n        required: false\n        value: (((x|h)\\.?265)|(HEVC))\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getCustomFormatConditionReleaseTitle.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Specification name.\n"
                    },
                    "negate": {
                        "type": "boolean",
                        "description": "Negate flag.\n"
                    },
                    "required": {
                        "type": "boolean",
                        "description": "Computed flag.\n"
                    },
                    "value": {
                        "type": "string",
                        "description": "Release title RegEx.\n"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "negate",
                    "required",
                    "value"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getCustomFormatConditionReleaseTitle.\n",
                "properties": {
                    "id": {
                        "type": "integer",
                        "description": "Custom format condition release title ID.\n"
                    },
                    "implementation": {
                        "type": "string",
                        "description": "Implementation.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Specification name.\n"
                    },
                    "negate": {
                        "type": "boolean",
                        "description": "Negate flag.\n"
                    },
                    "required": {
                        "type": "boolean",
                        "description": "Computed flag.\n"
                    },
                    "value": {
                        "type": "string",
                        "description": "Release title RegEx.\n"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "implementation",
                    "name",
                    "negate",
                    "required",
                    "value"
                ]
            }
        },
        "readarr:Profiles/getCustomFormatConditionSize:getCustomFormatConditionSize": {
            "description": "\u003c!-- subcategory:Profiles -\u003e Custom Format Condition Size data source.\nFor more information refer to [Custom Format Conditions](https://wiki.servarr.com/readarr/settings#conditions).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as readarr from \"@maienm/pulumi-readarr\";\nimport * as readarr from \"@pulumi/readarr\";\n\nconst exampleCustomFormatConditionSize = readarr.Profiles.getCustomFormatConditionSize({\n    name: \"Example\",\n    negate: false,\n    required: false,\n    min: 5,\n    max: 50,\n});\nconst exampleCustomFormat = new readarr.profiles.CustomFormat(\"exampleCustomFormat\", {\n    includeCustomFormatWhenRenaming: false,\n    name: \"Example\",\n    specifications: [exampleCustomFormatConditionSize],\n});\n```\n```python\nimport pulumi\nimport pulumi_readarr as readarr\n\nexample_custom_format_condition_size = readarr.Profiles.get_custom_format_condition_size(name=\"Example\",\n    negate=False,\n    required=False,\n    min=5,\n    max=50)\nexample_custom_format = readarr.profiles.CustomFormat(\"exampleCustomFormat\",\n    include_custom_format_when_renaming=False,\n    name=\"Example\",\n    specifications=[example_custom_format_condition_size])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Readarr = MaienM.Readarr;\nusing Readarr = Pulumi.Readarr;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleCustomFormatConditionSize = Readarr.Profiles.GetCustomFormatConditionSize.Invoke(new()\n    {\n        Name = \"Example\",\n        Negate = false,\n        Required = false,\n        Min = 5,\n        Max = 50,\n    });\n\n    var exampleCustomFormat = new Readarr.Profiles.CustomFormat(\"exampleCustomFormat\", new()\n    {\n        IncludeCustomFormatWhenRenaming = false,\n        Name = \"Example\",\n        Specifications = new[]\n        {\n            exampleCustomFormatConditionSize,\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/MaienM/pulumi-readarr/sdk/v2/go/readarr/Profiles\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleCustomFormatConditionSize, err := Profiles.GetCustomFormatConditionSize(ctx, \u0026profiles.GetCustomFormatConditionSizeArgs{\n\t\t\tName:     \"Example\",\n\t\t\tNegate:   false,\n\t\t\tRequired: false,\n\t\t\tMin:      5,\n\t\t\tMax:      50,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = Profiles.NewCustomFormat(ctx, \"exampleCustomFormat\", \u0026Profiles.CustomFormatArgs{\n\t\t\tIncludeCustomFormatWhenRenaming: pulumi.Bool(false),\n\t\t\tName:                            pulumi.String(\"Example\"),\n\t\t\tSpecifications: profiles.CustomFormatSpecificationArray{\n\t\t\t\tprofiles.GetCustomFormatConditionSizeResult(exampleCustomFormatConditionSize),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.readarr.Profiles.ProfilesFunctions;\nimport com.pulumi.readarr.Profiles.inputs.GetCustomFormatConditionSizeArgs;\nimport com.pulumi.readarr.Profiles.CustomFormat;\nimport com.pulumi.readarr.Profiles.CustomFormatArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var exampleCustomFormatConditionSize = ProfilesFunctions.getCustomFormatConditionSize(GetCustomFormatConditionSizeArgs.builder()\n            .name(\"Example\")\n            .negate(false)\n            .required(false)\n            .min(5)\n            .max(50)\n            .build());\n\n        var exampleCustomFormat = new CustomFormat(\"exampleCustomFormat\", CustomFormatArgs.builder()        \n            .includeCustomFormatWhenRenaming(false)\n            .name(\"Example\")\n            .specifications(exampleCustomFormatConditionSize.applyValue(getCustomFormatConditionSizeResult -\u003e getCustomFormatConditionSizeResult))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  exampleCustomFormat:\n    type: readarr:Profiles:CustomFormat\n    properties:\n      includeCustomFormatWhenRenaming: false\n      name: Example\n      specifications:\n        - ${exampleCustomFormatConditionSize}\nvariables:\n  exampleCustomFormatConditionSize:\n    fn::invoke:\n      Function: readarr:Profiles:getCustomFormatConditionSize\n      Arguments:\n        name: Example\n        negate: false\n        required: false\n        min: 5\n        max: 50\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getCustomFormatConditionSize.\n",
                "properties": {
                    "max": {
                        "type": "integer",
                        "description": "Max size in GB.\n"
                    },
                    "min": {
                        "type": "integer",
                        "description": "Min size in GB.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Specification name.\n"
                    },
                    "negate": {
                        "type": "boolean",
                        "description": "Negate flag.\n"
                    },
                    "required": {
                        "type": "boolean",
                        "description": "Computed flag.\n"
                    }
                },
                "type": "object",
                "required": [
                    "max",
                    "min",
                    "name",
                    "negate",
                    "required"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getCustomFormatConditionSize.\n",
                "properties": {
                    "id": {
                        "type": "integer",
                        "description": "Custom format condition size ID.\n"
                    },
                    "implementation": {
                        "type": "string",
                        "description": "Implementation.\n"
                    },
                    "max": {
                        "type": "integer",
                        "description": "Max size in GB.\n"
                    },
                    "min": {
                        "type": "integer",
                        "description": "Min size in GB.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Specification name.\n"
                    },
                    "negate": {
                        "type": "boolean",
                        "description": "Negate flag.\n"
                    },
                    "required": {
                        "type": "boolean",
                        "description": "Computed flag.\n"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "implementation",
                    "max",
                    "min",
                    "name",
                    "negate",
                    "required"
                ]
            }
        },
        "readarr:Profiles/getCustomFormats:getCustomFormats": {
            "description": "\u003c!-- subcategory:Profiles --\u003eList all available Custom Formats.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as readarr from \"@pulumi/readarr\";\n\nconst example = readarr.Profiles.getCustomFormats({});\n```\n```python\nimport pulumi\nimport pulumi_readarr as readarr\n\nexample = readarr.Profiles.get_custom_formats()\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Readarr = Pulumi.Readarr;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Readarr.Profiles.GetCustomFormats.Invoke();\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/MaienM/pulumi-readarr/sdk/v2/go/readarr/Profiles\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := Profiles.GetCustomFormats(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.readarr.Profiles.ProfilesFunctions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = ProfilesFunctions.getCustomFormats();\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: readarr:Profiles:getCustomFormats\n      Arguments: {}\n```\n{{% /example %}}\n{{% /examples %}}",
            "outputs": {
                "description": "A collection of values returned by getCustomFormats.\n",
                "properties": {
                    "customFormats": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/readarr:Profiles/getCustomFormatsCustomFormat:getCustomFormatsCustomFormat"
                        },
                        "description": "Download Client list..\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The ID of this resource.\n"
                    }
                },
                "type": "object",
                "required": [
                    "customFormats",
                    "id"
                ]
            }
        },
        "readarr:Profiles/getDelayProfile:getDelayProfile": {
            "description": "\u003c!-- subcategory:Profiles --\u003eSingle Delay Profile.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as readarr from \"@pulumi/readarr\";\n\nconst example = readarr.Profiles.getDelayProfile({\n    id: 1,\n});\n```\n```python\nimport pulumi\nimport pulumi_readarr as readarr\n\nexample = readarr.Profiles.get_delay_profile(id=1)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Readarr = Pulumi.Readarr;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Readarr.Profiles.GetDelayProfile.Invoke(new()\n    {\n        Id = 1,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/MaienM/pulumi-readarr/sdk/v2/go/readarr/Profiles\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := Profiles.GetDelayProfile(ctx, \u0026profiles.GetDelayProfileArgs{\n\t\t\tId: 1,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.readarr.Profiles.ProfilesFunctions;\nimport com.pulumi.readarr.Profiles.inputs.GetDelayProfileArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = ProfilesFunctions.getDelayProfile(GetDelayProfileArgs.builder()\n            .id(1)\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: readarr:Profiles:getDelayProfile\n      Arguments:\n        id: 1\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getDelayProfile.\n",
                "properties": {
                    "id": {
                        "type": "integer",
                        "description": "Delay Profile ID.\n"
                    }
                },
                "type": "object",
                "required": [
                    "id"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getDelayProfile.\n",
                "properties": {
                    "enableTorrent": {
                        "type": "boolean",
                        "description": "Torrent allowed Flag.\n"
                    },
                    "enableUsenet": {
                        "type": "boolean",
                        "description": "Usenet allowed Flag.\n"
                    },
                    "id": {
                        "type": "integer",
                        "description": "Delay Profile ID.\n"
                    },
                    "order": {
                        "type": "integer",
                        "description": "Order.\n"
                    },
                    "preferredProtocol": {
                        "type": "string",
                        "description": "Preferred protocol.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "List of associated tags.\n"
                    },
                    "torrentDelay": {
                        "type": "integer",
                        "description": "Torrent Delay.\n"
                    },
                    "usenetDelay": {
                        "type": "integer",
                        "description": "Usenet delay.\n"
                    }
                },
                "type": "object",
                "required": [
                    "enableTorrent",
                    "enableUsenet",
                    "id",
                    "order",
                    "preferredProtocol",
                    "tags",
                    "torrentDelay",
                    "usenetDelay"
                ]
            }
        },
        "readarr:Profiles/getDelayProfiles:getDelayProfiles": {
            "description": "\u003c!-- subcategory:Profiles --\u003eList all available Delay Profiles.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as readarr from \"@pulumi/readarr\";\n\nconst example = readarr.Profiles.getDelayProfiles({});\n```\n```python\nimport pulumi\nimport pulumi_readarr as readarr\n\nexample = readarr.Profiles.get_delay_profiles()\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Readarr = Pulumi.Readarr;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Readarr.Profiles.GetDelayProfiles.Invoke();\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/MaienM/pulumi-readarr/sdk/v2/go/readarr/Profiles\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := Profiles.GetDelayProfiles(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.readarr.Profiles.ProfilesFunctions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = ProfilesFunctions.getDelayProfiles();\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: readarr:Profiles:getDelayProfiles\n      Arguments: {}\n```\n{{% /example %}}\n{{% /examples %}}",
            "outputs": {
                "description": "A collection of values returned by getDelayProfiles.\n",
                "properties": {
                    "delayProfiles": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/readarr:Profiles/getDelayProfilesDelayProfile:getDelayProfilesDelayProfile"
                        },
                        "description": "Delay Profile list.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The ID of this resource.\n"
                    }
                },
                "type": "object",
                "required": [
                    "delayProfiles",
                    "id"
                ]
            }
        },
        "readarr:Profiles/getMetadataProfile:getMetadataProfile": {
            "description": "\u003c!-- subcategory:Profiles --\u003eSingle Metadata Profile.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as readarr from \"@pulumi/readarr\";\n\nconst example = readarr.Profiles.getMetadataProfile({\n    name: \"Example\",\n});\n```\n```python\nimport pulumi\nimport pulumi_readarr as readarr\n\nexample = readarr.Profiles.get_metadata_profile(name=\"Example\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Readarr = Pulumi.Readarr;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Readarr.Profiles.GetMetadataProfile.Invoke(new()\n    {\n        Name = \"Example\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/MaienM/pulumi-readarr/sdk/v2/go/readarr/Profiles\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := Profiles.GetMetadataProfile(ctx, \u0026profiles.GetMetadataProfileArgs{\n\t\t\tName: \"Example\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.readarr.Profiles.ProfilesFunctions;\nimport com.pulumi.readarr.Profiles.inputs.GetMetadataProfileArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = ProfilesFunctions.getMetadataProfile(GetMetadataProfileArgs.builder()\n            .name(\"Example\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: readarr:Profiles:getMetadataProfile\n      Arguments:\n        name: Example\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getMetadataProfile.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Metadata Profile name.\n"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getMetadataProfile.\n",
                "properties": {
                    "allowedLanguages": {
                        "type": "string",
                        "description": "Allowed languages. Comma separated list of ISO 639-3 language codes.\n"
                    },
                    "id": {
                        "type": "integer",
                        "description": "Metadata Profile ID.\n"
                    },
                    "ignored": {
                        "type": "string",
                        "description": "Terms to ignore. Comma separated list.\n"
                    },
                    "minPages": {
                        "type": "integer",
                        "description": "Minimum pages.\n"
                    },
                    "minPopularity": {
                        "type": "number",
                        "description": "Minimum popularity.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Metadata Profile name.\n"
                    },
                    "skipMissingDate": {
                        "type": "boolean",
                        "description": "Skip missing date.\n"
                    },
                    "skipMissingIsbn": {
                        "type": "boolean",
                        "description": "Skip missing ISBN.\n"
                    },
                    "skipPartsAndSets": {
                        "type": "boolean",
                        "description": "Skip parts and sets.\n"
                    },
                    "skipSeriesSecondary": {
                        "type": "boolean",
                        "description": "Skip secondary series books.\n"
                    }
                },
                "type": "object",
                "required": [
                    "allowedLanguages",
                    "id",
                    "ignored",
                    "minPages",
                    "minPopularity",
                    "name",
                    "skipMissingDate",
                    "skipMissingIsbn",
                    "skipPartsAndSets",
                    "skipSeriesSecondary"
                ]
            }
        },
        "readarr:Profiles/getMetadataProfiles:getMetadataProfiles": {
            "description": "\u003c!-- subcategory:Profiles --\u003eList all available Metadata Profiles.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as readarr from \"@pulumi/readarr\";\n\nconst example = readarr.Profiles.getMetadataProfiles({});\n```\n```python\nimport pulumi\nimport pulumi_readarr as readarr\n\nexample = readarr.Profiles.get_metadata_profiles()\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Readarr = Pulumi.Readarr;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Readarr.Profiles.GetMetadataProfiles.Invoke();\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/MaienM/pulumi-readarr/sdk/v2/go/readarr/Profiles\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := Profiles.GetMetadataProfiles(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.readarr.Profiles.ProfilesFunctions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = ProfilesFunctions.getMetadataProfiles();\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: readarr:Profiles:getMetadataProfiles\n      Arguments: {}\n```\n{{% /example %}}\n{{% /examples %}}",
            "outputs": {
                "description": "A collection of values returned by getMetadataProfiles.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The ID of this resource.\n"
                    },
                    "metadataProfiles": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/readarr:Profiles/getMetadataProfilesMetadataProfile:getMetadataProfilesMetadataProfile"
                        },
                        "description": "Metadata Profile list.\n"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "metadataProfiles"
                ]
            }
        },
        "readarr:Profiles/getQuality:getQuality": {
            "description": "\u003c!-- subcategory:Profiles --\u003eSingle Quality.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as readarr from \"@pulumi/readarr\";\n\nconst example = readarr.Profiles.getQuality({\n    name: \"EPUB\",\n});\n```\n```python\nimport pulumi\nimport pulumi_readarr as readarr\n\nexample = readarr.Profiles.get_quality(name=\"EPUB\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Readarr = Pulumi.Readarr;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Readarr.Profiles.GetQuality.Invoke(new()\n    {\n        Name = \"EPUB\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/MaienM/pulumi-readarr/sdk/v2/go/readarr/Profiles\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := Profiles.GetQuality(ctx, \u0026profiles.GetQualityArgs{\n\t\t\tName: \"EPUB\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.readarr.Profiles.ProfilesFunctions;\nimport com.pulumi.readarr.Profiles.inputs.GetQualityArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = ProfilesFunctions.getQuality(GetQualityArgs.builder()\n            .name(\"EPUB\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: readarr:Profiles:getQuality\n      Arguments:\n        name: EPUB\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getQuality.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Quality Name.\n"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getQuality.\n",
                "properties": {
                    "id": {
                        "type": "integer",
                        "description": "Quality  ID.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Quality Name.\n"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "name"
                ]
            }
        },
        "readarr:Profiles/getQualityDefinition:getQualityDefinition": {
            "description": "\u003c!-- subcategory:Profiles --\u003eSingle Quality Definition.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as readarr from \"@pulumi/readarr\";\n\nconst example = readarr.Profiles.getQualityDefinition({\n    id: 3,\n});\n```\n```python\nimport pulumi\nimport pulumi_readarr as readarr\n\nexample = readarr.Profiles.get_quality_definition(id=3)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Readarr = Pulumi.Readarr;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Readarr.Profiles.GetQualityDefinition.Invoke(new()\n    {\n        Id = 3,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/MaienM/pulumi-readarr/sdk/v2/go/readarr/Profiles\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := Profiles.GetQualityDefinition(ctx, \u0026profiles.GetQualityDefinitionArgs{\n\t\t\tId: 3,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.readarr.Profiles.ProfilesFunctions;\nimport com.pulumi.readarr.Profiles.inputs.GetQualityDefinitionArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = ProfilesFunctions.getQualityDefinition(GetQualityDefinitionArgs.builder()\n            .id(3)\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: readarr:Profiles:getQualityDefinition\n      Arguments:\n        id: 3\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getQualityDefinition.\n",
                "properties": {
                    "id": {
                        "type": "integer",
                        "description": "Quality Definition ID.\n"
                    },
                    "minSize": {
                        "type": "number",
                        "description": "Minimum size MB/min.\n"
                    }
                },
                "type": "object",
                "required": [
                    "id"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getQualityDefinition.\n",
                "properties": {
                    "id": {
                        "type": "integer",
                        "description": "Quality Definition ID.\n"
                    },
                    "maxSize": {
                        "type": "number",
                        "description": "Maximum size MB/min.\n"
                    },
                    "minSize": {
                        "type": "number",
                        "description": "Minimum size MB/min.\n"
                    },
                    "qualityId": {
                        "type": "integer",
                        "description": "Quality ID.\n"
                    },
                    "qualityName": {
                        "type": "string",
                        "description": "Quality Name.\n"
                    },
                    "title": {
                        "type": "string",
                        "description": "Quality Definition Title.\n"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "maxSize",
                    "minSize",
                    "qualityId",
                    "qualityName",
                    "title"
                ]
            }
        },
        "readarr:Profiles/getQualityDefinitions:getQualityDefinitions": {
            "description": "\u003c!-- subcategory:Profiles --\u003eList all available Quality Definitions.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as readarr from \"@pulumi/readarr\";\n\nconst example = readarr.Profiles.getQualityDefinitions({});\n```\n```python\nimport pulumi\nimport pulumi_readarr as readarr\n\nexample = readarr.Profiles.get_quality_definitions()\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Readarr = Pulumi.Readarr;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Readarr.Profiles.GetQualityDefinitions.Invoke();\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/MaienM/pulumi-readarr/sdk/v2/go/readarr/Profiles\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := Profiles.GetQualityDefinitions(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.readarr.Profiles.ProfilesFunctions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = ProfilesFunctions.getQualityDefinitions();\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: readarr:Profiles:getQualityDefinitions\n      Arguments: {}\n```\n{{% /example %}}\n{{% /examples %}}",
            "outputs": {
                "description": "A collection of values returned by getQualityDefinitions.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The ID of this resource.\n"
                    },
                    "qualityDefinitions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/readarr:Profiles/getQualityDefinitionsQualityDefinition:getQualityDefinitionsQualityDefinition"
                        },
                        "description": "Quality Definition list.\n"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "qualityDefinitions"
                ]
            }
        },
        "readarr:Profiles/getQualityProfile:getQualityProfile": {
            "description": "\u003c!-- subcategory:Profiles --\u003eSingle Quality Profile.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as readarr from \"@pulumi/readarr\";\n\nconst example = readarr.Profiles.getQualityProfile({\n    name: \"Example\",\n});\n```\n```python\nimport pulumi\nimport pulumi_readarr as readarr\n\nexample = readarr.Profiles.get_quality_profile(name=\"Example\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Readarr = Pulumi.Readarr;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Readarr.Profiles.GetQualityProfile.Invoke(new()\n    {\n        Name = \"Example\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/MaienM/pulumi-readarr/sdk/v2/go/readarr/Profiles\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := Profiles.GetQualityProfile(ctx, \u0026profiles.GetQualityProfileArgs{\n\t\t\tName: \"Example\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.readarr.Profiles.ProfilesFunctions;\nimport com.pulumi.readarr.Profiles.inputs.GetQualityProfileArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = ProfilesFunctions.getQualityProfile(GetQualityProfileArgs.builder()\n            .name(\"Example\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: readarr:Profiles:getQualityProfile\n      Arguments:\n        name: Example\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getQualityProfile.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Quality Profile Name.\n"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getQualityProfile.\n",
                "properties": {
                    "cutoff": {
                        "type": "integer",
                        "description": "Quality ID to which cutoff.\n"
                    },
                    "cutoffFormatScore": {
                        "type": "integer",
                        "description": "Cutoff format score.\n"
                    },
                    "formatItems": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/readarr:Profiles/getQualityProfileFormatItem:getQualityProfileFormatItem"
                        },
                        "description": "Format items.\n"
                    },
                    "id": {
                        "type": "integer",
                        "description": "Quality Profile ID.\n"
                    },
                    "minFormatScore": {
                        "type": "integer",
                        "description": "Min format score.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Quality Profile Name.\n"
                    },
                    "qualityGroups": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/readarr:Profiles/getQualityProfileQualityGroup:getQualityProfileQualityGroup"
                        },
                        "description": "Quality groups.\n"
                    },
                    "upgradeAllowed": {
                        "type": "boolean",
                        "description": "Upgrade allowed flag.\n"
                    }
                },
                "type": "object",
                "required": [
                    "cutoff",
                    "cutoffFormatScore",
                    "formatItems",
                    "id",
                    "minFormatScore",
                    "name",
                    "qualityGroups",
                    "upgradeAllowed"
                ]
            }
        },
        "readarr:Profiles/getQualityProfiles:getQualityProfiles": {
            "description": "\u003c!-- subcategory:Profiles --\u003eList all available Quality Profiles.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as readarr from \"@pulumi/readarr\";\n\nconst example = readarr.Profiles.getQualityProfiles({});\n```\n```python\nimport pulumi\nimport pulumi_readarr as readarr\n\nexample = readarr.Profiles.get_quality_profiles()\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Readarr = Pulumi.Readarr;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Readarr.Profiles.GetQualityProfiles.Invoke();\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/MaienM/pulumi-readarr/sdk/v2/go/readarr/Profiles\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := Profiles.GetQualityProfiles(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.readarr.Profiles.ProfilesFunctions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = ProfilesFunctions.getQualityProfiles();\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: readarr:Profiles:getQualityProfiles\n      Arguments: {}\n```\n{{% /example %}}\n{{% /examples %}}",
            "outputs": {
                "description": "A collection of values returned by getQualityProfiles.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The ID of this resource.\n"
                    },
                    "qualityProfiles": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/readarr:Profiles/getQualityProfilesQualityProfile:getQualityProfilesQualityProfile"
                        },
                        "description": "Quality Profile list.\n"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "qualityProfiles"
                ]
            }
        },
        "readarr:Profiles/getReleaseProfile:getReleaseProfile": {
            "description": "\u003c!-- subcategory:Profiles --\u003eSingle Release Profile.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as readarr from \"@pulumi/readarr\";\n\nconst example = readarr.Profiles.getReleaseProfile({\n    id: 1,\n});\n```\n```python\nimport pulumi\nimport pulumi_readarr as readarr\n\nexample = readarr.Profiles.get_release_profile(id=1)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Readarr = Pulumi.Readarr;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Readarr.Profiles.GetReleaseProfile.Invoke(new()\n    {\n        Id = 1,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/MaienM/pulumi-readarr/sdk/v2/go/readarr/Profiles\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := Profiles.GetReleaseProfile(ctx, \u0026profiles.GetReleaseProfileArgs{\n\t\t\tId: 1,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.readarr.Profiles.ProfilesFunctions;\nimport com.pulumi.readarr.Profiles.inputs.GetReleaseProfileArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = ProfilesFunctions.getReleaseProfile(GetReleaseProfileArgs.builder()\n            .id(1)\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: readarr:Profiles:getReleaseProfile\n      Arguments:\n        id: 1\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getReleaseProfile.\n",
                "properties": {
                    "id": {
                        "type": "integer",
                        "description": "Release Profile ID.\n"
                    }
                },
                "type": "object",
                "required": [
                    "id"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getReleaseProfile.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Enabled.\n"
                    },
                    "id": {
                        "type": "integer",
                        "description": "Release Profile ID.\n"
                    },
                    "ignoreds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Ignored terms. At least one of `required` and `ignored` must be set.\n"
                    },
                    "indexerId": {
                        "type": "integer",
                        "description": "Indexer ID. Set `0` for all.\n"
                    },
                    "requireds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Required terms. At least one of `required` and `ignored` must be set.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "List of associated tags.\n"
                    }
                },
                "type": "object",
                "required": [
                    "enabled",
                    "id",
                    "ignoreds",
                    "indexerId",
                    "requireds",
                    "tags"
                ]
            }
        },
        "readarr:Profiles/getReleaseProfiles:getReleaseProfiles": {
            "description": "\u003c!-- subcategory:Profiles --\u003eList all available Release Profiles.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as readarr from \"@pulumi/readarr\";\n\nconst example = readarr.Profiles.getReleaseProfiles({});\n```\n```python\nimport pulumi\nimport pulumi_readarr as readarr\n\nexample = readarr.Profiles.get_release_profiles()\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Readarr = Pulumi.Readarr;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Readarr.Profiles.GetReleaseProfiles.Invoke();\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/MaienM/pulumi-readarr/sdk/v2/go/readarr/Profiles\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := Profiles.GetReleaseProfiles(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.readarr.Profiles.ProfilesFunctions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = ProfilesFunctions.getReleaseProfiles();\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: readarr:Profiles:getReleaseProfiles\n      Arguments: {}\n```\n{{% /example %}}\n{{% /examples %}}",
            "outputs": {
                "description": "A collection of values returned by getReleaseProfiles.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The ID of this resource.\n"
                    },
                    "releaseProfiles": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/readarr:Profiles/getReleaseProfilesReleaseProfile:getReleaseProfilesReleaseProfile"
                        },
                        "description": "Release Profile list.\n"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "releaseProfiles"
                ]
            }
        },
        "readarr:Status/getSystemStatus:getSystemStatus": {
            "description": "\u003c!-- subcategory:Status --\u003eSystem Status resource. User must have rights to read `config.xml`.\nFor more information refer to [System Status](https://wiki.servarr.com/readarr/system#status) documentation.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as readarr from \"@pulumi/readarr\";\n\nconst example = readarr.Status.getSystemStatus({});\n```\n```python\nimport pulumi\nimport pulumi_readarr as readarr\n\nexample = readarr.Status.get_system_status()\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Readarr = Pulumi.Readarr;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Readarr.Status.GetSystemStatus.Invoke();\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/MaienM/pulumi-readarr/sdk/v2/go/readarr/Status\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := Status.GetSystemStatus(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.readarr.Status.StatusFunctions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = StatusFunctions.getSystemStatus();\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: readarr:Status:getSystemStatus\n      Arguments: {}\n```\n{{% /example %}}\n{{% /examples %}}",
            "outputs": {
                "description": "A collection of values returned by getSystemStatus.\n",
                "properties": {
                    "appData": {
                        "type": "string",
                        "description": "App data folder.\n"
                    },
                    "appName": {
                        "type": "string",
                        "description": "App name.\n"
                    },
                    "authentication": {
                        "type": "string",
                        "description": "Authentication.\n"
                    },
                    "branch": {
                        "type": "string",
                        "description": "Branch.\n"
                    },
                    "buildTime": {
                        "type": "string",
                        "description": "Build time.\n"
                    },
                    "databaseType": {
                        "type": "string",
                        "description": "Database type.\n"
                    },
                    "databaseVersion": {
                        "type": "string",
                        "description": "Database version.\n"
                    },
                    "id": {
                        "type": "integer",
                        "description": "Delay Profile ID.\n"
                    },
                    "instanceName": {
                        "type": "string",
                        "description": "Instance name.\n"
                    },
                    "isAdmin": {
                        "type": "boolean",
                        "description": "Is admin flag.\n"
                    },
                    "isDebug": {
                        "type": "boolean",
                        "description": "Is debug flag.\n"
                    },
                    "isDocker": {
                        "type": "boolean",
                        "description": "Is docker flag.\n"
                    },
                    "isLinux": {
                        "type": "boolean",
                        "description": "Is linux flag.\n"
                    },
                    "isMono": {
                        "type": "boolean",
                        "description": "Is mono flag.\n"
                    },
                    "isNetCore": {
                        "type": "boolean",
                        "description": "Is net core flag.\n"
                    },
                    "isOsx": {
                        "type": "boolean",
                        "description": "Is osx flag.\n"
                    },
                    "isProduction": {
                        "type": "boolean",
                        "description": "Is production flag.\n"
                    },
                    "isUserInteractive": {
                        "type": "boolean",
                        "description": "Is user interactive flag.\n"
                    },
                    "isWindows": {
                        "type": "boolean",
                        "description": "Is windows flag.\n"
                    },
                    "migrationVersion": {
                        "type": "integer",
                        "description": "Migration version.\n"
                    },
                    "mode": {
                        "type": "string",
                        "description": "Mode.\n"
                    },
                    "osName": {
                        "type": "string",
                        "description": "OS name.\n"
                    },
                    "osVersion": {
                        "type": "string",
                        "description": "OS version.\n"
                    },
                    "packageAuthor": {
                        "type": "string",
                        "description": "Package author.\n"
                    },
                    "packageUpdateMechanism": {
                        "type": "string",
                        "description": "Package update mechanism.\n"
                    },
                    "packageVersion": {
                        "type": "string",
                        "description": "Package version.\n"
                    },
                    "runtimeName": {
                        "type": "string",
                        "description": "Runtime name.\n"
                    },
                    "runtimeVersion": {
                        "type": "string",
                        "description": "Runtime version.\n"
                    },
                    "startTime": {
                        "type": "string",
                        "description": "Start time.\n"
                    },
                    "startupPath": {
                        "type": "string",
                        "description": "Startup path.\n"
                    },
                    "urlBase": {
                        "type": "string",
                        "description": "Base URL.\n"
                    },
                    "version": {
                        "type": "string",
                        "description": "Version.\n"
                    }
                },
                "type": "object",
                "required": [
                    "appData",
                    "appName",
                    "authentication",
                    "branch",
                    "buildTime",
                    "databaseType",
                    "databaseVersion",
                    "id",
                    "instanceName",
                    "isAdmin",
                    "isDebug",
                    "isDocker",
                    "isLinux",
                    "isMono",
                    "isNetCore",
                    "isOsx",
                    "isProduction",
                    "isUserInteractive",
                    "isWindows",
                    "migrationVersion",
                    "mode",
                    "osName",
                    "osVersion",
                    "packageAuthor",
                    "packageUpdateMechanism",
                    "packageVersion",
                    "runtimeName",
                    "runtimeVersion",
                    "startTime",
                    "startupPath",
                    "urlBase",
                    "version"
                ]
            }
        },
        "readarr:Tags/getTag:getTag": {
            "description": "\u003c!-- subcategory:Tags --\u003eSingle Tag.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as readarr from \"@pulumi/readarr\";\n\nconst example = readarr.Tags.getTag({\n    label: \"example\",\n});\n```\n```python\nimport pulumi\nimport pulumi_readarr as readarr\n\nexample = readarr.Tags.get_tag(label=\"example\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Readarr = Pulumi.Readarr;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Readarr.Tags.GetTag.Invoke(new()\n    {\n        Label = \"example\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/MaienM/pulumi-readarr/sdk/v2/go/readarr/Tags\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := Tags.GetTag(ctx, \u0026tags.GetTagArgs{\n\t\t\tLabel: \"example\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.readarr.Tags.TagsFunctions;\nimport com.pulumi.readarr.Tags.inputs.GetTagArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = TagsFunctions.getTag(GetTagArgs.builder()\n            .label(\"example\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: readarr:Tags:getTag\n      Arguments:\n        label: example\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getTag.\n",
                "properties": {
                    "label": {
                        "type": "string",
                        "description": "Tag label.\n"
                    }
                },
                "type": "object",
                "required": [
                    "label"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getTag.\n",
                "properties": {
                    "id": {
                        "type": "integer",
                        "description": "Tag ID.\n"
                    },
                    "label": {
                        "type": "string",
                        "description": "Tag label.\n"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "label"
                ]
            }
        },
        "readarr:Tags/getTags:getTags": {
            "description": "\u003c!-- subcategory:Tags --\u003eList all available Tags.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as readarr from \"@pulumi/readarr\";\n\nconst example = readarr.Tags.getTags({});\n```\n```python\nimport pulumi\nimport pulumi_readarr as readarr\n\nexample = readarr.Tags.get_tags()\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Readarr = Pulumi.Readarr;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Readarr.Tags.GetTags.Invoke();\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/MaienM/pulumi-readarr/sdk/v2/go/readarr/Tags\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := Tags.GetTags(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.readarr.Tags.TagsFunctions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = TagsFunctions.getTags();\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: readarr:Tags:getTags\n      Arguments: {}\n```\n{{% /example %}}\n{{% /examples %}}",
            "outputs": {
                "description": "A collection of values returned by getTags.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The ID of this resource.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/readarr:Tags/getTagsTag:getTagsTag"
                        },
                        "description": "Tag list.\n"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "tags"
                ]
            }
        }
    }
}